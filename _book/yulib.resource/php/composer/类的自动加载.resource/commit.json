{"compress":true,"commitItems":[["296d9bdc-1271-4fe2-aa08-34241a0a71c3",1565583290494,"",[[1565583242351,["sirui-php@DESKTOP-PSVFMK8",[[1,0,"# 类的自动加载.md\n\n\n\n"]],[0,0],[14,14]]],[1565583245424,["sirui-php@DESKTOP-PSVFMK8",[[-1,2,"类的自动加载.md"]],[2,11],[2,2]]],[1565583245945,["sirui-php@DESKTOP-PSVFMK8",[[1,2,"ja"]],[2,2],[4,4]]],[1565583246365,["sirui-php@DESKTOP-PSVFMK8",[[-1,2,"ja"]],[4,4],[2,2]]],[1565583247681,["sirui-php@DESKTOP-PSVFMK8",[[1,2,"减速"]],[2,2],[4,4]]],[1565583254407,["sirui-php@DESKTOP-PSVFMK8",[[-1,2,"减速"]],[4,4],[2,2]]],[1565583256362,["sirui-php@DESKTOP-PSVFMK8",[[1,2,"起源"]],[2,2],[4,4]]],[1565583256925,["sirui-php@DESKTOP-PSVFMK8",[[1,8,"\n"]],[4,4],[5,5]]],[1565583732054,["sirui-php@DESKTOP-PSVFMK8",[[1,5,"很多开发者写面向对象的应用程序时，对每个类的定义建立一个 PHP 源文件。一个很大的烦恼是不得不在每个脚本（每个类一个文件）开头写一个长长的包含文件的列表。\n\n在软件开发的系统中，不可能把所有的类都写在一个PHP文件中，当在一个PHP文件中需要调用另一个文件中声明的类时，就需要通过include把 这个文件引入。不过有的时候，在文件众多的项目中，要一一将所需类的文件都include进来，是一个很让人头疼的事，所以我们能不能在用到什么类的时 候，再把这个类所在的php文件导入呢？这就是我们这里我们要讲的自动加载类。"]],[5,5],[264,264]]],[1565583913254,["sirui-php@DESKTOP-PSVFMK8",[[1,265,"## __autoload()\n\n在 PHP 5 中，可以定义一个 __autoload()函数，它会在试图使用尚未被定义的类时自动调 用，通过调用此函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类， __autoload()函数接收的一个参数，就是你想加载的类的 类名，所以你做项目时，在组织定义类的文件名时，需要按照一定的规则，最好以类名为中心，也可以加上统一的前缀或后缀形成文件名，比如 xxx_classname.php、classname_xxx.php以及就是classname.php等等。\n\n本例尝试分别从 MyClass1.php 和 MyClass2.php 文件中加载 MyClass1 和 MyClass2 类\n\n```\n1\t<?php\n2\tfunction __autoload($classname)\n3\t{\n4\t    require_once $classname . '.php';\n5\t}\n6\n7\t//MyClass1类不存在时，自动调用__autoload()函数，传入参数”MyClass1”\n8\t$obj = new MyClass1();\n9\n10\t//MyClass2类不存在时，自动调用__autoload()函数，传入参数”MyClass2”\n11\t$obj2 = new MyClass2();\n12\t?>\n```DiscuzX2.5的处理方式为：\n\n```\n1\t<?php\n2\tif (function_exists('spl_autoload_register'))\n3\t{\n4\t    spl_autoload_register(array('core', 'autoload'));\n5\t}\n6\telse\n7\t{\n8\t    function __autoload($class)\n9\t    {\n10\t        return core::autoload($class);\n11\t    }\n12\t}\n13    ?>\n```"]],[265,265],[1120,1120]]],[1565583913825,["sirui-php@DESKTOP-PSVFMK8",[[-1,265,"## __autoload()\n\n在 PHP 5 中，可以定义一个 __autoload()函数，它会在试图使用尚未被定义的类时自动调 用，通过调用此函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类， __autoload()函数接收的一个参数，就是你想加载的类的 类名，所以你做项目时，在组织定义类的文件名时，需要按照一定的规则，最好以类名为中心，也可以加上统一的前缀或后缀形成文件名，比如 xxx_classname.php、classname_xxx.php以及就是classname.php等等。\n\n本例尝试分别从 MyClass1.php 和 MyClass2.php 文件中加载 MyClass1 和 MyClass2 类\n\n```\n1\t<?php\n2\tfunction __autoload($classname)\n3\t{\n4\t    require_once $classname . '.php';\n5\t}\n6\n7\t//MyClass1类不存在时，自动调用__autoload()函数，传入参数”MyClass1”\n8\t$obj = new MyClass1();\n9\n10\t//MyClass2类不存在时，自动调用__autoload()函数，传入参数”MyClass2”\n11\t$obj2 = new MyClass2();\n12\t?>\n```DiscuzX2.5的处理方式为：\n\n```\n1\t<?php\n2\tif (function_exists('spl_autoload_register'))\n3\t{\n4\t    spl_autoload_register(array('core', 'autoload'));\n5\t}\n6\telse\n7\t{\n8\t    function __autoload($class)\n9\t    {\n10\t        return core::autoload($class);\n11\t    }\n12\t}\n13    ?>\n```"]],[1120,1120],[265,265]]],[1565583916671,["sirui-php@DESKTOP-PSVFMK8",[[1,265,"## __autoload()\n\n在 PHP 5 中，可以定义一个 __autoload()函数，它会在试图使用尚未被定义的类时自动调 用，通过调用此函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类， __autoload()函数接收的一个参数，就是你想加载的类的 类名，所以你做项目时，在组织定义类的文件名时，需要按照一定的规则，最好以类名为中心，也可以加上统一的前缀或后缀形成文件名，比如 xxx_classname.php、classname_xxx.php以及就是classname.php等等。\n\n本例尝试分别从 MyClass1.php 和 MyClass2.php 文件中加载 MyClass1 和 MyClass2 类\n\n```\n1\t<?php\n2\tfunction __autoload($classname)\n3\t{\n4\t    require_once $classname . '.php';\n5\t}\n6\n7\t//MyClass1类不存在时，自动调用__autoload()函数，传入参数”MyClass1”\n8\t$obj = new MyClass1();\n9\n10\t//MyClass2类不存在时，自动调用__autoload()函数，传入参数”MyClass2”\n11\t$obj2 = new MyClass2();\n12\t?>\n```DiscuzX2.5的处理方式为：\n\n```\n1\t<?php\n2\tif (function_exists('spl_autoload_register'))\n3\t{\n4\t    spl_autoload_register(array('core', 'autoload'));\n5\t}\n6\telse\n7\t{\n8\t    function __autoload($class)\n9\t    {\n10\t        return core::autoload($class);\n11\t    }\n12\t}\n13    ?>\n```"]],[265,265],[1120,1120]]],[1565583927413,["sirui-php@DESKTOP-PSVFMK8",[[-1,265,"## __autoload()\n\n在 PHP 5 中，可以定义一个 __autoload()函数，它会在试图使用尚未被定义的类时自动调 用，通过调用此函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类， __autoload()函数接收的一个参数，就是你想加载的类的 类名，所以你做项目时，在组织定义类的文件名时，需要按照一定的规则，最好以类名为中心，也可以加上统一的前缀或后缀形成文件名，比如 xxx_classname.php、classname_xxx.php以及就是classname.php等等。\n\n本例尝试分别从 MyClass1.php 和 MyClass2.php 文件中加载 MyClass1 和 MyClass2 类\n\n```\n1\t<?php\n2\tfunction __autoload($classname)\n3\t{\n4\t    require_once $classname . '.php';\n5\t}\n6\n7\t//MyClass1类不存在时，自动调用__autoload()函数，传入参数”MyClass1”\n8\t$obj = new MyClass1();\n9\n10\t//MyClass2类不存在时，自动调用__autoload()函数，传入参数”MyClass2”\n11\t$obj2 = new MyClass2();\n12\t?>\n```DiscuzX2.5的处理方式为：\n\n```\n1\t<?php\n2\tif (function_exists('spl_autoload_register'))\n3\t{\n4\t    spl_autoload_register(array('core', 'autoload'));\n5\t}\n6\telse\n7\t{\n8\t    function __autoload($class)\n9\t    {\n10\t        return core::autoload($class);\n11\t    }\n12\t}\n13    ?>\n```\n\n"]],[265,1122],[265,265]]],[1565583928328,["sirui-php@DESKTOP-PSVFMK8",[[1,266,"\n"]],[265,265],[266,266]]],[1565583928543,["sirui-php@DESKTOP-PSVFMK8",[[1,266,"## __autoload()\n\n在 PHP 5 中，可以定义一个 __autoload()函数，它会在试图使用尚未被定义的类时自动调 用，通过调用此函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类， __autoload()函数接收的一个参数，就是你想加载的类的 类名，所以你做项目时，在组织定义类的文件名时，需要按照一定的规则，最好以类名为中心，也可以加上统一的前缀或后缀形成文件名，比如 xxx_classname.php、classname_xxx.php以及就是classname.php等等。\n\n本例尝试分别从 MyClass1.php 和 MyClass2.php 文件中加载 MyClass1 和 MyClass2 类\n\n```\n1\t<?php\n2\tfunction __autoload($classname)\n3\t{\n4\t    require_once $classname . '.php';\n5\t}\n6\n7\t//MyClass1类不存在时，自动调用__autoload()函数，传入参数”MyClass1”\n8\t$obj = new MyClass1();\n9\n10\t//MyClass2类不存在时，自动调用__autoload()函数，传入参数”MyClass2”\n11\t$obj2 = new MyClass2();\n12\t?>\n\n```\n\nDiscuzX2.5的处理方式为：\n\n```\n1\t<?php\n2\tif (function_exists('spl_autoload_register'))\n3\t{\n4\t    spl_autoload_register(array('core', 'autoload'));\n5\t}\n6\telse\n7\t{\n8\t    function __autoload($class)\n9\t    {\n10\t        return core::autoload($class);\n11\t    }\n12\t}\n13    ?>\n\n```\n\n注意：__autoload() 是专门为 类的不存在 而设计的！！！很多框架利用这个函数，实现 类文件的自动加载 ！！！"]],[266,266],[1187,1187]]],[1565583959800,["sirui-php@DESKTOP-PSVFMK8",[[-1,860,"DiscuzX2.5的处理方式为：\n\n```\n1\t<?php\n2\tif (function_exists('spl_autoload_register'))\n3\t{\n4\t    spl_autoload_register(array('core', 'autoload'));\n5\t}\n6\telse\n7\t{\n8\t    function __autoload($class)\n9\t    {\n10\t        return core::autoload($class);\n11\t    }\n12\t}\n13    ?>\n\n```\n\n注意：__autoload() 是专门为 类的不存在 而设计的！！！很多框架利用这个函数，实现 类文件的自动加载 ！！！"]],[860,1187],[860,860]]],[1565583960574,["sirui-php@DESKTOP-PSVFMK8",[[-1,860,"\n"]],[860,860],[859,859]]],[1565583961711,["sirui-php@DESKTOP-PSVFMK8",[[1,860,"\n"]],[859,859],[860,860]]],[1565583992896,["sirui-php@DESKTOP-PSVFMK8",[[1,861,"\n"]],[859,859],[860,860]]],[1565584002288,["sirui-php@DESKTOP-PSVFMK8",[[1,860,"## [spl_autoload_register()](https://www.php.net/manual/zh/function.spl-autoload-register.php)"]],[860,860],[954,954]]],[1565584006408,["sirui-php@DESKTOP-PSVFMK8",[[-1,887,"](https://www.php.net/manual/zh/function.spl-autoload-register.php)"]],[887,954],[887,887]]],[1565584009302,["sirui-php@DESKTOP-PSVFMK8",[[-1,863,"["]],[864,864],[863,863]]],[1565584018983,["sirui-php@DESKTOP-PSVFMK8",[[1,888,"\n"]],[886,886],[887,887]]],[1565584024150,["sirui-php@DESKTOP-PSVFMK8",[[1,887,"尽管 [__autoload()](https://www.php.net/manual/zh/function.autoload.php) 函数也能自动加载类和接口，但更建议使用 [spl_autoload_register()](https://www.php.net/manual/zh/function.spl-autoload-register.php) 函数。 [spl_autoload_register()](https://www.php.net/manual/zh/function.spl-autoload-register.php) 提供了一种更加灵活的方式来实现类的自动加载（同一个应用中，可以支持任意数量的加载器，比如第三方库中的）。因此，不再建议使用 [__autoload()](https://www.php.net/manual/zh/function.autoload.php) 函数，在以后的版本中它可能被弃用。"]],[887,887],[1313,1313]]],[1565584039768,["sirui-php@DESKTOP-PSVFMK8",[[-1,961,"能自动加载类和接口，但更建议使用 [spl_autoload_register()](https://www.php.net/manual/zh/function.spl-autoload-register.php) 函数。 [spl_autoload_register()](https://www.php.net/manual/zh/function.spl-autoload-register.php) 提供了一种更加灵活的方式来实现类的自动加载（同一个应用中，可以支持任意数量的加载器，比如第三方库中的）。因此，不再建议使用 [__autoload()](https://www.php.net/manual/zh/function.autoload.php) 函数，在以后的版本中它可能被弃用。\n"]],[961,1314],[961,961]]],[1565584042650,["sirui-php@DESKTOP-PSVFMK8",[[-1,890,"["],[-1,903,"](https://www.php.net/manual/zh/function."],[1,944," 函数也能自动加载类和接口，但更建议使用 spl_autoload_register() 函数。spl_autoload_register() 提供了一种更加灵活的方式来实现类的自动加载（同一个应用中，可以支持任意数量的加载器，比如第三方库中的）。因此，不再建议使用 __"],[-1,952,".php"],[1,956,"("],[-1,960,"也"],[1,961,"，在以后的版本中它可能被弃用。\n--------------------- \n版权声明：本文为CSDN博主「风-四方」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/wwx890208/article/details/82319676"]],[887,961],[1213,1213]]],[1565584047191,["sirui-php@DESKTOP-PSVFMK8",[[-1,887,"尽管 __autoload() 函数也能自动加载类和接口，但更建议使用 spl_autoload_register() 函数。spl_autoload_register() 提供了一种更加灵活的方式来实现类的自动加载（同一个应用中，可以支持任意数量的加载器，比如第三方库中的）。因此，不再建议使用 __autoload() 函数，在以后的版本中它可能被弃用。\n--------------------- \n版权声明：本文为CSDN博主「风-四方」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/wwx890208/article/details/82319676"]],[887,1213],[887,887]]],[1565584048032,["sirui-php@DESKTOP-PSVFMK8",[[1,887,"  "]],[887,887],[889,889]]],[1565584050688,["sirui-php@DESKTOP-PSVFMK8",[[-1,863,"spl_autoload_register()"]],[863,886],[863,863]]],[1565584055552,["sirui-php@DESKTOP-PSVFMK8",[[1,863,"spl——"]],[863,863],[868,868]]],[1565584056519,["sirui-php@DESKTOP-PSVFMK8",[[-1,866,"——"]],[868,868],[866,866]]],[1565584063537,["sirui-php@DESKTOP-PSVFMK8",[[1,866,"_autoload_regirst"]],[866,866],[883,883]]],[1565584065495,["sirui-php@DESKTOP-PSVFMK8",[[-1,876,"regirst"]],[883,883],[876,876]]],[1565584070184,["sirui-php@DESKTOP-PSVFMK8",[[1,876,"register"]],[876,876],[884,884]]],[1565584070471,["sirui-php@DESKTOP-PSVFMK8",[[1,885,"\n"]],[884,884],[885,885]]],[1565584070960,["sirui-php@DESKTOP-PSVFMK8",[[1,886,"\n"]],[885,885],[886,886]]],[1565584089098,["sirui-php@DESKTOP-PSVFMK8",[[1,886,"尽管 __autoload() 函数也能自动加载类喝接口"]],[886,886],[914,914]]],[1565584089631,["sirui-php@DESKTOP-PSVFMK8",[[-1,911,"喝接口"]],[914,914],[911,911]]],[1565584097851,["sirui-php@DESKTOP-PSVFMK8",[[1,911,"和接口, 但是更建议"]],[911,911],[921,921]]],[1565584123327,["sirui-php@DESKTOP-PSVFMK8",[[1,300,"=="],[1,374,"=="]],[300,374],[300,378]]],[1565584124222,["sirui-php@DESKTOP-PSVFMK8",[[1,302,"=="],[1,376,"=="]],[300,378],[300,382]]],[1565584126011,["sirui-php@DESKTOP-PSVFMK8",[[-1,302,"=="],[-1,378,"=="]],[300,382],[300,378]]],[1565584126636,["sirui-php@DESKTOP-PSVFMK8",[[-1,300,"=="],[-1,376,"=="]],[300,378],[300,374]]],[1565584145840,["sirui-php@DESKTOP-PSVFMK8",[[-1,374," "]],[300,375],[374,374]]],[1565584146726,["sirui-php@DESKTOP-PSVFMK8",[[1,374," "]],[374,374],[300,375]]],[1565584154495,["sirui-php@DESKTOP-PSVFMK8",[[1,921,"shy"]],[921,921],[924,924]]],[1565584155048,["sirui-php@DESKTOP-PSVFMK8",[[-1,921,"shy"]],[924,924],[921,921]]],[1565584159878,["sirui-php@DESKTOP-PSVFMK8",[[1,921,"使用spl_auto"]],[921,921],[931,931]]],[1565584163966,["sirui-php@DESKTOP-PSVFMK8",[[-1,921,"使用spl_auto"]],[931,931],[921,921]]],[1565584165769,["sirui-php@DESKTOP-PSVFMK8",[[1,921,"shi"]],[921,921],[924,924]]],[1565584166344,["sirui-php@DESKTOP-PSVFMK8",[[-1,921,"shi"]],[924,924],[921,921]]],[1565584167183,["sirui-php@DESKTOP-PSVFMK8",[[1,921,"shiyo"]],[921,921],[926,926]]],[1565584168038,["sirui-php@DESKTOP-PSVFMK8",[[-1,921,"shiyo"]],[926,926],[921,921]]],[1565584170490,["sirui-php@DESKTOP-PSVFMK8",[[1,921,"使用 ``"]],[921,921],[926,926]]],[1565584173599,["sirui-php@DESKTOP-PSVFMK8",[[1,925,"spl_q"]],[925,925],[930,930]]],[1565584173976,["sirui-php@DESKTOP-PSVFMK8",[[-1,929,"q"]],[930,930],[929,929]]],[1565584178537,["sirui-php@DESKTOP-PSVFMK8",[[1,929,"autoload_register"]],[929,929],[946,946]]],[1565584186673,["sirui-php@DESKTOP-PSVFMK8",[[1,947," 函数 "]],[947,947],[951,951]]],[1565584187510,["sirui-php@DESKTOP-PSVFMK8",[[-1,950," "]],[951,951],[950,950]]],[1565584209872,["sirui-php@DESKTOP-PSVFMK8",[[1,950,"，因为它提供了一种更加灵活的方式来实现类的自动加载()"]],[950,950],[977,977]]],[1565584211111,["sirui-php@DESKTOP-PSVFMK8",[[1,976," "]],[976,976],[977,977]]],[1565584211769,["sirui-php@DESKTOP-PSVFMK8",[[-1,976," "]],[977,977],[976,976]]],[1565584214041,["sirui-php@DESKTOP-PSVFMK8",[[1,976,"同意个"]],[976,976],[979,979]]],[1565584214646,["sirui-php@DESKTOP-PSVFMK8",[[-1,976,"同意个"]],[979,979],[976,976]]],[1565584229743,["sirui-php@DESKTOP-PSVFMK8",[[1,976,"同一个应用中 可以支持任意数量的加载器 "]],[976,976],[996,996]]],[1565584230495,["sirui-php@DESKTOP-PSVFMK8",[[-1,995," "]],[996,996],[995,995]]],[1565584230743,["sirui-php@DESKTOP-PSVFMK8",[[1,995,","]],[995,995],[996,996]]],[1565584234346,["sirui-php@DESKTOP-PSVFMK8",[[1,996," 比如第三方的"]],[996,996],[1003,1003]]],[1565584236214,["sirui-php@DESKTOP-PSVFMK8",[[-1,1002,"的"]],[1003,1003],[1002,1002]]],[1565584241093,["sirui-php@DESKTOP-PSVFMK8",[[1,1002,"库"]],[1002,1002],[1003,1003]]],[1565584243672,["sirui-php@DESKTOP-PSVFMK8",[[-1,1003,")"]],[1003,1003],[1003,1003]]],[1565584256970,["sirui-php@DESKTOP-PSVFMK8",[[1,1003,") 因此，不再建议使用 ··"]],[1003,1003],[1017,1017]]],[1565584257526,["sirui-php@DESKTOP-PSVFMK8",[[-1,1015,"··"]],[1017,1017],[1015,1015]]],[1565584258425,["sirui-php@DESKTOP-PSVFMK8",[[1,1015,"··"]],[1015,1015],[1017,1017]]],[1565584259016,["sirui-php@DESKTOP-PSVFMK8",[[-1,1015,"··"]],[1017,1017],[1015,1015]]],[1565584260151,["sirui-php@DESKTOP-PSVFMK8",[[1,1015,"``"]],[1015,1015],[1017,1017]]],[1565584267555,["sirui-php@DESKTOP-PSVFMK8",[[1,1016,"__autoload()"]],[1016,1016],[1028,1028]]],[1565584270601,["sirui-php@DESKTOP-PSVFMK8",[[1,946,"()"]],[946,946],[948,948]]],[1565584276361,["sirui-php@DESKTOP-PSVFMK8",[[1,1031," 函数, zai"]],[1031,1031],[1039,1039]]],[1565584276912,["sirui-php@DESKTOP-PSVFMK8",[[-1,1036,"zai"]],[1039,1039],[1036,1036]]],[1565584277399,["sirui-php@DESKTOP-PSVFMK8",[[1,1036,"zai"]],[1036,1036],[1039,1039]]],[1565584278134,["sirui-php@DESKTOP-PSVFMK8",[[-1,1036,"zai"]],[1039,1039],[1036,1036]]],[1565584286900,["sirui-php@DESKTOP-PSVFMK8",[[1,1036,"在以后的版本中它可能被启用"]],[1036,1036],[1049,1049]]],[1565584287599,["sirui-php@DESKTOP-PSVFMK8",[[-1,1047,"启用"]],[1049,1049],[1047,1047]]],[1565584288964,["sirui-php@DESKTOP-PSVFMK8",[[1,1047,"弃用"]],[1047,1047],[1049,1049]]],[1565590745372,["sirui-php@DESKTOP-PSVFMK8",[[-1,1050,"  "],[1,1052,"\n"]],[1052,1052],[1051,1051]]],[1565590745628,["sirui-php@DESKTOP-PSVFMK8",[[1,1051,"```\n<?\nfunction loadprint( $class ) {\n $file = $class . '.class.php';\n if (is_file($file)) {\n require_once($file);\n }\n}\nspl_autoload_register( 'loadprint' );\n$obj = new PRINTIT();\n$obj->doPrint();?>\n```"]],[1051,1051],[1253,1253]]],[1565590760274,["sirui-php@DESKTOP-PSVFMK8",[[1,1254,"\n"]],[1253,1253],[1254,1254]]],[1565590760611,["sirui-php@DESKTOP-PSVFMK8",[[1,1255,"\n"]],[1254,1254],[1255,1255]]],[1565590760939,["sirui-php@DESKTOP-PSVFMK8",[[1,1255,"将__autoload换成loadprint函数。但是loadprint不会像__autoload自动触发，这时spl_autoload_register()就起作用了，它告诉PHP碰到没有定义的类就执行loadprint()。\nspl_autoload_register() 调用静态方法\n\n作者：tianlinzhao\n链接：https://www.jianshu.com/p/cc7ed9f0b378\n来源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。"]],[1255,1255],[1499,1499]]],[1565590768268,["sirui-php@DESKTOP-PSVFMK8",[[-1,1402,"作者：tianlinzhao\n链接：https://www.jianshu.com/p/cc7ed9f0b378\n来源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。\n"]],[1401,1499],[1401,1401]]],[1565590768548,["sirui-php@DESKTOP-PSVFMK8",[[-1,1401,"\n"]],[1401,1401],[1400,1400]]],[1565590783482,["sirui-php@DESKTOP-PSVFMK8",[[-1,1370,"spl_autoload_register() 调用静态方法"]],[1400,1400],[1370,1370]]],[1565590783516,["sirui-php@DESKTOP-PSVFMK8",[[-1,1370,"\n"]],[1370,1370],[1369,1369]]],[1565590787277,["sirui-php@DESKTOP-PSVFMK8",[[-1,1255,"将__autoload换成loadprint函数。但是loadprint不会像__autoload自动触发，这时spl_autoload_register()就起作用了，它告诉PHP碰到没有定义的类就执行loadprint()。"]],[1369,1369],[1255,1255]]],[1565590787310,["sirui-php@DESKTOP-PSVFMK8",[[-1,1255,"\n"]],[1255,1255],[1254,1254]]],[1565590787514,["sirui-php@DESKTOP-PSVFMK8",[[-1,1254,"\n"]],[1254,1254],[1253,1253]]],[1565590860457,["sirui-php@DESKTOP-PSVFMK8",[[1,1254,"\n"]],[1253,1253],[1254,1254]]],[1565590860681,["sirui-php@DESKTOP-PSVFMK8",[[1,1255,"\n"]],[1254,1254],[1255,1255]]],[1565590861067,["sirui-php@DESKTOP-PSVFMK8",[[1,1255,"将__autoload换成loadprint函数。但是loadprint不会像__autoload自动触发，这时spl_autoload_register()就起作用了，它告诉PHP碰到没有定义的类就执行loadprint()。\nspl_autoload_register() 调用静态方法\n\n作者：tianlinzhao\n链接：https://www.jianshu.com/p/cc7ed9f0b378\n来源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。"]],[1255,1255],[1499,1499]]],[1565590863211,["sirui-php@DESKTOP-PSVFMK8",[[-1,1402,"作者：tianlinzhao\n链接：https://www.jianshu.com/p/cc7ed9f0b378\n来源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。\n"]],[1401,1499],[1401,1401]]],[1565590863649,["sirui-php@DESKTOP-PSVFMK8",[[-1,1401,"\n"]],[1401,1401],[1400,1400]]],[1565590864347,["sirui-php@DESKTOP-PSVFMK8",[[1,1401,"\n"]],[1400,1400],[1401,1401]]],[1565590869946,["sirui-php@DESKTOP-PSVFMK8",[[1,1402,"\n"]],[1401,1401],[1402,1402]]],[1565590870224,["sirui-php@DESKTOP-PSVFMK8",[[1,1402,"```\n<?\nclass test {\n public static function loadprint( $class ) {\n $file = $class . '.class.php';\n if (is_file($file)) {\n  require_once($file);\n }\n }\n}\nspl_autoload_register( array('test','loadprint') );\n//另一种写法：spl_autoload_register( \"test::loadprint\" );\n$obj = new PRINTIT();\n$obj->doPrint();?>\n```"]],[1402,1402],[1702,1702]]]],null,"sirui-php@DESKTOP-PSVFMK8"],["b578f98c-aa72-4557-ba08-512ccd2f3f95",1565591033864,"# 起源\n很多开发者写面向对象的应用程序时，对每个类的定义建立一个 PHP 源文件。一个很大的烦恼是不得不在每个脚本（每个类一个文件）开头写一个长长的包含文件的列表。\n\n在软件开发的系统中，不可能把所有的类都写在一个PHP文件中，当在一个PHP文件中需要调用另一个文件中声明的类时，就需要通过include把 这个文件引入。不过有的时候，在文件众多的项目中，要一一将所需类的文件都include进来，是一个很让人头疼的事，所以我们能不能在用到什么类的时 候，再把这个类所在的php文件导入呢？这就是我们这里我们要讲的自动加载类。\n\n## __autoload()\n\n在 PHP 5 中，可以定义一个 __autoload()函数，它会在试图使用尚未被定义的类时自动调 用，通过调用此函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类， __autoload()函数接收的一个参数，就是你想加载的类的 类名，所以你做项目时，在组织定义类的文件名时，需要按照一定的规则，最好以类名为中心，也可以加上统一的前缀或后缀形成文件名，比如 xxx_classname.php、classname_xxx.php以及就是classname.php等等。\n\n本例尝试分别从 MyClass1.php 和 MyClass2.php 文件中加载 MyClass1 和 MyClass2 类\n\n```\n1\t<?php\n2\tfunction __autoload($classname)\n3\t{\n4\t    require_once $classname . '.php';\n5\t}\n6\n7\t//MyClass1类不存在时，自动调用__autoload()函数，传入参数”MyClass1”\n8\t$obj = new MyClass1();\n9\n10\t//MyClass2类不存在时，自动调用__autoload()函数，传入参数”MyClass2”\n11\t$obj2 = new MyClass2();\n12\t?>\n\n```\n\n## spl_autoload_register\n\n尽管 __autoload() 函数也能自动加载类和接口, 但是更建议使用 `spl_autoload_register()` 函数，因为它提供了一种更加灵活的方式来实现类的自动加载(同一个应用中 可以支持任意数量的加载器, 比如第三方库) 因此，不再建议使用 `__autoload()` 函数, 在以后的版本中它可能被弃用\n\n```\n<?\nfunction loadprint( $class ) {\n $file = $class . '.class.php';\n if (is_file($file)) {\n require_once($file);\n }\n}\nspl_autoload_register( 'loadprint' );\n$obj = new PRINTIT();\n$obj->doPrint();?>\n```\n\n将__autoload换成loadprint函数。但是loadprint不会像__autoload自动触发，这时spl_autoload_register()就起作用了，它告诉PHP碰到没有定义的类就执行loadprint()。\nspl_autoload_register() 调用静态方法\n\n```\n<?\nclass test {\n public static function loadprint( $class ) {\n $file = $class . '.class.php';\n if (is_file($file)) {\n  require_once($file);\n }\n }\n}\nspl_autoload_register( array('test','loadprint') );\n//另一种写法：spl_autoload_register( \"test::loadprint\" );\n$obj = new PRINTIT();\n$obj->doPrint();?>\n```\n",[[1565590977193,["sirui-php@DESKTOP-PSVFMK8",[[1,1405,"php"]],[1405,1405],[1408,1408]]],[1565590979987,["sirui-php@DESKTOP-PSVFMK8",[[1,1054," php"]],[1054,1054],[1058,1058]]],[1565590981310,["sirui-php@DESKTOP-PSVFMK8",[[-1,1054," php"]],[1058,1058],[1054,1054]]],[1565590982900,["sirui-php@DESKTOP-PSVFMK8",[[1,1054," "]],[1054,1054],[1055,1055]]],[1565590983661,["sirui-php@DESKTOP-PSVFMK8",[[-1,1054," "]],[1055,1055],[1054,1054]]],[1565590985507,["sirui-php@DESKTOP-PSVFMK8",[[1,1054,"php"]],[1054,1054],[1057,1057]]],[1565590987180,["sirui-php@DESKTOP-PSVFMK8",[[1,1054," "]],[1054,1054],[1055,1055]]],[1565590996052,["sirui-php@DESKTOP-PSVFMK8",[[-1,1253,"\n"]],[1254,1254],[1253,1253]]],[1565590998346,["sirui-php@DESKTOP-PSVFMK8",[[1,1253,"\n"]],[1253,1253],[1254,1254]]],[1565590999018,["sirui-php@DESKTOP-PSVFMK8",[[1,1254,"\n"]],[1254,1254],[1255,1255]]],[1565591000094,["sirui-php@DESKTOP-PSVFMK8",[[-1,1254,"\n"]],[1255,1255],[1254,1254]]],[1565591000637,["sirui-php@DESKTOP-PSVFMK8",[[-1,1253,"\n"]],[1254,1254],[1253,1253]]],[1565591011067,["sirui-php@DESKTOP-PSVFMK8",[[1,596," php"]],[596,596],[600,600]]],[1565591014306,["sirui-php@DESKTOP-PSVFMK8",[[1,859,"\n"]],[857,857],[858,858]]],[1565591015355,["sirui-php@DESKTOP-PSVFMK8",[[1,858,"```"]],[858,858],[861,861]]],[1565591016923,["sirui-php@DESKTOP-PSVFMK8",[[-1,858,"```"]],[861,861],[858,858]]],[1565591017245,["sirui-php@DESKTOP-PSVFMK8",[[-1,859,"\n"]],[858,858],[857,857]]],[1565591017638,["sirui-php@DESKTOP-PSVFMK8",[[-1,596," php"]],[600,600],[596,596]]],[1565591018909,["sirui-php@DESKTOP-PSVFMK8",[[1,596,"php"]],[596,596],[599,599]]],[1565591022073,["sirui-php@DESKTOP-PSVFMK8",[[-1,1057," "]],[1057,1057],[1057,1057]]],[1565591035613,["sirui-php@DESKTOP-PSVFMK8",[[1,1255,"\n"]],[1255,1255],[1256,1256]]],[1565591122682,["sirui-php@DESKTOP-PSVFMK8",[[1,1712,"\n"]],[1711,1711],[1712,1712]]],[1565591123196,["sirui-php@DESKTOP-PSVFMK8",[[1,1713,"\n"]],[1712,1712],[1713,1713]]],[1565591123483,["sirui-php@DESKTOP-PSVFMK8",[[1,1713,"如果你的电脑大小写敏感，调用spl_autoload_register方法需要注意，他会把类名自动变为小写的。你的文件名称应该是全部小写的才行。\n\n文档下各路大神纷纷留言，我选择了一些，总体来说就是比原来灵活。上面的代码有些开玩笑的性质，我们不会定义好多扩展名的，也不会把类写的到处都是，添加各种扩展的。所以使用的时候，希望谨慎。\n--------------------- \n版权声明：本文为CSDN博主「风-四方」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/wwx890208/article/details/82319676"]],[1713,1713],[2025,2025]]],[1565591133508,["sirui-php@DESKTOP-PSVFMK8",[[1,1713,"三、注意\n\n"]],[1713,2025],[2031,2031]]],[1565591135427,["sirui-php@DESKTOP-PSVFMK8",[[-1,1713,"三、"]],[1715,1715],[1713,1713]]],[1565591137958,["sirui-php@DESKTOP-PSVFMK8",[[1,1715," :"]],[1715,1715],[1717,1717]]],[1565591141859,["sirui-php@DESKTOP-PSVFMK8",[[-1,1885,"--------------------- \n版权声明：本文为CSDN博主「风-四方」的原创文章，遵循CC 4.0 by-sa版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/wwx890208/article/details/82319676"]],[1885,2031],[1885,1885]]],[1565591143091,["sirui-php@DESKTOP-PSVFMK8",[[-1,1885,"\n"]],[1885,1885],[1884,1884]]],[1565591147994,["sirui-php@DESKTOP-PSVFMK8",[[-1,1793,"文档下各路大神纷纷留言，我选择了一些，总体来说就是比原来灵活。上面的代码有些开玩笑的性质，我们不会定义好多扩展名的，也不会把类写的到处都是，添加各种扩展的。所以使用的时候，希望谨慎。"]],[1793,1884],[1793,1793]]],[1565591148386,["sirui-php@DESKTOP-PSVFMK8",[[-1,1793,"\n"]],[1793,1793],[1792,1792]]],[1565591150899,["sirui-php@DESKTOP-PSVFMK8",[[-1,1792,"\n"]],[1792,1792],[1791,1791]]],[1565591386787,["sirui-php@DESKTOP-PSVFMK8",[[1,1713,"\n"]],[1712,1712],[1713,1713]]],[1565591387054,["sirui-php@DESKTOP-PSVFMK8",[[1,1713,"如果同时用spl_autoload_register注册了一个类的方法和__autoload函数，那么，会根据注册的先后，如果在第一个注册的方法或函数里加载了类文件，就不会再执行第二个被注册的类的方法或函数。反之就会执行第二个被注册的类的方法或函数。\n\n```\n<?php\nclass autoloader {\n  public static $loader;\n  public static function init() {\n    if (self::$loader == NULL)\n      self::$loader = new self ();\n    return self::$loader;\n  }\n  public function __construct() {\n    spl_autoload_register ( array ($this, 'model' ) );\n    spl_autoload_register ( array ($this, 'helper' ) );\n    spl_autoload_register ( array ($this, 'controller' ) );\n    spl_autoload_register ( array ($this, 'library' ) );\n  }\n  public function library($class) {\n    set_include_path ( get_include_path () . PATH_SEPARATOR . '/lib/' );\n    spl_autoload_extensions ( '.library.php' );\n    spl_autoload ( $class );\n  }\n  public function controller($class) {\n    $class = preg_replace ( '/_controller$/ui', '', $class );\n    set_include_path ( get_include_path () . PATH_SEPARATOR . '/controller/' );\n    spl_autoload_extensions ( '.controller.php' );\n    spl_autoload ( $class );\n  }\n  public function model($class) {\n    $class = preg_replace ( '/_model$/ui', '', $class );\n    set_include_path ( get_include_path () . PATH_SEPARATOR . '/model/' );\n    spl_autoload_extensions ( '.model.php' );\n    spl_autoload ( $class );\n  }\n  public function helper($class) {\n    $class = preg_replace ( '/_helper$/ui', '', $class );\n    set_include_path ( get_include_path () . PATH_SEPARATOR . '/helper/' );\n    spl_autoload_extensions ( '.helper.php' );\n    spl_autoload ( $class );\n  }\n}\n//call\nautoloader::init ();\n?>\n```\n\n作者：tianlinzhao\n链接：https://www.jianshu.com/p/cc7ed9f0b378\n来源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。"]],[1713,1713],[3374,3374]]],[1565591391502,["sirui-php@DESKTOP-PSVFMK8",[[1,1843,"php"]],[1843,1843],[1846,1846]]],[1565591395658,["sirui-php@DESKTOP-PSVFMK8",[[-1,3280,"作者：tianlinzhao\n链接：https://www.jianshu.com/p/cc7ed9f0b378\n来源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。\n"]],[3279,3377],[3279,3279]]]],null,"sirui-php@DESKTOP-PSVFMK8"]]}