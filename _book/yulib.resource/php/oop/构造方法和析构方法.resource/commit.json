{"compress":true,"commitItems":[["96d1d478-86d9-4ceb-a813-668e01858edf",1565692283943,"",[[1565692272560,["sirui-php@DESKTOP-PSVFMK8",[[1,0,"# 构造方法和析构方法\n\n\n\n"]],[0,0],[14,14]]],[1565692281042,["sirui-php@DESKTOP-PSVFMK8",[[1,0,"#"],[1,4,"函数\n\n大多数类都有一种称为构造函数的特殊"],[1,6,"。当创建一个对象时，它将自动调用构造函数，也就是使用new这个关键字来实例化对象的时候自动调用构造方法。构 造函数的声明与其它操作的声明一样，只是其名称必须是__construct( )。这是PHP5中的变化，以前的版本中，构造函数的名称必须与类名相同，这种在PHP5中仍然可以用，但现在以经很少有人用了，这样做的好处是可以使构 造函数独立于类名，当类名发生改变时不需要改相应的构造函数名称了。为了向下兼容，如果一个类中没有名为__construct( )的方法，PHP将搜索一个php4中的写法，与类名相同名的构造方法。\n\n```\n格式：function __construct ( [参数] ) { … … }\n\n```\n\n在一个类中只能声明一个构造方法，而是只有在每次创建对象的时候都会去调用一次构造方法，不能主动的调用这个方法，所以通常用它执行一些有用的初始化任务。比如对成属性在创建对象的时候赋初值。\n\n```\n1\t<?\n2\t//创建一个人类\n3\tclass Person\n4\t{\n5\t    //下面是人的成员属性\n6\t    var $name; //人的名子\n7\t    var $sex; //人的性别\n8\t    var $age; //人的年龄\n9\n10\t    //定义一个构造方法参数为姓名$name、性别$sex"],[1,7,"年龄$age\n11\t    function __construct($name, $sex, $age) {\n12\t        //通过构造方法传进来的$name给成员属性$this->name赋初使值\n13\t        $this->name = $name;\n14\t        //通过构造方法传进来的$sex给成员属性$this->sex赋初使值\n15\t        $this->sex = $sex;\n16\t        //通过构造方法传进来的$age给成员属性$this->age赋初使值\n17\t        $this->age = $age;\n18\t    }\n19\n20\t    //这个人的说话方法\n21\t    function say() {\n22\t        echo \"我的名子叫：\" . $this->name . \" 性别：\" . $this->sex . \" 我的年龄是：\" . $this->age;\n23\t    }\n24\t}\n25\n26\t//通过构造方法创建3个对象$p1、p2、$p3,分别传入三个不同的实参为姓名、性别和年龄\n27\t$p1 = new Person(\"张三\",\"男\", 20);\n28\t$p2 = new Person(\"李四\",\"女\", 30);\n29\t$p3 = new Person(\"王五\",\"男\", 40);\n30\n31\t//下面访问$p1对象中的说话方法\n32\t$p1->say();\n33\t//下面访问$p2对象中的说话方法\n34\t$p2->say();\n35\t//下面访问$p3对象中的说话方法\n36\t$p3->say();\n37\t?>\n\n```\n\n输出结果为：\n\n```\n我的名子叫：张三 性别：男 我的年龄是：20我的名子叫：李四 性别：女 我的年龄是：30我的名子叫：王五 性别：男 我的年龄是：40\n\n```\n\n## "],[1,9,"函数\n\n与构造函数相对的就是析构函数。析构函数是PHP5新添加的内容，在PHP4中没有析构函数。 析构函数允许在销毁一个类之前执行的一些操作或完成一些功能，比如说关闭文件， 释放结果集等，析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行，也就是对象在内存中被销毁前调用析构函数。与构造函数的名称类似， 一个类的析构函数名称必须是__destruct( )。析构函数不能带有任何参数。\n\n```\n格式：function __destruct ( ) { … … }\n\n1\t<?\n2\t//创建一个人类\n3\tclass Person\n4\t{\n5\t    //下面是人的成员属性\n6\t    var $name; //人的名子\n7\t    var $sex; //人的性别\n8\t    var $age; //人的年龄\n9\n10\t    //定义一个构造"],[1,11,"参数为姓名$name、性别$sex和年龄$age"],[1,12,"11\t    function __construct($name, $sex, $age) {"],[1,13,"12\t        //通过构造方法传进来的$name给成员属性$this->name赋初使值"],[1,14,"13\t        $this->name = $name;"],[1,15,"14\t        //通过构造方法传进来的$sex给成员属性$this->sex赋初使值\n15\t        $this->sex = $sex;\n16\t        //通过构造方法传进来的$age给成员属性$this->age赋初使值\n17\t        $this->age = $age;\n18\t    }\n19\n20\t    //这个人的说话方法\n21\t    function say() {\n22\t        echo \"我的名子叫：\" . $this->name . \" 性别：\" . $this->sex . \" 我的年龄是：\" . $this->age;\n23\t    }\n24\n25\t    //这是一个析构函数,在对象销毁前调用\n26\t    function __destruct() {\n27\t        echo \"再见\" . $this->name;\n28\t    }\n29\t}\n30\n31\t//通过构造方法创建3个对象$p1、p2、$p3,分别传入三个不同的实参为姓名、性别和年龄\n32\t$p1 = new Person(\"张三\", \"男\", 20);\n33\t$p2 = new Person(\"李四\", \"女\", 30);\n34\t$p3 = new Person(\"王五\", \"男\", 40);\n35\n36\t//下面访问$p1对象中的说话方法\n37\t$p1->say();\n38\t//下面访问$p2对象中的说话方法\n39\t$p2->say();\n40\t//下面访问$p3对象中的说话方法\n41\t$p3->say();\n42\t?>\n\n```\n\n输出结果为：\n\n```\n\t我的名子叫：张三 性别：男 我的年龄是：20我的名子叫：李四 性别：女 我的年龄是：30我的名子叫：王五 性别：男 我的年龄是：40\n再见王五\n再见李四\n再见张三\n\n```\n\n注意：\n\n由于类实例是以堆栈的形式放在内存中，所以最后调用 析构函数 的时候，输出顺序是按 后进先出 的原则！"]],[0,15],[2808,2808]]]],null,"sirui-php@DESKTOP-PSVFMK8"]]}