{"compress":true,"commitItems":[["f22cb7c7-8431-40ba-8c11-504e76b23761",1567064865141,"",[[1567064805706,["sirui-php@DESKTOP-PSVFMK8",[[1,0,"# 建造者模式\n\n\n\n"]],[0,0],[10,10]]],[1567067176690,["sirui-php@DESKTOP-PSVFMK8",[[1,7,"(Builder Pattern)"],[1,9,"> 建造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。"],[1,11,"建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。根据中文翻译的不同，建造者模式又可以称为生成器模式。\n\n## (一)为什么需要建造者模式\n\n1，对象的生产需要复杂的初始化，比如给一大堆类成员属性赋初值，设置一下其他的系统环境变量。使用建造者模式可以将这些初始化工作封装起来。\n2，对象的生成时可根据初始化的顺序或数据不同，而生成不同角色。\n\n## (二)建造者模式结构图\n\n![](https://box.kancloud.cn/3d3df8a65c0db7796c7b5daa5b3ffd6c_820x532.png)\n\n## (三)模式应用\n\n在很多游戏软件中，地图包括天空、地面、背景等组成部分，人物角色包括人体、服装、装备等组成部分，可以使用建造者模式对其进行设计，通过不同的具体建造者创建不同类型的地图或人物\n\n## (四)设计实例\n\n如果我们想创造出有一个person类，我们通过实例化时设置的属性不同，让他们两人一个是速度快的小孩，一个是知识深的长者\n\n```\nclass person {\n    public $age;\n    public $speed;\n    public $knowledge;\n}\n//抽象建造者类\nabstract class Builder{\n    public $_person;\n    public abstract function setAge();\n    public abstract function setSpeed();\n    public abstract function setKnowledge();\n    public function __construct(Person $person){\n        $this->_person=$person;\n    }\n    public function getPerson(){\n        return $this->_person;\n    }\n}\n//长者建造者\nclass OlderBuider extends Builder{\n    public function setAge(){\n        $this->_person->age=70;\n    }\n    public function setSpeed(){\n        $this->_person->speed=\"low\";\n    }\n    public function setKnowledge(){\n        $this->_person->knowledge='more';\n    }\n}\n//小孩建造者\nclass ChildBuider extends Builder{\n    public function setAge(){\n        $this->_person->age=10;\n    }\n    public function setSpeed(){\n        $this->_person->speed=\"fast\";\n    }\n    public function setKnowledge(){\n        $this->_person->knowledge='litte';\n    }\n}\n//建造指挥者\nclass Director{\n    private $_builder;\n    public function __construct(Builder $builder){\n        $this->_builder = $builder;\n    }\n    public function built(){\n        $this->_builder->setAge();\n        $this->_builder->setSpeed();\n        $this->_builder->setKnowledge();\n    }\n}\n//实例化一个长者建造者\n$oldB = new OlderBuider(new Person);\n//实例化一个建造指挥者\n$director = new Director($oldB);\n//指挥建造\n$director->built();\n//得到长者\n$older = $oldB->getPerson();\n\nvar_dump($older);\n\n```\n\n## (五)总结\n\n使用建造者模式时，我们把创建一个person实例的过程分为了两步.\n\n一步是先交给对应角色的建造者，如长者建造者。这样的好处就把角色的属性设置封装了起来，我们不用在new一个person时，因为要得到一个older角色的实例，而在外面写了一堆$older->age=70。\n\n另一步是交给了一个建造指挥者，调了一个built方法，通过先设置age，再设置Speed的顺序，初始化这个角色。当然在这个例子中，初始化的顺序，是无所谓的。但是如果对于一个建造汉堡，或是地图，初始化的顺序不同，可能就会得到不同的结果。\n\n也许，你会说，我直接设置也很方便呀。是的，对于某些情况是这样的。但是如果你考虑，我现在想增加一个青年人角色呢？如果我现在想让建造有初始化有三种不同的顺序呢？\n\n如果你使用了建造者模式，这两个问题就简单了，增加一个青年人角色，那就增加一个青年年建造者类。初始化三种不同的顺序，那么就在指挥建造者中增加两种建造方法。"]],[0,11],[2441,2441]]]],null,"sirui-php@DESKTOP-PSVFMK8"]]}