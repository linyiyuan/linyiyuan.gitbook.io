{"compress":true,"commitItems":[["4e56fa4d-3758-4a87-be10-960b598c166e",1565434173733,"",[[1565434117945,["sirui-php@DESKTOP-PSVFMK8",[[1,0,"# PSR-2\n\n\n\n"]],[0,0],[10,10]]],[1565434169345,["sirui-php@DESKTOP-PSVFMK8",[[1,9,"# 代码风格规范"],[1,11,"本篇规范是 PSR-1 基本代码规范的继承与扩展。\n\n本规范希望通过制定一系列规范化PHP代码的规则，以减少在浏览不同作者的代码时，因代码风格的不同而造成不便。\n\n当多名程序员在多个项目中合作时，就需要一个共同的编码规范， 而本文中的风格规范源自于多个不同项目代码风格的共同特性， 因此，本规范的价值在于我们都遵循这个编码风格，而不是在于它本身。\n\n关键词 “必须”(“MUST”)、“一定不可/一定不能”(“MUST NOT”)、“需要”(“REQUIRED”)、 “将会”(“SHALL”)、“不会”(“SHALL NOT”)、“应该”(“SHOULD”)、“不该”(“SHOULD NOT”)、 “推荐”(“RECOMMENDED”)、“可以”(“MAY”)和”可选“(“OPTIONAL”)的详细描述可参见 RFC 2119 。\n\n## 1\\. 概览\n\n```\n代码必须遵循 PSR-1 中的编码规范 。\n\n代码必须使用4个空格符而不是 tab键 进行缩进。\n\n每行的字符数应该软性保持在80个之内， 理论上一定不可多于120个， 但一定不能有硬性限制。\n\n每个 namespace 命名空间声明语句和 use 声明语句块后面，必须插入一个空白行。\n\n类的开始花括号({)必须写在函数声明后自成一行，结束花括号(})也必须写在函数主体后自成一行。\n\n方法的开始花括号({)必须写在函数声明后自成一行，结束花括号(})也必须写在函数主体后自成一行。\n\n类的属性和方法必须添加访问修饰符（private、protected 以及 public）， abstract 以及 final必须声明在访问修饰符之前，而 static必须声明在访问修饰符之后。\n\n控制结构的关键字后必须要有一个空格符，而调用方法或函数时则一定不能有。\n\n控制结构的开始花括号({)必须写在声明的同一行，而结束花括号(})必须写在主体后自成一行。\n\n控制结构的开始左括号后和结束右括号前，都一定不能有空格符。\n\n```\n\n### 1.1\\. 例子\n\n以下例子程序简单地展示了以上大部分规范：\n\n$b) { $foo->bar($arg1); } else { BazClass::bar($arg2, $arg3); } } final public static functionbar() { // method body } } ## 2\\. 通则 ### 2.1 基本编码准则 代码必须符合 PSR-1 中的所有规范。 ### 2.2 文件 所有PHP文件必须使用Unix LF (linefeed)作为行的结束符。 所有PHP文件必须以一个空白行作为结束。 纯PHP代码文件必须省略最后的 ?> 结束标签。\n\n### 2.3\\. 行\n\n行的长度一定不能有硬性的约束。\n\n软性的长度约束一定要限制在120个字符以内，若超过此长度，带代码规范检查的编辑器一定要发出警告，不过一定不可发出错误提示。\n\n每行不应该多于80个字符，大于80字符的行应该折成多行。\n\n非空行后一定不能有多余的空格符。\n\n空行可以使得阅读代码更加方便以及有助于代码的分块。\n\n每行一定不能存在多于一条语句。\n\n### 2.4\\. 缩进\n\n代码必须使用4个空格符的缩进，一定不能用 tab键 。\n\n```\n备注: 使用空格而不是tab键缩进的好处在于， 避免在比较代码差异、打补丁、重阅代码以及注释时产生混淆。 并且，使用空格缩进，让对齐变得更方便。\n\n```\n\n### 2.5\\. 关键字 以及 True/False/Null\n\nPHP所有 关键字必须全部小写。\n\n常量 true 、false 和 null 也必须全部小写。\n\n## 3\\. namespace 以及 use 声明\n\nnamespace 声明后 必须 插入一个空白行。\n\n所有 use 必须 在 namespace 后声明。\n\n每条 use 声明语句 必须 只有一个 use 关键词。\n\nuse 声明语句块后 必须 要有一个空白行。\n\n例如：\n\n```\n<?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\n// ... additional PHP code ...\n\n```\n\n## 4\\. 类、属性和方法\n\n此处的“类”泛指所有的class类、接口以及traits可复用代码块。\n\n### 4.1\\. 扩展与继承\n\n关键词 extends 和 implements必须写在类名称的同一行。\n\n类的开始花括号必须独占一行，结束花括号也必须在类主体后独占一行。\n\n```\n<?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass ClassName extends ParentClass implements \\ArrayAccess, \\Countable\n{\n    // constants, properties, methods\n}\n\n```\n\nimplements 的继承列表也可以分成多行，这样的话，每个继承接口名称都必须分开独立成行，包括第一个。\n\n```\n<?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass ClassName extends ParentClass implements\n\\ArrayAccess, \n\\Countable, \n\\Serializable\n{\n    // constants, properties, methods\n}\n\n```\n\n### 4.2\\. 属性\n\n每个属性都必须添加访问修饰符。\n\n一定不可使用关键字 var 声明一个属性。\n\n每条语句一定不可定义超过一个属性。\n\n不要使用下划线作为前缀，来区分属性是 protected 或 private。\n\n以下是属性声明的一个范例：\n\n```\n<?php\nnamespace Vendor\\Package;\n\nclassClassName\n{\n    public $foo = null;\n}\n\n```\n\n### 4.3\\. 方法\n\n所有方法都必须添加访问修饰符。\n\n不要使用下划线作为前缀，来区分方法是 protected 或 private。\n\n方法名称后一定不能有空格符，其开始花括号必须独占一行，结束花括号也必须在方法主体后单独成一行。参数左括号后和右括号前一定不能有空格。\n\n一个标准的方法声明可参照以下范例，留意其括号、逗号、空格以及花括号的位置。\n\n```\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function fooBarBaz($arg1, &$arg2, $arg3 = [])\n    {\n        // method body\n    }\n}\n\n```\n\n### 4.4\\. 方法的参数\n\n参数列表中，每个参数后面必须要有一个空格，而前面一定不能有空格。\n\n有默认值的参数，必须放到参数列表的末尾。\n\n```\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public functionfoo($arg1, &$arg2, $arg3 = [])\n    {\n        // method body\n    }\n}\n\n```\n\n参数列表可以分列成多行，这样，包括第一个参数在内的每个参数都必须单独成行。\n\n拆分成多行的参数列表后，结束括号以及方法开始花括号 必须 写在同一行，中间用一个空格分隔。\n\n```\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function aVeryLongMethodName( ClassTypeHint $arg1, &$arg2, array $arg3 = [] )\n    {\n        // method body\n    }\n}\n\n```\n\n### 4.5\\. abstract 、 final 、 以及 static\n\n需要添加 abstract 或 final 声明时， 必须写在访问修饰符前，而 static 则必须写在其后。\n\n```\n<?php\nnamespace Vendor\\Package;\n\nabstract class ClassName\n{\n    protected static $foo;\n\n    abstract protected functionzim();\n\n    final public static functionbar()\n    {\n        // method body\n    }\n}\n\n```\n\n### 4.6\\. 方法及函数调用\n\n方法及函数调用时，方法名或函数名与参数左括号之间一定不能有空格，参数右括号前也 一定不能有空格。每个参数前一定不能有空格，但其后必须有一个空格。\n\n```\n<?php\nbar();\n$foo->bar($arg1);\nFoo::bar($arg2, $arg3);\n\n```\n\n参数可以分列成多行，此时包括第一个参数在内的每个参数都必须单独成行。\n\n```\n<?php\n$foo->bar(\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n);\n\n```\n\n## 5\\. 控制结构\n\n控制结构的基本规范如下：\n\n```\n控制结构关键词后必须有一个空格。\n左括号 ( 后一定不能有空格。\n右括号 ) 前也一定不能有空格。\n右括号 ) 与开始花括号 { 间一定有一个空格。\n结构体主体一定要有一次缩进。\n结束花括号 }一定在结构体主体后单独成行。\n\n```\n\n每个结构体的主体都必须被包含在成对的花括号之中， 这能让结构体更加结构话，以及减少加入新行时，出错的可能性。\n\n### 5.1\\. if 、 elseif 和 else\n\n标准的 if 结构如下代码所示，留意 括号、空格以及花括号的位置， 注意 else 和 elseif 都与前面的结束花括号在同一行。\n\n```\n<?php\nif ($expr1) {\n    // if body\n} elseif ($expr2) {\n    // elseif body\n} else {\n    // else body;\n}\n\n```\n\n应该使用关键词 elseif 代替所有 else if ，以使得所有的控制关键字都像是单独的一个词。\n\n### 5.2\\. switch 和 case\n\n标准的 switch 结构如下代码所示，留意括号、空格以及花括号的位置。 case 语句必须相对 switch 进行一次缩进，而 break 语句以及 case 内的其它语句都 必须 相对 case 进行一次缩进。 如果存在非空的 case 直穿语句，主体里必须有类似 // no break 的注释。\n\n```\n<?php\nswitch ($expr) {\n    case 0:\n        echo 'First case, with a break';\n        break;\n    case 1:\n        echo 'Second case, which falls through';\n        // no break\n    case 2:\n    case 3:\n    case 4:\n        echo 'Third case, return instead of break';\n        return;\n    default:\n        echo 'Default case';\n        break;\n}\n\n```\n\n### 5.3\\. while 和 do while\n\n一个规范的 while 语句应该如下所示，注意其 括号、空格以及花括号的位置。\n\n```\n<?php\nwhile ($expr) {\n    // structure body\n}\n\n```\n\n标准的 do while 语句如下所示，同样的，注意其 括号、空格以及花括号的位置。\n\n```\n<?php\ndo {\n    // structure body;\n} while ($expr);\n\n```\n\n### 5.4\\. for\n\n标准的 for 语句如下所示，注意其 括号、空格以及花括号的位置。\n\n```\n<?php\nfor ($i = 0; $i < 10; $i++) {\n    // for body\n}\n\n```\n\n### 5.5\\. foreach\n\n标准的 foreach 语句如下所示，注意其 括号、空格以及花括号的位置。\n\n```\n<?php\nforeach ($iterable as $key => $value) {\n    // foreach body\n}\n\n```\n\n### 5.6\\. try, catch\n\n标准的 try catch 语句如下所示，注意其 括号、空格以及花括号的位置。\n\n```\n<?php\ntry {\n    // try body\n} catch (FirstExceptionType $e) {\n    // catch body\n} catch (OtherExceptionType $e) {\n    // catch body\n}\n\n```\n\n### 6\\. 闭包\n\n闭包声明时，关键词 function 后以及关键词 use 的前后都必须要有一个空格。\n\n开始花括号必须写在声明的同一行，结束花括号必须紧跟主体结束的下一行。\n\n参数列表和变量列表的左括号后以及右括号前，必须不能有空格。\n\n参数和变量列表中，逗号前必须不能有空格，而逗号后必须要有空格。\n\n闭包中有默认值的参数必须放到列表的后面。\n\n标准的闭包声明语句如下所示，注意其 括号、逗号、空格以及花括号的位置。\n\n```\n<?php\n$closureWithArgs = function($arg1, $arg2){\n    // body\n};\n\n$closureWithArgsAndVars = function($arg1, $arg2)use($var1, $var2){\n    // body\n};\n\n```\n\n参数列表以及变量列表可以分成多行，这样，包括第一个在内的每个参数或变量都必须单独成行，而列表的右括号与闭包的开始花括号必须放在同一行。\n\n以下几个例子，包含了参数和变量列表被分成多行的多情况。\n\n```\n<?php\n$longArgs_noVars = function( $longArgument, $longerArgument, $muchLongerArgument ){\n   // body\n};\n\n$noArgs_longVars = function()use( $longVar1, $longerVar2, $muchLongerVar3 ){\n   // body\n};\n\n$longArgs_longVars = function( $longArgument, $longerArgument, $muchLongerArgument )use( $longVar1, $longerVar2, $muchLongerVar3 ){\n   // body\n};\n\n$longArgs_shortVars = function( $longArgument, $longerArgument, $muchLongerArgument )use($var1){\n   // body\n};\n\n$shortArgs_longVars = function($arg)use( $longVar1, $longerVar2, $muchLongerVar3 ){\n   // body\n};\n\n注意，闭包被直接用作函数或方法调用的参数时，以上规则仍然适用。\n\n<?php\n$foo->bar(\n    $arg1,\n    function($arg2)use($var1){\n        // body\n    },\n    $arg3\n);\n```"]],[0,11],[7010,7010]]]],null,"sirui-php@DESKTOP-PSVFMK8"],["8c83fce7-87d2-4ae2-a0ac-fbabcecab709",1565593059230,"# PSR-2\n\n# 代码风格规范\n\n本篇规范是 PSR-1 基本代码规范的继承与扩展。\n\n本规范希望通过制定一系列规范化PHP代码的规则，以减少在浏览不同作者的代码时，因代码风格的不同而造成不便。\n\n当多名程序员在多个项目中合作时，就需要一个共同的编码规范， 而本文中的风格规范源自于多个不同项目代码风格的共同特性， 因此，本规范的价值在于我们都遵循这个编码风格，而不是在于它本身。\n\n关键词 “必须”(“MUST”)、“一定不可/一定不能”(“MUST NOT”)、“需要”(“REQUIRED”)、 “将会”(“SHALL”)、“不会”(“SHALL NOT”)、“应该”(“SHOULD”)、“不该”(“SHOULD NOT”)、 “推荐”(“RECOMMENDED”)、“可以”(“MAY”)和”可选“(“OPTIONAL”)的详细描述可参见 RFC 2119 。\n\n## 1\\. 概览\n\n```\n代码必须遵循 PSR-1 中的编码规范 。\n\n代码必须使用4个空格符而不是 tab键 进行缩进。\n\n每行的字符数应该软性保持在80个之内， 理论上一定不可多于120个， 但一定不能有硬性限制。\n\n每个 namespace 命名空间声明语句和 use 声明语句块后面，必须插入一个空白行。\n\n类的开始花括号({)必须写在函数声明后自成一行，结束花括号(})也必须写在函数主体后自成一行。\n\n方法的开始花括号({)必须写在函数声明后自成一行，结束花括号(})也必须写在函数主体后自成一行。\n\n类的属性和方法必须添加访问修饰符（private、protected 以及 public）， abstract 以及 final必须声明在访问修饰符之前，而 static必须声明在访问修饰符之后。\n\n控制结构的关键字后必须要有一个空格符，而调用方法或函数时则一定不能有。\n\n控制结构的开始花括号({)必须写在声明的同一行，而结束花括号(})必须写在主体后自成一行。\n\n控制结构的开始左括号后和结束右括号前，都一定不能有空格符。\n\n```\n\n### 1.1\\. 例子\n\n以下例子程序简单地展示了以上大部分规范：\n\n$b) { $foo->bar($arg1); } else { BazClass::bar($arg2, $arg3); } } final public static functionbar() { // method body } } ## 2\\. 通则 ### 2.1 基本编码准则 代码必须符合 PSR-1 中的所有规范。 ### 2.2 文件 所有PHP文件必须使用Unix LF (linefeed)作为行的结束符。 所有PHP文件必须以一个空白行作为结束。 纯PHP代码文件必须省略最后的 ?> 结束标签。\n\n### 2.3\\. 行\n\n行的长度一定不能有硬性的约束。\n\n软性的长度约束一定要限制在120个字符以内，若超过此长度，带代码规范检查的编辑器一定要发出警告，不过一定不可发出错误提示。\n\n每行不应该多于80个字符，大于80字符的行应该折成多行。\n\n非空行后一定不能有多余的空格符。\n\n空行可以使得阅读代码更加方便以及有助于代码的分块。\n\n每行一定不能存在多于一条语句。\n\n### 2.4\\. 缩进\n\n代码必须使用4个空格符的缩进，一定不能用 tab键 。\n\n```\n备注: 使用空格而不是tab键缩进的好处在于， 避免在比较代码差异、打补丁、重阅代码以及注释时产生混淆。 并且，使用空格缩进，让对齐变得更方便。\n\n```\n\n### 2.5\\. 关键字 以及 True/False/Null\n\nPHP所有 关键字必须全部小写。\n\n常量 true 、false 和 null 也必须全部小写。\n\n## 3\\. namespace 以及 use 声明\n\nnamespace 声明后 必须 插入一个空白行。\n\n所有 use 必须 在 namespace 后声明。\n\n每条 use 声明语句 必须 只有一个 use 关键词。\n\nuse 声明语句块后 必须 要有一个空白行。\n\n例如：\n\n```\n<?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\n// ... additional PHP code ...\n\n```\n\n## 4\\. 类、属性和方法\n\n此处的“类”泛指所有的class类、接口以及traits可复用代码块。\n\n### 4.1\\. 扩展与继承\n\n关键词 extends 和 implements必须写在类名称的同一行。\n\n类的开始花括号必须独占一行，结束花括号也必须在类主体后独占一行。\n\n```\n<?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass ClassName extends ParentClass implements \\ArrayAccess, \\Countable\n{\n    // constants, properties, methods\n}\n\n```\n\nimplements 的继承列表也可以分成多行，这样的话，每个继承接口名称都必须分开独立成行，包括第一个。\n\n```\n<?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass ClassName extends ParentClass implements\n\\ArrayAccess, \n\\Countable, \n\\Serializable\n{\n    // constants, properties, methods\n}\n\n```\n\n### 4.2\\. 属性\n\n每个属性都必须添加访问修饰符。\n\n一定不可使用关键字 var 声明一个属性。\n\n每条语句一定不可定义超过一个属性。\n\n不要使用下划线作为前缀，来区分属性是 protected 或 private。\n\n以下是属性声明的一个范例：\n\n```\n<?php\nnamespace Vendor\\Package;\n\nclassClassName\n{\n    public $foo = null;\n}\n\n```\n\n### 4.3\\. 方法\n\n所有方法都必须添加访问修饰符。\n\n不要使用下划线作为前缀，来区分方法是 protected 或 private。\n\n方法名称后一定不能有空格符，其开始花括号必须独占一行，结束花括号也必须在方法主体后单独成一行。参数左括号后和右括号前一定不能有空格。\n\n一个标准的方法声明可参照以下范例，留意其括号、逗号、空格以及花括号的位置。\n\n```\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function fooBarBaz($arg1, &$arg2, $arg3 = [])\n    {\n        // method body\n    }\n}\n\n```\n\n### 4.4\\. 方法的参数\n\n参数列表中，每个参数后面必须要有一个空格，而前面一定不能有空格。\n\n有默认值的参数，必须放到参数列表的末尾。\n\n```\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public functionfoo($arg1, &$arg2, $arg3 = [])\n    {\n        // method body\n    }\n}\n\n```\n\n参数列表可以分列成多行，这样，包括第一个参数在内的每个参数都必须单独成行。\n\n拆分成多行的参数列表后，结束括号以及方法开始花括号 必须 写在同一行，中间用一个空格分隔。\n\n```\n<?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function aVeryLongMethodName( ClassTypeHint $arg1, &$arg2, array $arg3 = [] )\n    {\n        // method body\n    }\n}\n\n```\n\n### 4.5\\. abstract 、 final 、 以及 static\n\n需要添加 abstract 或 final 声明时， 必须写在访问修饰符前，而 static 则必须写在其后。\n\n```\n<?php\nnamespace Vendor\\Package;\n\nabstract class ClassName\n{\n    protected static $foo;\n\n    abstract protected functionzim();\n\n    final public static functionbar()\n    {\n        // method body\n    }\n}\n\n```\n\n### 4.6\\. 方法及函数调用\n\n方法及函数调用时，方法名或函数名与参数左括号之间一定不能有空格，参数右括号前也 一定不能有空格。每个参数前一定不能有空格，但其后必须有一个空格。\n\n```\n<?php\nbar();\n$foo->bar($arg1);\nFoo::bar($arg2, $arg3);\n\n```\n\n参数可以分列成多行，此时包括第一个参数在内的每个参数都必须单独成行。\n\n```\n<?php\n$foo->bar(\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n);\n\n```\n\n## 5\\. 控制结构\n\n控制结构的基本规范如下：\n\n```\n控制结构关键词后必须有一个空格。\n左括号 ( 后一定不能有空格。\n右括号 ) 前也一定不能有空格。\n右括号 ) 与开始花括号 { 间一定有一个空格。\n结构体主体一定要有一次缩进。\n结束花括号 }一定在结构体主体后单独成行。\n\n```\n\n每个结构体的主体都必须被包含在成对的花括号之中， 这能让结构体更加结构话，以及减少加入新行时，出错的可能性。\n\n### 5.1\\. if 、 elseif 和 else\n\n标准的 if 结构如下代码所示，留意 括号、空格以及花括号的位置， 注意 else 和 elseif 都与前面的结束花括号在同一行。\n\n```\n<?php\nif ($expr1) {\n    // if body\n} elseif ($expr2) {\n    // elseif body\n} else {\n    // else body;\n}\n\n```\n\n应该使用关键词 elseif 代替所有 else if ，以使得所有的控制关键字都像是单独的一个词。\n\n### 5.2\\. switch 和 case\n\n标准的 switch 结构如下代码所示，留意括号、空格以及花括号的位置。 case 语句必须相对 switch 进行一次缩进，而 break 语句以及 case 内的其它语句都 必须 相对 case 进行一次缩进。 如果存在非空的 case 直穿语句，主体里必须有类似 // no break 的注释。\n\n```\n<?php\nswitch ($expr) {\n    case 0:\n        echo 'First case, with a break';\n        break;\n    case 1:\n        echo 'Second case, which falls through';\n        // no break\n    case 2:\n    case 3:\n    case 4:\n        echo 'Third case, return instead of break';\n        return;\n    default:\n        echo 'Default case';\n        break;\n}\n\n```\n\n### 5.3\\. while 和 do while\n\n一个规范的 while 语句应该如下所示，注意其 括号、空格以及花括号的位置。\n\n```\n<?php\nwhile ($expr) {\n    // structure body\n}\n\n```\n\n标准的 do while 语句如下所示，同样的，注意其 括号、空格以及花括号的位置。\n\n```\n<?php\ndo {\n    // structure body;\n} while ($expr);\n\n```\n\n### 5.4\\. for\n\n标准的 for 语句如下所示，注意其 括号、空格以及花括号的位置。\n\n```\n<?php\nfor ($i = 0; $i < 10; $i++) {\n    // for body\n}\n\n```\n\n### 5.5\\. foreach\n\n标准的 foreach 语句如下所示，注意其 括号、空格以及花括号的位置。\n\n```\n<?php\nforeach ($iterable as $key => $value) {\n    // foreach body\n}\n\n```\n\n### 5.6\\. try, catch\n\n标准的 try catch 语句如下所示，注意其 括号、空格以及花括号的位置。\n\n```\n<?php\ntry {\n    // try body\n} catch (FirstExceptionType $e) {\n    // catch body\n} catch (OtherExceptionType $e) {\n    // catch body\n}\n\n```\n\n### 6\\. 闭包\n\n闭包声明时，关键词 function 后以及关键词 use 的前后都必须要有一个空格。\n\n开始花括号必须写在声明的同一行，结束花括号必须紧跟主体结束的下一行。\n\n参数列表和变量列表的左括号后以及右括号前，必须不能有空格。\n\n参数和变量列表中，逗号前必须不能有空格，而逗号后必须要有空格。\n\n闭包中有默认值的参数必须放到列表的后面。\n\n标准的闭包声明语句如下所示，注意其 括号、逗号、空格以及花括号的位置。\n\n```\n<?php\n$closureWithArgs = function($arg1, $arg2){\n    // body\n};\n\n$closureWithArgsAndVars = function($arg1, $arg2)use($var1, $var2){\n    // body\n};\n\n```\n\n参数列表以及变量列表可以分成多行，这样，包括第一个在内的每个参数或变量都必须单独成行，而列表的右括号与闭包的开始花括号必须放在同一行。\n\n以下几个例子，包含了参数和变量列表被分成多行的多情况。\n\n```\n<?php\n$longArgs_noVars = function( $longArgument, $longerArgument, $muchLongerArgument ){\n   // body\n};\n\n$noArgs_longVars = function()use( $longVar1, $longerVar2, $muchLongerVar3 ){\n   // body\n};\n\n$longArgs_longVars = function( $longArgument, $longerArgument, $muchLongerArgument )use( $longVar1, $longerVar2, $muchLongerVar3 ){\n   // body\n};\n\n$longArgs_shortVars = function( $longArgument, $longerArgument, $muchLongerArgument )use($var1){\n   // body\n};\n\n$shortArgs_longVars = function($arg)use( $longVar1, $longerVar2, $muchLongerVar3 ){\n   // body\n};\n\n注意，闭包被直接用作函数或方法调用的参数时，以上规则仍然适用。\n\n<?php\n$foo->bar(\n    $arg1,\n    function($arg2)use($var1){\n        // body\n    },\n    $arg3\n);\n```",[[1565593057758,["sirui-php@DESKTOP-PSVFMK8",[[-1,0,"# PSR-2\n\n# "],[1,18,"==================\n"],[1,25,"["],[1,30,"][]"],[-1,130," "],[1,131,"\n"],[-1,159," "],[1,160,"\n"],[-1,203,"“"],[1,204,"\""],[-1,208,"”"],[1,209,"\""],[-1,223,"“"],[1,224,"\""],[-1,232,"”"],[1,233,"\""],[-1,240,"“"],[1,241,"\""],[-1,249,"”)、 "],[1,253,"\")、\n"],[-1,258,"“"],[1,259,"\""],[-1,264,"”"],[1,265,"\""],[-1,272,"“"],[1,273,"\""],[-1,282,"”"],[1,283,"\""],[-1,290,"“"],[1,291,"\""],[-1,297,"”"],[1,298,"\""],[-1,305,"“"],[1,306,"\""],[-1,316,"”)、 "],[1,320,"\")、\n"],[-1,325,"“"],[1,326,"\""],[-1,337,"”"],[1,338,"\""],[-1,345,"“MAY”"],[1,350,"\"MAY\""],[-1,357,"“"],[1,358,"\""],[-1,366,"”"],[1,367,"\""],[1,377,"["],[1,385,"][]"],[-1,389,"## 1\\"],[1,394,"[RFC 2119]: http://www.ietf.org/rfc/rfc2119.txt\n[PSR-0]: https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-0-cn.md\n[PSR-1]: https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-1-basic-coding-standard-cn.md\n\n\n1"],[1,399,"-----------"],[-1,400,"```"],[1,404,"- "],[1,406,"**"],[1,408,"**"],[1,411,"["],[1,416,"][]"],[1,427,"- "],[1,429,"**"],[1,431,"**"],[1,454,"- "],[1,460,"**"],[1,462,"**"],[1,477,"**"],[1,481,"**"],[1,490,"**"],[1,494,"**"],[1,502,"- "],[1,505,"`"],[1,514,"`"],[1,525,"`"],[1,528,"`"],[1,537,"**"],[1,539,"**"],[1,549,"- "],[1,557,"`"],[1,558,"`"],[1,559,"**"],[1,561,"**"],[-1,563,"函数"],[1,565,"其"],[1,579,"`"],[1,580,"`"],[1,582,"**"],[1,584,"**"],[-1,586,"函数"],[1,588,"其"],[1,598,"- "],[1,607,"`"],[1,608,"`"],[1,609,"**"],[1,611,"**"],[1,629,"`"],[1,630,"`"],[1,632,"**"],[1,634,"**"],[1,648,"- "],[1,655,"**"],[1,657,"**"],[1,665,"`"],[1,672,"`"],[1,673,"`"],[1,682,"`"],[1,686,"`"],[1,692,"`"],[1,695,"`"],[1,703,"`"],[1,707,"`"],[1,712,"` **"],[1,714,"**"],[1,727,"`"],[1,733,"` **"],[1,735,"**"],[1,747,"  "],[1,748,"- "],[1,757,"**"],[1,759,"**"],[1,777,"**"],[1,781,"**"],[1,785,"- "],[1,796,"`"],[1,797,"`"],[1,798,"**"],[1,800,"**"],[1,816,"`"],[1,817,"`"],[1,818,"**"],[1,820,"**"],[1,832,"- "],[1,852,"**"],[1,856,"**"],[-1,863,"```\n\n"],[-1,875,"\\"],[1,904,"```php\n<?php\nnamespace Vendor\\Package;\n\nuse FooInterface;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass Foo extends Bar implements FooInterface\n{\n    public function sampleFunction($a, "],[1,906," = null"],[1,907,"\n   "],[1,909,"\n        if ($a === $b) {\n            bar();\n        } elseif ($a > $b) {\n           "],[1,927,"\n       "],[1,936,"\n           "],[1,965,"\n       "],[1,967,"\n   "],[1,969,"\n\n   "],[1,998," "],[1,1003,"\n   "],[1,1005,"\n       "],[1,1020,"\n"],[-1,1021,"}"],[-1,1023,"}"],[-1,1025,"##"],[1,1028,"}\n}\n```\n\n"],[-1,1029,"\\"],[-1,1034," "],[1,1035,"\n----------\n\n"],[-1,1049," "],[1,1050,"\n\n"],[1,1052,"**"],[1,1054,"**"],[1,1057,"["],[1,1062,"][]"],[-1,1070," "],[1,1071,"\n\n"],[-1,1081," "],[1,1082,"\n\n"],[1,1089,"**"],[1,1091,"**"],[1,1093,"`"],[1,1111,"`"],[-1,1119," "],[1,1120,"\n\n"],[1,1127,"**"],[1,1129,"**"],[-1,1140," "],[1,1141,"\n\n"],[1,1149,"**"],[1,1151,"**"],[1,1157,"`"],[1,1159,"`"],[-1,1174,"\\"],[1,1184,"**"],[1,1188,"**"],[1,1204,"**"],[1,1206,"**"],[1,1237,"**"],[1,1239,"**"],[1,1247,"**"],[1,1251,"**"],[1,1262,"**"],[1,1265,"**"],[1,1281,"**"],[1,1283,"**"],[1,1294,"**"],[1,1298,"**"],[1,1310,"**"],[1,1312,"**"],[1,1337,"**"],[1,1341,"**"],[-1,1359,"\\"],[1,1368,"**"],[1,1370,"**"],[1,1381,"**"],[1,1385,"**"],[-1,1395,"```\n"],[1,1399,"> "],[1,1422,"\n>"],[1,1451,"\n>"],[-1,1473,"```\n\n"],[-1,1485,"\\"],[1,1518,"["],[1,1521,"][]**"],[1,1523,"**"],[1,1533,"`"],[1,1537,"`"],[1,1539,"`"],[1,1544,"`"],[1,1547,"`"],[1,1551,"`"],[1,1553,"**"],[1,1555,"**"],[-1,1562,"## 3\\"],[1,1567,"[关键字]: http://php.net/manual/en/reserved.keywords.php\n\n\n\n3"],[1,1589,"---------------------------------"],[1,1590,"\n`"],[1,1599,"`"],[1,1620,"`"],[1,1623,"`"],[1,1629,"`"],[1,1638,"`"],[1,1648,"`"],[1,1651,"`"],[1,1665,"`"],[1,1668,"`"],[1,1675,"`"],[1,1678,"`"],[1,1707,"php"],[-1,1853,"## 4\\"],[1,1858,"\n4"],[1,1868,"-----------------------------------\n"],[-1,1913,"\\"],[1,1927,"`"],[1,1934,"`"],[1,1937,"`"],[1,1947,"`**"],[1,1949,"**"],[1,1968,"**"],[1,1970,"**"],[1,1981,"**"],[1,1983,"**"],[1,1998,"php"],[-1,2221,"\n"],[1,2227,"`"],[1,2237,"`"],[1,2244,"**"],[1,2246,"**"],[1,2265,"**"],[1,2267,"**"],[1,2285,"php"],[1,2441,"    "],[-1,2454," \n"],[1,2456,"\n    "],[-1,2467," \n"],[1,2469,"\n    "],[-1,2525,"\n"],[-1,2538,"\\"],[1,2550,"**"],[1,2552,"**"],[1,2562,"**"],[1,2566,"**"],[1,2572,"`"],[1,2575,"`"],[1,2589,"**"],[1,2593,"**"],[1,2604,"**"],[1,2606,"**"],[-1,2663,""],[1,2663,"php"],[-1,2702,""],[1,2702," "],[-1,2740,"\n"],[-1,2753,"\\"],[1,2765,"**"],[1,2767,"**"],[1,2777,"**"],[1,2779,"**"],[1,2823,"**"],[1,2827,"**"],[1,2838,"**"],[1,2840,"**"],[1,2851,"**"],[1,2853,"**"],[1,2876,"**"],[1,2880,"**"],[-1,2928,""],[1,2928,"php"],[-1,3074,"\n"],[1,3078,"    "],[-1,3087,"\\"],[-1,3105,"参数"],[1,3107,"逗号"],[1,3109,"**"],[1,3111,"**"],[1,3119,"逗号"],[1,3121,"**"],[1,3125,"**"],[1,3139,"**"],[1,3141,"**"],[1,3156,"php"],[1,3227," "],[-1,3295,"\n"],[1,3305,"**"],[1,3307,"**"],[1,3331,"**"],[1,3333,"**"],[-1,3390,""],[1,3390,"php"],[1,3482,"\n       "],[1,3503,"\n       "],[1,3511,"\n       "],[-1,3528," )"],[1,3534," )"],[-1,3568,"\n"],[-1,3581,"\\"],[1,3584,"`"],[1,3592,"`"],[1,3595,"`"],[1,3600,"`"],[1,3606,"`"],[1,3612,"`"],[1,3619,"`"],[1,3627,"`"],[1,3630,"`"],[1,3635,"`"],[1,3641,"**"],[1,3643,"**"],[1,3654,"`"],[1,3660,"`"],[1,3662,"**"],[1,3664,"**"],[1,3674,"php"],[1,3794," "],[1,3834," "],[-1,3877,"\n"],[-1,3890,"\\"],[1,3926,"**"],[1,3930,"**"],[1,3942,"**"],[1,3946,"**"],[-1,3952,"参数前"],[1,3955,"逗号前**"],[1,3959,"**"],[1,3966,"**"],[1,3968,"**"],[1,3979,"php"],[-1,4035,"\n"],[1,4043,"**"],[1,4045,"**"],[1,4068,"**"],[1,4070,"**"],[1,4080,"php"],[-1,4165,"\n"],[-1,4171,"## "],[-1,4175,"\\"],[1,4183,"---------------------\n"],[-1,4198,"```\n"],[1,4202,"- "],[1,4210,"**"],[1,4212,"**"],[1,4219,"- "],[1,4223,"`"],[1,4224,"`"],[1,4226,"**"],[1,4230,"**"],[1,4235,"- "],[1,4239,"`"],[1,4240,"`"],[1,4243,"**"],[1,4246,"**"],[1,4252,"- "],[1,4256,"`"],[1,4257,"`"],[1,4265,"`"],[1,4266,"`"],[1,4268,"**"],[1,4270,"**"],[1,4277,"- "],[1,4282,"**"],[1,4284,"**"],[1,4292,"- "],[1,4298,"`"],[1,4299,"` **"],[1,4301,"**"],[-1,4315,"```\n\n"],[1,4329,"**"],[1,4331,"**"],[-1,4344," "],[1,4345,"\n"],[1,4376,"\n"],[-1,4383,"\\"],[1,4386,"`"],[1,4388,"`"],[1,4391,"`"],[1,4397,"`"],[1,4400,"`"],[1,4404,"`"],[1,4410,"`"],[1,4412,"`"],[-1,4439," "],[1,4440,"\n"],[1,4443,"`"],[1,4447,"`"],[1,4450,"`"],[1,4456,"`"],[1,4477,"php"],[-1,4581,"\n"],[1,4587,"**"],[1,4589,"**"],[1,4595,"`"],[1,4601,"`"],[1,4607,"`"],[1,4614,"`"],[1,4637," \n"],[-1,4646,"\\"],[1,4649,"`"],[1,4655,"`"],[1,4658,"`"],[1,4662,"`"],[1,4668,"`"],[1,4674,"`"],[-1,4700," "],[1,4701,"\n`"],[1,4705,"`"],[1,4708,"**"],[1,4710,"**"],[1,4713,"`"],[1,4719,"`"],[1,4729,"`"],[1,4734,"`"],[1,4740,"`"],[1,4744,"`"],[1,4759,"`"],[1,4763,"`"],[-1,4771," "],[1,4772,"\n"],[1,4780,"`"],[1,4784,"`"],[1,4799,"`"],[1,4810,"`"],[1,4820,"php"],[-1,5156,"\n"],[1,5162,"\n"],[-1,5169,"\\"],[1,5172,"`"],[1,5177,"`"],[1,5180,"`"],[1,5188,"`"],[1,5196,"`"],[1,5201,"`"],[1,5234,"php"],[-1,5281,"\n"],[1,5291,"`"],[1,5299,"`"],[1,5334,"php"],[-1,5386,"\n"],[-1,5399,"\\"],[1,5402,"`"],[1,5405,"`"],[1,5411,"`"],[1,5414,"`"],[1,5445,"php"],[-1,5500,"\n"],[-1,5513,"\\"],[1,5516,"`"],[1,5523,"`"],[1,5524,"    "],[1,5529,"`"],[1,5536,"`"],[1,5567,"php"],[-1,5636,"\n"],[-1,5649,"\\"],[1,5652,"`"],[1,5655,"`"],[1,5657,"`"],[1,5662,"`"],[1,5668,"`"],[1,5677,"`"],[1,5708,"php"],[-1,5843,"\n"],[-1,5849,"### "],[-1,5854,"\\"],[1,5860,"-----------\n"],[1,5871,"`"],[1,5879,"`"],[1,5887,"`"],[1,5890,"`"],[1,5895,"**"],[1,5897,"**"],[1,5911,"**"],[1,5913,"**"],[1,5927,"**"],[1,5929,"**"],[1,5940,"\n"],[1,5963,"**"],[1,5967,"**"],[1,5985,"**"],[1,5989,"**"],[1,5997,"**"],[1,5999,"**"],[1,6016,"**"],[1,6018,"**"],[1,6026,"\n"],[1,6068,"php"],[1,6102," "],[1,6116," "],[1,6168," "],[1,6182," "],[1,6185," "],[1,6199," "],[-1,6216,"\n"],[1,6232,"**"],[1,6234,"**"],[1,6258,"**"],[1,6260,"**"],[1,6281,"**"],[1,6283,"**"],[1,6323,"php"],[1,6357," "],[1,6358,"\n   "],[1,6373,"\n   "],[1,6390,"\n   "],[1,6410,"\n)"],[-1,6411,")"],[1,6456," "],[1,6458," "],[1,6461," "],[1,6462,"\n   "],[1,6473,"\n   "],[1,6486,"\n   "],[1,6502,"\n)"],[-1,6503,")"],[1,6550," "],[1,6551,"\n   "],[1,6566,"\n   "],[1,6583,"\n   "],[1,6603,"\n)"],[-1,6604,")"],[1,6608," "],[1,6609,"\n   "],[1,6620,"\n   "],[1,6633,"\n   "],[1,6649,"\n)"],[-1,6650,")"],[1,6698," "],[1,6699,"\n   "],[1,6714,"\n   "],[1,6731,"\n   "],[1,6751,"\n)"],[-1,6752,")"],[1,6756," "],[1,6763," "],[1,6810," "],[1,6816," "],[1,6819," "],[1,6820,"\n   "],[1,6831,"\n   "],[1,6844,"\n   "],[1,6860,"\n)"],[-1,6861,")"],[1,6877,"\n```"],[1,6912,"```php\n"],[1,6952," "],[1,6959," "],[1,6962," "],[1,6969," "],[-1,7010,""],[1,7010,"\n\n\n7. 总结\n--------------\n以上规范难免有疏忽，其中包括但不仅限于：\n\n- 全局变量和常量的定义\n\n- 函数的定义\n\n- 操作符和赋值\n\n- 行内对齐\n\n- 注释和文档描述块\n\n- 类名的前缀及后缀\n\n- 最佳实践\n\n本规范之后的修订与扩展将弥补以上不足。\n\n\n附录 A. 问卷调查\n------------------\n\n为了编写本规范，小组制定了调查问卷，用来统计各成员项目的共同规范。\n以下是此问卷调查的数据，在此供查阅。\n\n### A.1. 问卷数据\n\n    url,http://www.horde.org/apps/horde/docs/CODING_STANDARDS,http://pear.php.net/manual/en/standards.php,http://solarphp.com/manual/appendix-standards.style,http://framework.zend.com/manual/en/coding-standard.html,http://symfony.com/doc/2.0/contributing/code/standards.html,http://www.ppi.io/docs/coding-standards.html,https://github.com/ezsystems/ezp-next/wiki/codingstandards,http://book.cakephp.org/2.0/en/contributing/cakephp-coding-conventions.html,https://github.com/UnionOfRAD/lithium/wiki/Spec%3A-Coding,http://drupal.org/coding-standards,http://code.google.com/p/sabredav/,http://area51.phpbb.com/docs/31x/coding-guidelines.html,https://docs.google.com/a/zikula.org/document/edit?authkey=CPCU0Us&hgd=1&id=1fcqb93Sn-hR9c0mkN6m_tyWnmEvoswKBtSc0tKkZmJA,http://www.chisimba.com,n/a,https://github.com/Respect/project-info/blob/master/coding-standards-sample.php,n/a,Object Calisthenics for PHP,http://doc.nette.org/en/coding-standard,http://flow3.typo3.org,https://github.com/propelorm/Propel2/wiki/Coding-Standards,http://developer.joomla.org/coding-standards.html\n    voting,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,no,no,no,?,yes,no,yes\n    indent_type,4,4,4,4,4,tab,4,tab,tab,2,4,tab,4,4,4,4,4,4,tab,tab,4,tab\n    line_length_limit_soft,75,75,75,75,no,85,120,120,80,80,80,no,100,80,80,?,?,120,80,120,no,150\n    line_length_limit_hard,85,85,85,85,no,no,no,no,100,?,no,no,no,100,100,?,120,120,no,no,no,no\n    class_names,studly,studly,studly,studly,studly,studly,studly,studly,studly,studly,studly,lower_under,studly,lower,studly,studly,studly,studly,?,studly,studly,studly\n    class_brace_line,next,next,next,next,next,same,next,same,same,same,same,next,next,next,next,next,next,next,next,same,next,next\n    constant_names,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper\n    true_false_null,lower,lower,lower,lower,lower,lower,lower,lower,lower,upper,lower,lower,lower,upper,lower,lower,lower,lower,lower,upper,lower,lower\n    method_names,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel,lower_under,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel\n    method_brace_line,next,next,next,next,next,same,next,same,same,same,same,next,next,same,next,next,next,next,next,same,next,next\n    control_brace_line,same,same,same,same,same,same,next,same,same,same,same,next,same,same,next,same,same,same,same,same,same,next\n    control_space_after,yes,yes,yes,yes,yes,no,yes,yes,yes,yes,no,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes\n    always_use_control_braces,yes,yes,yes,yes,yes,yes,no,yes,yes,yes,no,yes,yes,yes,yes,no,yes,yes,yes,yes,yes,yes\n    else_elseif_line,same,same,same,same,same,same,next,same,same,next,same,next,same,next,next,same,same,same,same,same,same,next\n    case_break_indent_from_switch,0/1,0/1,0/1,1/2,1/2,1/2,1/2,1/1,1/1,1/2,1/2,1/1,1/2,1/2,1/2,1/2,1/2,1/2,0/1,1/1,1/2,1/2\n    function_space_after,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no\n    closing_php_tag_required,no,no,no,no,no,no,no,no,yes,no,no,no,no,yes,no,no,no,no,no,yes,no,no\n    line_endings,LF,LF,LF,LF,LF,LF,LF,LF,?,LF,?,LF,LF,LF,LF,?,,LF,?,LF,LF,LF\n    static_or_visibility_first,static,?,static,either,either,either,visibility,visibility,visibility,either,static,either,?,visibility,?,?,either,either,visibility,visibility,static,?\n    control_space_parens,no,no,no,no,no,no,yes,no,no,no,no,no,no,yes,?,no,no,no,no,no,no,no\n    blank_line_after_php,no,no,no,no,yes,no,no,no,no,yes,yes,no,no,yes,?,yes,yes,no,yes,no,yes,no\n    class_method_control_brace,next/next/same,next/next/same,next/next/same,next/next/same,next/next/same,same/same/same,next/next/next,same/same/same,same/same/same,same/same/same,same/same/same,next/next/next,next/next/same,next/same/same,next/next/next,next/next/same,next/next/same,next/next/same,next/next/same,same/same/same,next/next/same,next/next/next\n\n### A.2. 问卷说明\n\n`indent_type`:\n缩进类型. `tab` = \"使用 tab 键一次\", `2` or `4` = \"空格的数量\"\n\n`line_length_limit_soft`:\n每行字符数量的“软”限制. `?` = 不可辩或无作答, `no` 表示无限制.\n\n`line_length_limit_hard`:\n每行字符数量的“硬”限制. `?` = 不可辩或无作答, `no` 表示无限制.\n\n`class_names`:\n类名称的命名. `lower` = 只允许小写字母, `lower_under` = 下滑线分隔的小写字母, `studly` = StudlyCase 的驼峰风格.\n\n`class_brace_line`:\n类的开始花括号是与 class 关键字在同一行或是在其的下一行？\n\n`constant_names`:\n类的常量如何命名? `upper` = 下划线分隔的大写字母.\n\n`true_false_null`:\n关键字 `true`、`false` 以及 `null` 是全部小写 `lower` 还是全部大写 `upper`?\n\n`method_names`:\n方法名称如何命名? `camel` = `camelCase`, `lower_under` = 下划线分隔的小写字母.\n\n`method_brace_line`:\n方法的开始花括号是与方法名在同一行还是在其的下一行？\n\n`control_brace_line`:\n控制结构的开始花括号是与声明在同一行还是在其的下一行？\n\n`control_space_after`:\n控制结构关键词后是否有空格？\n\n`always_use_control_braces`:\n控制结构体是否都要被包含在花括号内？\n\n`else_elseif_line`:\n`else` 或 `elseif` 与前面的结束花括号在同一行还是在其的下一行？\n\n`case_break_indent_from_switch`:\n`switch` 语句中的 `case` 和 `break` 需要相对 `switch` 缩进多少次？\n\n`function_space_after`:\n函数调用语句中，函数名称与变量列表的左括号间是否有空格？\n\n`closing_php_tag_required`:\n纯 PHP 代码的文件，是否需要 `?>` 结束标签？\n\n`line_endings`:\n选择哪种类型的行结束符？\n\n`static_or_visibility_first`:\n声明一个静态方法时，`static` 是写访问修饰符前还是后？\n\n`control_space_parens`:\n控制结构里，左括号后以及右括号前是否有空格？`yes` = `if ( $expr )`, `no` = `if ($expr)`.\n\n`blank_line_after_php`:\nPHP 开始标签后，是否需要一个空行？\n\n`class_method_control_brace`:\n开始花括号在类、方法和控制结构的位置统计。\n\n### A.3. 问卷统计结果\n\n    indent_type:\n        tab: 7\n        2: 1\n        4: 14\n    line_length_limit_soft:\n        ?: 2\n        no: 3\n        75: 4\n        80: 6\n        85: 1\n        100: 1\n        120: 4\n        150: 1\n    line_length_limit_hard:\n        ?: 2\n        no: 11\n        85: 4\n        100: 3\n        120: 2\n    class_names:\n        ?: 1\n        lower: 1\n        lower_under: 1\n        studly: 19\n    class_brace_line:\n        next: 16\n        same: 6\n    constant_names:\n        upper: 22\n    true_false_null:\n        lower: 19\n        upper: 3\n    method_names:\n        camel: 21\n        lower_under: 1\n    method_brace_line:\n        next: 15\n        same: 7\n    control_brace_line:\n        next: 4\n        same: 18\n    control_space_after:\n        no: 2\n        yes: 20\n    always_use_control_braces:\n        no: 3\n        yes: 19\n    else_elseif_line:\n        next: 6\n        same: 16\n    case_break_indent_from_switch:\n        0/1: 4\n        1/1: 4\n        1/2: 14\n    function_space_after:\n        no: 22\n    closing_php_tag_required:\n        no: 19\n        yes: 3\n    line_endings:\n        ?: 5\n        LF: 17\n    static_or_visibility_first:\n        ?: 5\n        either: 7\n        static: 4\n        visibility: 6\n    control_space_parens:\n        ?: 1\n        no: 19\n        yes: 2\n    blank_line_after_php:\n        ?: 1\n        no: 13\n        yes: 8\n    class_method_control_brace:\n        next/next/next: 4\n        next/next/same: 11\n        next/same/same: 1\n        same/same/same: 6\n\n"]],[0,7010],[15437,15437]]],[1565593182491,["sirui-php@DESKTOP-PSVFMK8",[[-1,8589,"附录 A. 问卷调查\n------------------\n\n为了编写本规范，小组制定了调查问卷，用来统计各成员项目的共同规范。\n以下是此问卷调查的数据，在此供查阅。\n\n### A.1. 问卷数据\n\n    url,http://www.horde.org/apps/horde/docs/CODING_STANDARDS,http://pear.php.net/manual/en/standards.php,http://solarphp.com/manual/appendix-standards.style,http://framework.zend.com/manual/en/coding-standard.html,http://symfony.com/doc/2.0/contributing/code/standards.html,http://www.ppi.io/docs/coding-standards.html,https://github.com/ezsystems/ezp-next/wiki/codingstandards,http://book.cakephp.org/2.0/en/contributing/cakephp-coding-conventions.html,https://github.com/UnionOfRAD/lithium/wiki/Spec%3A-Coding,http://drupal.org/coding-standards,http://code.google.com/p/sabredav/,http://area51.phpbb.com/docs/31x/coding-guidelines.html,https://docs.google.com/a/zikula.org/document/edit?authkey=CPCU0Us&hgd=1&id=1fcqb93Sn-hR9c0mkN6m_tyWnmEvoswKBtSc0tKkZmJA,http://www.chisimba.com,n/a,https://github.com/Respect/project-info/blob/master/coding-standards-sample.php,n/a,Object Calisthenics for PHP,http://doc.nette.org/en/coding-standard,http://flow3.typo3.org,https://github.com/propelorm/Propel2/wiki/Coding-Standards,http://developer.joomla.org/coding-standards.html\n    voting,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,no,no,no,?,yes,no,yes\n    indent_type,4,4,4,4,4,tab,4,tab,tab,2,4,tab,4,4,4,4,4,4,tab,tab,4,tab\n    line_length_limit_soft,75,75,75,75,no,85,120,120,80,80,80,no,100,80,80,?,?,120,80,120,no,150\n    line_length_limit_hard,85,85,85,85,no,no,no,no,100,?,no,no,no,100,100,?,120,120,no,no,no,no\n    class_names,studly,studly,studly,studly,studly,studly,studly,studly,studly,studly,studly,lower_under,studly,lower,studly,studly,studly,studly,?,studly,studly,studly\n    class_brace_line,next,next,next,next,next,same,next,same,same,same,same,next,next,next,next,next,next,next,next,same,next,next\n    constant_names,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper\n    true_false_null,lower,lower,lower,lower,lower,lower,lower,lower,lower,upper,lower,lower,lower,upper,lower,lower,lower,lower,lower,upper,lower,lower\n    method_names,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel,lower_under,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel\n    method_brace_line,next,next,next,next,next,same,next,same,same,same,same,next,next,same,next,next,next,next,next,same,next,next\n    control_brace_line,same,same,same,same,same,same,next,same,same,same,same,next,same,same,next,same,same,same,same,same,same,next\n    control_space_after,yes,yes,yes,yes,yes,no,yes,yes,yes,yes,no,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes\n    always_use_control_braces,yes,yes,yes,yes,yes,yes,no,yes,yes,yes,no,yes,yes,yes,yes,no,yes,yes,yes,yes,yes,yes\n    else_elseif_line,same,same,same,same,same,same,next,same,same,next,same,next,same,next,next,same,same,same,same,same,same,next\n    case_break_indent_from_switch,0/1,0/1,0/1,1/2,1/2,1/2,1/2,1/1,1/1,1/2,1/2,1/1,1/2,1/2,1/2,1/2,1/2,1/2,0/1,1/1,1/2,1/2\n    function_space_after,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no\n    closing_php_tag_required,no,no,no,no,no,no,no,no,yes,no,no,no,no,yes,no,no,no,no,no,yes,no,no\n    line_endings,LF,LF,LF,LF,LF,LF,LF,LF,?,LF,?,LF,LF,LF,LF,?,,LF,?,LF,LF,LF\n    static_or_visibility_first,static,?,static,either,either,either,visibility,visibility,visibility,either,static,either,?,visibility,?,?,either,either,visibility,visibility,static,?\n    control_space_parens,no,no,no,no,no,no,yes,no,no,no,no,no,no,yes,?,no,no,no,no,no,no,no\n    blank_line_after_php,no,no,no,no,yes,no,no,no,no,yes,yes,no,no,yes,?,yes,yes,no,yes,no,yes,no\n    class_method_control_brace,next/next/same,next/next/same,next/next/same,next/next/same,next/next/same,same/same/same,next/next/next,same/same/same,same/same/same,same/same/same,same/same/same,next/next/next,next/next/same,next/same/same,next/next/next,next/next/same,next/next/same,next/next/same,next/next/same,same/same/same,next/next/same,next/next/next\n\n### A.2. 问卷说明\n\n`indent_type`:\n缩进类型. `tab` = \"使用 tab 键一次\", `2` or `4` = \"空格的数量\"\n\n`line_length_limit_soft`:\n每行字符数量的“软”限制. `?` = 不可辩或无作答, `no` 表示无限制.\n\n`line_length_limit_hard`:\n每行字符数量的“硬”限制. `?` = 不可辩或无作答, `no` 表示无限制.\n\n`class_names`:\n类名称的命名. `lower` = 只允许小写字母, `lower_under` = 下滑线分隔的小写字母, `studly` = StudlyCase 的驼峰风格.\n\n`class_brace_line`:\n类的开始花括号是与 class 关键字在同一行或是在其的下一行？\n\n`constant_names`:\n类的常量如何命名? `upper` = 下划线分隔的大写字母.\n\n`true_false_null`:\n关键字 `true`、`false` 以及 `null` 是全部小写 `lower` 还是全部大写 `upper`?\n\n`method_names`:\n方法名称如何命名? `camel` = `camelCase`, `lower_under` = 下划线分隔的小写字母.\n\n`method_brace_line`:\n方法的开始花括号是与方法名在同一行还是在其的下一行？\n\n`control_brace_line`:\n控制结构的开始花括号是与声明在同一行还是在其的下一行？\n\n`control_space_after`:\n控制结构关键词后是否有空格？\n\n`always_use_control_braces`:\n控制结构体是否都要被包含在花括号内？\n\n`else_elseif_line`:\n`else` 或 `elseif` 与前面的结束花括号在同一行还是在其的下一行？\n\n`case_break_indent_from_switch`:\n`switch` 语句中的 `case` 和 `break` 需要相对 `switch` 缩进多少次？\n\n`function_space_after`:\n函数调用语句中，函数名称与变量列表的左括号间是否有空格？\n\n`closing_php_tag_required`:\n纯 PHP 代码的文件，是否需要 `?>` 结束标签？\n\n`line_endings`:\n选择哪种类型的行结束符？\n\n`static_or_visibility_first`:\n声明一个静态方法时，`static` 是写访问修饰符前还是后？\n\n`control_space_parens`:\n控制结构里，左括号后以及右括号前是否有空格？`yes` = `if ( $expr )`, `no` = `if ($expr)`.\n\n`blank_line_after_php`:\nPHP 开始标签后，是否需要一个空行？\n\n`class_method_control_brace`:\n开始花括号在类、方法和控制结构的位置统计。\n\n### A.3. 问卷统计结果\n\n    indent_type:\n        tab: 7\n        2: 1\n        4: 14\n    line_length_limit_soft:\n        ?: 2\n        no: 3\n        75: 4\n        80: 6\n        85: 1\n        100: 1\n        120: 4\n        150: 1\n    line_length_limit_hard:\n        ?: 2\n        no: 11\n        85: 4\n        100: 3\n        120: 2\n    class_names:\n        ?: 1\n        lower: 1\n        lower_under: 1\n        studly: 19\n    class_brace_line:\n        next: 16\n        same: 6\n    constant_names:\n        upper: 22\n    true_false_null:\n        lower: 19\n        upper: 3\n    method_names:\n        camel: 21\n        lower_under: 1\n    method_brace_line:\n        next: 15\n        same: 7\n    control_brace_line:\n        next: 4\n        same: 18\n    control_space_after:\n        no: 2\n        yes: 20\n    always_use_control_braces:\n        no: 3\n        yes: 19\n    else_elseif_line:\n        next: 6\n        same: 16\n    case_break_indent_from_switch:\n        0/1: 4\n        1/1: 4\n        1/2: 14\n    function_space_after:\n        no: 22\n    closing_php_tag_required:\n        no: 19\n        yes: 3\n    line_endings:\n        ?: 5\n        LF: 17\n    static_or_visibility_first:\n        ?: 5\n        either: 7\n        static: 4\n        visibility: 6\n    control_space_parens:\n        ?: 1\n        no: 19\n        yes: 2\n    blank_line_after_php:\n        ?: 1\n        no: 13\n        yes: 8\n    class_method_control_brace:\n        next/next/next: 4\n        next/next/same: 11\n        next/same/same: 1\n        same/same/same: 6\n"]],[8589,15437],[8589,8589]]],[1565593183336,["sirui-php@DESKTOP-PSVFMK8",[[-1,8589,"\n"]],[8589,8589],[8588,8588]]],[1565593183798,["sirui-php@DESKTOP-PSVFMK8",[[-1,8588,"\n"]],[8588,8588],[8587,8587]]]],null,"sirui-php@DESKTOP-PSVFMK8"]]}