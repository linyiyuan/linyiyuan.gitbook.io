{"compress":true,"commitItems":[["a6cc8628-9d74-4dce-9ccc-6f8d43b93d6f",1565319700013,"",[[1565319678236,["sirui-php@DESKTOP-PSVFMK8",[[1,0,"步骤如下 以下假设需要将数据共享给Home/index以及Home/user视图\n\na. 创建服务提供者 //这条命令会在app/Providers目录创建ShareUserDataProvider.php\n\n```bash \n    php artisan make:provider ShareUserDataProvider\n\n```\n\nb. 将上一步创建好的服务提供者，添加到配置文件中 在config.php/app.php配置文件中，\n\n```php \n 'providers' => [\n        // 其他服务提供器\n     App\\Providers\\ShareUserDataProvider::class,\n ],\n```\n\nc. 在ShareUserDataProvider类文件中的boot方法\n\n```php \n    use Illuminate\\Support\\Facades\\View;\n\n     //Home/index,Home/user都是视图名\n     View::composer(\n          ['Home/index', 'Home/user'], 'App\\Http\\ViewComposers\\ProfileComposer'\n     );\n```\n\nd. 创建App\\\\Http\\\\ViewComposers\\\\ProfileComposer d-1. 在app/Http目录下创建一个ViewComposers目录\n\n```bash \n    mkdir  ViewComposers`d-2. 在ViewComposers目录下创建ProfileComposer文件\n\n```\n\n```php \n   touch ProfileComposer.php\n    <?php\n\n          namespace App\\Http\\ViewComposers;\n\n          use Illuminate\\View\\View;\n          use App\\Http\\Controllers\\Api\\Index;\n\n          class ProfileComposer\n          {\n              protected $user;\n              public function __construct(Index $index)\n              {\n                  $this->user = $index;\n              }\n\n              /**\n              * 绑定数据到视图.\n              *\n              * @param View $view\n              * @return void\n              */\n              public function compose(View $view)\n              {\n                  ////在视图中使用{{$count}}拿到aa\n                  $view->with('count', 'aa');\n\n                  ////拿到UserApi类的test()方法的返回数据，并且分配到模板\n                  $view->with('userdata', $this->user->test() );\n              }\n          }\n```\n\n//视图被渲染前，Composer 类的 compose 方法被调用，同时 Illuminate\\\\View\\\\View 实例被注入该方法，从而可以使用其 with 方法来绑定数据到视图。"]],[0,0],[1652,1652]]]],null,"sirui-php@DESKTOP-PSVFMK8"]]}