{"./":{"url":"./","title":"项目简介","keywords":"","body":"项目简介     欢迎来到Choice→選的开发笔记，最近在整理自己的一些学习笔记，刚好在github看到了这么一个工具，所以拿来总结自己所有的开发笔记以及一些知识点，面试技巧等，希望对你有用 个人信息 个人博客：https://linyiyuan.github.io 个人简历：http://resume.linyiyuan.top GitHub地址：https://github.com/linyiyuan 掘金地址：https://juejin.im/user/5c749f1951882561dd7b7e83 知乎地址：https://www.zhihu.com/people/lin-yi-yuan-35-45/activities 微博地址：https://weibo.com/3118916401/ 个人标签 PHP后端开发、Laravel 、聚合支付、公众号开发、开源爱好者、Linux、 VueJs、极客 、Mysql CRM系统 联系信息 QQ：375133100 微信：13211035441 手机号码：13211035441 安装运行 # git clone 项目地址 # npm install # gitbook init # gitbook install # gitbook serve 关于GitBook的安装和使用 ➡️ https://www.jianshu.com/p/1f78d8018ea7 Copyright © Choice→選の博客 2019 all right reserved，powered by Gitbook修订时间： 2019-08-05 18:53:29 "},"php/Readme.html":{"url":"php/Readme.html","title":"PHP优化配置","keywords":"","body":"初始化 Copyright © Choice→選の博客 2019 all right reserved，powered by Gitbook修订时间： 2019-08-09 20:02:36 "},"php/PHP-FPM配置详解.html":{"url":"php/PHP-FPM配置详解.html","title":"PHP-FPM配置详解","keywords":"","body":"前言 本文章会详细介绍php-fpm配置文件的各个配置值，以及对应关系，目前大多数PHP应用采用nginx + php-fpm 的方式去运作，所以了解php-fpm的配置对优化服务器会有很大的帮助 配置详解 该配置为 Ubuntu 18.04 下 通过apt-get install 安装的php7.3-fpm生成的配置文件 运行php-fpm的用户以及用户组配置 user = www-data --运行php-fpm的用户 group = www-data --运行php-fpm的用户组 监听php-fpm的方式 listen = /run/php/php7.3-fpm.sock --fpm监听的sock文件 listen = 127.0.0.1:9000 --fpm监听的端口 监听php-fpm的方式有两种 第一次种是Unix domain socket模式 另外一种是TCP模式, TCP是使用TCP端口连接127.0.0.1:9000，Socket是使用unix domain socket连接套接字/dev/shm/php-cgi.sock，在服务器压力不大的情况下，tcp和socket差别不大，但在压力比较满的时候，用套接字方式，效果确实比较好。 从原理上来说，unix socket方式肯定要比tcp的方式快而且消耗资源少，因为socket之间在nginx和php-fpm的进程之间通信，而tcp需要经过本地回环驱动，还要申请临时端口和tcp相关资源。 当然还是从原理上来说，unix socket会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而TCP这样的面向连接的协议，多少可以保证通信的正确性和完整性。其实如果nginx做要做负载均衡的话，根本也不要考虑unix socket的方式了，只能采用TCP的方式。 backlog数 listen.backlog = 1024 ---1表示无限制，由操作系统决定，此行注释掉就行。 监听的用户以及用户组 listen.owner = www-data listen.group = www-data 允许监听的客户端 ip listen.allowed_clients = 127.0.0.1 Copyright © Choice→選の博客 2019 all right reserved，powered by Gitbook修订时间： 2019-08-09 20:55:48 "},"laravel/Laravel常见错误指南.html":{"url":"laravel/Laravel常见错误指南.html","title":"Laravel常见错误指南","keywords":"","body":"Laravel常见问题总结 1.Whoops, looks like something went wrong. 这个错误代表服务器出现错 解决方法：查看日志以及打开.env 修改APP_DEBUG 为true再重新刷新页面 2.当使用post提交数据时 报The page has expired due to inactivity. Please refresh and try again. 一般这个问题是由于表单缺少csrf令牌时 报错误 或者是路由选择访问的方式不是为post 解决方法 ： 在表单加上{{ csrf_field() }} 这个 或者在web路由更改相应的路由设置 3.Call to undefined function Illuminate\\Encryption\\openssl_cipher_iv_length() 一般出现这个问题是由于服务器缺少openssl这个php拓展 解决方法：装上即可 安装步骤： yum -y install openssl-devel 必须安装 yum -y install openssl-devel 必须安装 cd /lamp/php-7.0.7/ext/openssl mv config0.m4 config.m4 否则报错：找不到config.m4 /usr/local/php/bin/phpize ./configure --with-openssl --with-php-config=/usr/local/php/bin/php-config make make install 4. 禁止访问错误 一般出现这个问题是由于重写模块没有打开 解决方法： 在httpd.conf 中打开rewrite重写模块 在226行左右将 AllowOverride None 设置为All 然后重启apache即可 *FollowSymLinks 允许你的网页文件夹下的链接文件链接到首页目录以外的文件 5.使用composer安装laravel时出现问题 问题1.详解 Failed to download laravel/laravel from dist: The zip extension and unzip command are both missing, skipping. The php.ini used by your command-line PHP is: /usr/local/php/etc/php.ini c出现这个问题是由于环境中缺少zip跟unzip 解决方法 ：yum install zip unzip php7.0-zip 6.当同步更新laravel时发现视图层根本没更新 这是因为laravel 里面的storage\\framework\\views缓存问题 将里面东西都删除即可 7.利用composer装laravel 时报版本错误 命令错误 解决方法composer create-project --prefer-dist laravel/laravel=5.5 blog 8.服务器报500错误 这是由于服务器内部错误 一般是代码错误或者Apache错误 解决方法：打开php.ini 的display_error 中的错误报告 如果是Laravel框架则在配置文件打开调试模式 或者是缺少env这个文件 这个问题一般是由于git克隆或者直接复制文件夹问题 9.No application encryption key has been specified. 这是因为.env 配置文件中缺少key这个秘钥 解决方法； hp artisan key:generate 10 如果ajax post发起请求 出现419错误 由于没有csrf_token令牌的原因 解决方法： 在页面头部加一行 然后在ajax 的请求头里加多一行headers: {'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')}, Copyright © Choice→選の博客 2019 all right reserved，powered by Gitbook修订时间： 2019-08-05 20:15:03 "},"laravel/Laravel框架给多个视图分配数据.html":{"url":"laravel/Laravel框架给多个视图分配数据.html","title":"Laravel框架给多个视图分配数据","keywords":"","body":"步骤如下 以下假设需要将数据共享给Home/index以及Home/user视图 a. 创建服务提供者 //这条命令会在app/Providers目录创建ShareUserDataProvider.php php artisan make:provider ShareUserDataProvider b. 将上一步创建好的服务提供者，添加到配置文件中 在config.php/app.php配置文件中， 'providers' => [ // 其他服务提供器 App\\Providers\\ShareUserDataProvider::class, ], c. 在ShareUserDataProvider类文件中的boot方法 use Illuminate\\Support\\Facades\\View; //Home/index,Home/user都是视图名 View::composer( ['Home/index', 'Home/user'], 'App\\Http\\ViewComposers\\ProfileComposer' ); d. 创建App\\Http\\ViewComposers\\ProfileComposer d-1. 在app/Http目录下创建一个ViewComposers目录 mkdir ViewComposers`d-2. 在ViewComposers目录下创建ProfileComposer文件 touch ProfileComposer.php user = $index; } /** * 绑定数据到视图. * * @param View $view * @return void */ public function compose(View $view) { ////在视图中使用{{$count}}拿到aa $view->with('count', 'aa'); ////拿到UserApi类的test()方法的返回数据，并且分配到模板 $view->with('userdata', $this->user->test() ); } } //视图被渲染前，Composer 类的 compose 方法被调用，同时 Illuminate\\View\\View 实例被注入该方法，从而可以使用其 with 方法来绑定数据到视图。 Copyright © Choice→選の博客 2019 all right reserved，powered by Gitbook修订时间： 2019-08-10 09:30:17 "}}