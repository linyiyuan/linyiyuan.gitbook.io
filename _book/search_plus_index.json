{"./":{"url":"./","title":"项目简介","keywords":"","body":"项目简介     欢迎来到Choice→選的开发笔记，最近在整理自己的一些学习笔记，刚好在github看到了这么一个工具，所以拿来总结自己所有的开发笔记以及一些知识点，面试技巧等，希望对你有用 个人信息 个人博客：https://linyiyuan.github.io 个人简历：http://resume.linyiyuan.top GitHub地址：https://github.com/linyiyuan 掘金地址：https://juejin.im/user/5c749f1951882561dd7b7e83 知乎地址：https://www.zhihu.com/people/lin-yi-yuan-35-45/activities 微博地址：https://weibo.com/3118916401/ 个人标签 PHP后端开发、Laravel 、聚合支付、公众号开发、开源爱好者、Linux、 VueJs、极客 、Mysql CRM系统 联系信息 QQ：375133100 微信：13211035441 手机号码：13211035441 安装运行 # git clone 项目地址 # npm install # gitbook init # gitbook install # gitbook serve 关于GitBook的安装和使用 ➡️ https://www.jianshu.com/p/1f78d8018ea7 Copyright © Choice→選の博客 2019 all right reserved，powered by Gitbook修订时间： 2019-08-05 18:53:29 "},"php/PHP版本新特性/Readme.html":{"url":"php/PHP版本新特性/Readme.html","title":"PHP版本新特性","keywords":"","body":"PHP各个版本新特性（7.0-7.2） php7发布已经升级到7.2.里面发生了很多的变化。本文整理php7.0至php7.2的新特性和一些变化。 参考资料： http://php.net/manual/zh/migration70.new-features.php http://php.net/manual/zh/migration71.new-features.php http://php.net/manual/zh/migration72.new-features.php Copyright © Choice→選の博客 2019 all right reserved，powered by Gitbook修订时间： 2019-08-10 16:24:57 "},"php/PHP版本新特性/PHP7.0版本新特性.html":{"url":"php/PHP版本新特性/PHP7.0版本新特性.html","title":"PHP7.0版本新特性","keywords":"","body":"PHP7.0版本新特性 1. 组合比较符 () 组合比较符号用于比较两个表达式。当$a小于、等于或大于$b时它分别返回-1、0或1，比较规则延续常规比较规则。对象不能进行比较 var_dump('PHP' 'Node'); // int(1) var_dump(123 456); // int(-1) var_dump(['a', 'b'] ['a', 'b']); // int(0) 2. null合并运算符 由于日常使用中存在大量同时使用三元表达式和isset操作。使用null合并运算符可以简化操作 # php7以前 if(isset($_GET['a'])) { $a = $_GET['a']; } # php7以前 $a = isset($_GET['a']) ? $_GET['a'] : 'none'; #PHP 7 $a = $_GET['a'] ?? 'none'; 3. 变量类型声明 变量类型声明有两种模式。一种是强制的，和严格的。允许使用下列类型参数int、string、float、bool 同时不能再使用int、string、float、bool作为类的名字了 function sumOfInts(int ...$ints) { return array_sum($ints); } var_dump(sumOfInts(2, '3', 4.1)); // int(9) # 严格模式 declare(strict_types=1); function add(int $x, int $y) { return $x + $y; } var_dump(add('2', 3)); // Fatal error: Argument 1 passed to add() must be of the type integer 5. 返回值类型声明 增加了返回类型声明，类似参数类型。这样更方便的控制函数的返回值.在函数定义的后面加上:类型名即可 function fun(int $a): array { return $a; } fun(3);//Fatal error 6. 匿名类 php7允许new class {} 创建一个匿名的对象。 //php7以前 class Logger { public function log($msg) { echo $msg; } } $util->setLogger(new Logger()); // php7+ $util->setLogger(new class { public function log($msg) { echo $msg; } }); 7. Unicode codepoint 转译语法 这接受一个以16进制形式的 Unicode codepoint，并打印出一个双引号或heredoc包围的 UTF-8 编码格式的字符串。 可以接受任何有效的 codepoint，并且开头的 0 是可以省略的 echo \"\\u{aa}\";// ª echo \"\\u{0000aa}\";// ª echo \"\\u{9999}\";// 香 8. Closure::call 闭包绑定 简短干练的暂时绑定一个方法到对象上闭包并调用它。 class A {private $x = 1;} // PHP 7 之前版本的代码 $getXCB = function() {return $this->x;}; $getX = $getXCB->bindTo(new A, 'A'); // 中间层闭包 echo $getX(); // PHP 7+ 及更高版本的代码 $getX = function() {return $this->x;}; echo $getX->call(new A); 9. 带过滤的unserialize 提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入 // 将所有的对象都转换为 __PHP_Incomplete_Class 对象 $data = unserialize($foo, [\"allowed_classes\" => false]); // 将除 MyClass 和 MyClass2 之外的所有对象都转换为 __PHP_Incomplete_Class 对象 $data = unserialize($foo, [\"allowed_classes\" => [\"MyClass\", \"MyClass2\"]); // 默认情况下所有的类都是可接受的，等同于省略第二个参数 $data = unserialize($foo, [\"allowed_classes\" => true]); 10. IntlChar类 这个类自身定义了许多静态方法用于操作多字符集的 unicode 字符。需要安装intl拓展 printf('%x', IntlChar::CODEPOINT_MAX); echo IntlChar::charName('@'); var_dump(IntlChar::ispunct('!')); 11. 预期 它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。以后可以使用这个这个进行断言测试 ini_set('assert.exception', 1); class CustomError extends AssertionError {} assert(false, new CustomError('Some error message')); 12. 命名空间按组导入 从同一个命名空间下导入的类、函数、常量支持按组一次导入 #php7以前 use app\\model\\A; use app\\model\\B; #php7+ use app\\model{A,B} 13.生成器支持返回表达式 它允许在生成器函数中通过使用 return 语法来返回一个表达式 （但是不允许返回引用值）， 可以通过调用 Generator::getReturn() 方法来获取生成器的返回值， 但是这个方法只能在生成器完成产生工作以后调用一次。 $gen = (function() { yield 1; yield 2; return 3; })(); foreach ($gen as $val) { echo $val, PHP_EOL; } # output //1 //2 echo $gen->getReturn(), PHP_EOL; # output //3 14.生成器委派 现在，只需在最外层生成其中使用yield from，就可以把一个生成器自动委派给其他的生成器 function gen() { yield 1; yield 2; yield from gen2(); } function gen2() { yield 3; yield 4; } foreach (gen() as $val) { echo $val, PHP_EOL; } 15.整数除法函数intdiv var_dump(intdiv(10,3)) //3 16.会话选项设置 session_start() 可以加入一个数组覆盖php.ini的配置 session_start([ 'cache_limiter' => 'private', 'read_and_close' => true, ]); 18. 随机数、随机字符函数 string random_bytes(int length); int random_int(int min, int max); 19. define 支持定义数组 #php7+ define('ALLOWED_IMAGE_EXTENSIONS', ['jpg', 'jpeg', 'gif', 'png']); Copyright © Choice→選の博客 2019 all right reserved，powered by Gitbook修订时间： 2019-08-10 17:58:36 "},"php/PSR规范/PSR-4.html":{"url":"php/PSR规范/PSR-4.html","title":"PSR-4","keywords":"","body":"自动载入规范 关键词 “必须”(“MUST”)、“一定不可/一定不能”(“MUST NOT”)、“需要”(“REQUIRED”)、 “将会”(“SHALL”)、“不会”(“SHALL NOT”)、“应该”(“SHOULD”)、“不该”(“SHOULD NOT”)、 “推荐”(“RECOMMENDED”)、“可以”(“MAY”)和”可选“(“OPTIONAL”)。 1. 概述 本 PSR 是关于由文件路径 [自动载入][http://tools.ietf.org/html/rfc2119] 对应类的相关规范， 本规范是可互操作的，可以作为任一自动载入规范的补充，其中包括 PSR-0，此外， 本 PSR 还包括自动载入的类对应的文件存放路径规范。 2. 详细说明 此处的“类”泛指所有的class类、接口、traits可复用代码块以及其它类似结构。 一个完整的类名需具有以下结构: \\(\\)*\\ 完整的类名必须要有一个顶级命名空间，被称为 “vendor namespace”； 完整的类名可以有一个或多个子命名空间； 完整的类名必须有一个最终的类名； 完整的类名中任意一部分中的下滑线都是没有特殊含义的； 完整的类名可以由任意大小写字母组成； 所有类名都必须是大小写敏感的。 当根据完整的类名载入相应的文件…… 完整的类名中，去掉最前面的命名空间分隔符，前面连续的一个或多个命名空间和子命名空间，作为“命名空间前缀”，其必须与至少一个“文件基目录”相对应； 紧接命名空间前缀后的子命名空间必须与相应的”文件基目录“相匹配，其中的命名空间分隔符将作为目录分隔符。 末尾的类名必须与对应的以 .php 为后缀的文件同名。 自动加载器（autoloader）的实现一定不能抛出异常、一定不能触发任一级别的错误信息以及不应该有返回值。 3. 例子 下表展示了符合规范完整类名、命名空间前缀和文件基目录所对应的文件路径。 Copyright © Choice→選の博客 2019 all right reserved，powered by Gitbook修订时间： 2019-08-10 18:10:25 "},"php/Readme.html":{"url":"php/Readme.html","title":"PHP优化配置","keywords":"","body":"初始化 Copyright © Choice→選の博客 2019 all right reserved，powered by Gitbook修订时间： 2019-08-09 20:02:36 "},"php/PHP-FPM配置详解.html":{"url":"php/PHP-FPM配置详解.html","title":"PHP-FPM配置详解","keywords":"","body":"前言 本文章会详细介绍php-fpm配置文件的各个配置值，以及对应关系，目前大多数PHP应用采用nginx + php-fpm 的方式去运作，所以了解php-fpm的配置对优化服务器会有很大的帮助 配置详解 该配置为 Ubuntu 18.04 下 通过apt-get install 安装的php7.3-fpm生成的配置文件 运行php-fpm的用户以及用户组配置 user = www-data --运行php-fpm的用户 group = www-data --运行php-fpm的用户组 监听php-fpm的方式 listen = /run/php/php7.3-fpm.sock --fpm监听的sock文件 listen = 127.0.0.1:9000 --fpm监听的端口 监听php-fpm的方式有两种 第一次种是Unix domain socket模式 另外一种是TCP模式, TCP是使用TCP端口连接127.0.0.1:9000，Socket是使用unix domain socket连接套接字/dev/shm/php-cgi.sock，在服务器压力不大的情况下，tcp和socket差别不大，但在压力比较满的时候，用套接字方式，效果确实比较好。 从原理上来说，unix socket方式肯定要比tcp的方式快而且消耗资源少，因为socket之间在nginx和php-fpm的进程之间通信，而tcp需要经过本地回环驱动，还要申请临时端口和tcp相关资源。 当然还是从原理上来说，unix socket会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而TCP这样的面向连接的协议，多少可以保证通信的正确性和完整性。其实如果nginx做要做负载均衡的话，根本也不要考虑unix socket的方式了，只能采用TCP的方式。 backlog数 listen.backlog = 1024 ---1表示无限制，由操作系统决定，此行注释掉就行。 监听的用户以及用户组 listen.owner = www-data listen.group = www-data 允许监听的客户端 ip listen.allowed_clients = 127.0.0.1 Copyright © Choice→選の博客 2019 all right reserved，powered by Gitbook修订时间： 2019-08-09 20:55:48 "},"laravel/Laravel常见错误指南.html":{"url":"laravel/Laravel常见错误指南.html","title":"Laravel常见错误指南","keywords":"","body":"Laravel常见问题总结 1.Whoops, looks like something went wrong. 这个错误代表服务器出现错 解决方法：查看日志以及打开.env 修改APP_DEBUG 为true再重新刷新页面 2.当使用post提交数据时 报The page has expired due to inactivity. Please refresh and try again. 一般这个问题是由于表单缺少csrf令牌时 报错误 或者是路由选择访问的方式不是为post 解决方法 ： 在表单加上{{ csrf_field() }} 这个 或者在web路由更改相应的路由设置 3.Call to undefined function Illuminate\\Encryption\\openssl_cipher_iv_length() 一般出现这个问题是由于服务器缺少openssl这个php拓展 解决方法：装上即可 安装步骤： yum -y install openssl-devel 必须安装 yum -y install openssl-devel 必须安装 cd /lamp/php-7.0.7/ext/openssl mv config0.m4 config.m4 否则报错：找不到config.m4 /usr/local/php/bin/phpize ./configure --with-openssl --with-php-config=/usr/local/php/bin/php-config make make install 4. 禁止访问错误 一般出现这个问题是由于重写模块没有打开 解决方法： 在httpd.conf 中打开rewrite重写模块 在226行左右将 AllowOverride None 设置为All 然后重启apache即可 *FollowSymLinks 允许你的网页文件夹下的链接文件链接到首页目录以外的文件 5.使用composer安装laravel时出现问题 问题1.详解 Failed to download laravel/laravel from dist: The zip extension and unzip command are both missing, skipping. The php.ini used by your command-line PHP is: /usr/local/php/etc/php.ini c出现这个问题是由于环境中缺少zip跟unzip 解决方法 ：yum install zip unzip php7.0-zip 6.当同步更新laravel时发现视图层根本没更新 这是因为laravel 里面的storage\\framework\\views缓存问题 将里面东西都删除即可 7.利用composer装laravel 时报版本错误 命令错误 解决方法composer create-project --prefer-dist laravel/laravel=5.5 blog 8.服务器报500错误 这是由于服务器内部错误 一般是代码错误或者Apache错误 解决方法：打开php.ini 的display_error 中的错误报告 如果是Laravel框架则在配置文件打开调试模式 或者是缺少env这个文件 这个问题一般是由于git克隆或者直接复制文件夹问题 9.No application encryption key has been specified. 这是因为.env 配置文件中缺少key这个秘钥 解决方法； hp artisan key:generate 10 如果ajax post发起请求 出现419错误 由于没有csrf_token令牌的原因 解决方法： 在页面头部加一行 然后在ajax 的请求头里加多一行headers: {'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')}, Copyright © Choice→選の博客 2019 all right reserved，powered by Gitbook修订时间： 2019-08-05 20:15:03 "},"laravel/Laravel框架给多个视图分配数据.html":{"url":"laravel/Laravel框架给多个视图分配数据.html","title":"Laravel框架给多个视图分配数据","keywords":"","body":"步骤如下 以下假设需要将数据共享给Home/index以及Home/user视图 a. 创建服务提供者 //这条命令会在app/Providers目录创建ShareUserDataProvider.php php artisan make:provider ShareUserDataProvider b. 将上一步创建好的服务提供者，添加到配置文件中 在config.php/app.php配置文件中， 'providers' => [ // 其他服务提供器 App\\Providers\\ShareUserDataProvider::class, ], c. 在ShareUserDataProvider类文件中的boot方法 use Illuminate\\Support\\Facades\\View; //Home/index,Home/user都是视图名 View::composer( ['Home/index', 'Home/user'], 'App\\Http\\ViewComposers\\ProfileComposer' ); d. 创建App\\Http\\ViewComposers\\ProfileComposer d-1. 在app/Http目录下创建一个ViewComposers目录 mkdir ViewComposers`d-2. 在ViewComposers目录下创建ProfileComposer文件 touch ProfileComposer.php user = $index; } /** * 绑定数据到视图. * * @param View $view * @return void */ public function compose(View $view) { ////在视图中使用{{$count}}拿到aa $view->with('count', 'aa'); ////拿到UserApi类的test()方法的返回数据，并且分配到模板 $view->with('userdata', $this->user->test() ); } } //视图被渲染前，Composer 类的 compose 方法被调用，同时 Illuminate\\View\\View 实例被注入该方法，从而可以使用其 with 方法来绑定数据到视图。 Copyright © Choice→選の博客 2019 all right reserved，powered by Gitbook修订时间： 2019-08-10 09:30:17 "}}