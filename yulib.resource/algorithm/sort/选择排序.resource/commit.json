{"compress":true,"commitItems":[["acf794c8-883f-4b66-9bf6-c1090b3fb612",1568887566563,"",[[1568887551637,["sirui-php@DESKTOP-PSVFMK8",[[1,0,"# 选择排序\n\n\n\n"]],[0,0],[9,9]]],[1568887558872,["sirui-php@DESKTOP-PSVFMK8",[[1,9,"* 思路分析： 就是像冒泡一样，每次从数组当中 冒一个最大的数出来。  你可以这样理解：（从小到大排序）存在10个不同大小的气泡，由底至上的把较少的气泡逐步地向上升，这样经过遍历一次后最小的气泡就会被上升到顶（下标为0）然后再从底至上地这样升，循环直至十个气泡大小有序。在冒泡排序中，最重要的思想是两两比较，将两者较少的升上去\n\n* 算法步骤\n  1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n\n  2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的\n  \n  3. 针对所有的元素重复以上的步骤，除了最后一个。\n\n  4.  持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n"]],[9,9],[341,341]]],[1568887560496,["sirui-php@DESKTOP-PSVFMK8",[[-1,8,"\n"]],[8,8],[7,7]]],[1568887563466,["sirui-php@DESKTOP-PSVFMK8",[[1,0,"#"]],[1,1],[2,2]]],[1568887564781,["sirui-php@DESKTOP-PSVFMK8",[[-1,0,"#"]],[2,2],[1,1]]],[1568888388929,["sirui-php@DESKTOP-PSVFMK8",[[-1,340,"\n"],[1,341,"&"]],[340,340],[341,341]]],[1568888389247,["sirui-php@DESKTOP-PSVFMK8",[[-1,340,"&"],[1,341,"\n"]],[341,341],[340,340]]],[1568888389504,["sirui-php@DESKTOP-PSVFMK8",[[-1,340,"\n"],[1,341,"("]],[340,340],[341,341]]],[1568888389999,["sirui-php@DESKTOP-PSVFMK8",[[-1,340,"("],[1,341,"\n"]],[341,341],[340,340]]],[1568888390521,["sirui-php@DESKTOP-PSVFMK8",[[-1,340,"\n"],[1,341,"*"]],[340,340],[341,341]]],[1568888391648,["sirui-php@DESKTOP-PSVFMK8",[[1,341," dai"]],[341,341],[345,345]]],[1568888392310,["sirui-php@DESKTOP-PSVFMK8",[[-1,342,"dai"]],[345,345],[342,342]]],[1568888392888,["sirui-php@DESKTOP-PSVFMK8",[[1,342,"dai"]],[342,342],[345,345]]],[1568888393559,["sirui-php@DESKTOP-PSVFMK8",[[-1,342,"dai"]],[345,345],[342,342]]],[1568888394047,["sirui-php@DESKTOP-PSVFMK8",[[1,342,"da"]],[342,342],[344,344]]],[1568888394638,["sirui-php@DESKTOP-PSVFMK8",[[-1,342,"da"]],[344,344],[342,342]]],[1568888398034,["sirui-php@DESKTOP-PSVFMK8",[[1,342,"代码样式"]],[342,342],[346,346]]],[1568888399767,["sirui-php@DESKTOP-PSVFMK8",[[1,340,"  5. \n"]],[339,339],[345,345]]],[1568888400614,["sirui-php@DESKTOP-PSVFMK8",[[-1,340,"  5. \n"]],[345,345],[339,339]]],[1568888401288,["sirui-php@DESKTOP-PSVFMK8",[[1,340,"  5. \n"]],[339,339],[345,345]]],[1568888401870,["sirui-php@DESKTOP-PSVFMK8",[[-1,345,"\n"]],[345,345],[345,345]]],[1568888402655,["sirui-php@DESKTOP-PSVFMK8",[[1,345,"\n"]],[345,345],[345,345]]],[1568888403870,["sirui-php@DESKTOP-PSVFMK8",[[-1,342,"5. "]],[345,345],[342,342]]],[1568888405503,["sirui-php@DESKTOP-PSVFMK8",[[1,349,"\n* "]],[349,349],[352,352]]],[1568888406471,["sirui-php@DESKTOP-PSVFMK8",[[-1,351," "]],[352,352],[351,351]]],[1568888406632,["sirui-php@DESKTOP-PSVFMK8",[[-1,350,"*"],[1,351,"\n"]],[351,351],[350,350]]],[1568888406919,["sirui-php@DESKTOP-PSVFMK8",[[1,351,"\n"]],[350,350],[351,351]]],[1568888407137,["sirui-php@DESKTOP-PSVFMK8",[[-1,351,"\n"],[1,352,"`"]],[351,351],[352,352]]],[1568888407464,["sirui-php@DESKTOP-PSVFMK8",[[1,352,"``"]],[352,352],[354,354]]],[1568888407490,["sirui-php@DESKTOP-PSVFMK8",[[1,354,"language\n```\n"]],[354,354],[354,362]]],[1568888408328,["sirui-php@DESKTOP-PSVFMK8",[[-1,354,"language"],[1,362,"h"]],[354,362],[355,355]]],[1568888408775,["sirui-php@DESKTOP-PSVFMK8",[[-1,354,"h"]],[355,355],[354,354]]],[1568888409232,["sirui-php@DESKTOP-PSVFMK8",[[1,354,"php"]],[354,354],[357,357]]],[1568888409455,["sirui-php@DESKTOP-PSVFMK8",[[1,358,"\n"]],[357,357],[358,358]]],[1568888409775,["sirui-php@DESKTOP-PSVFMK8",[[1,358,"| /** |\n|  | * SelectSort |\n|  | * |\n|  | * @param array $container |\n|  | * @return array |\n|  | */ |\n|  | function SelectSort(array $container) |\n|  | { |\n|  | $count = count($container); |\n|  | for ($i = 0; $i < $count; $i++){ |\n|  | $k = $i; |\n|  | for ($j = $i + 1; $j < $count; $j++){ |\n|  | if($container[$j] < $container[$k]){ |\n|  | $k = $j; |\n|  | } |\n|  | } |\n|  | if($k != $i){ |\n|  | $temp = $container[$i]; |\n|  | $container[$i] = $container[$k]; |\n|  | $container[$k] = $temp; |\n|  | } |\n|  | } |\n|  | return $container; |\n|  | } |"]],[358,358],[904,904]]],[1568888410856,["sirui-php@DESKTOP-PSVFMK8",[[-1,358,"| /** |\n|  | * SelectSort |\n|  | * |\n|  | * @param array $container |\n|  | * @return array |\n|  | */ |\n|  | function SelectSort(array $container) |\n|  | { |\n|  | $count = count($container); |\n|  | for ($i = 0; $i < $count; $i++){ |\n|  | $k = $i; |\n|  | for ($j = $i + 1; $j < $count; $j++){ |\n|  | if($container[$j] < $container[$k]){ |\n|  | $k = $j; |\n|  | } |\n|  | } |\n|  | if($k != $i){ |\n|  | $temp = $container[$i]; |\n|  | $container[$i] = $container[$k]; |\n|  | $container[$k] = $temp; |\n|  | } |\n|  | } |\n|  | return $container; |\n|  | } |"]],[904,904],[358,358]]],[1568888451127,["sirui-php@DESKTOP-PSVFMK8",[[1,358,"<?php\n\n/**\n *  选择排序\n *\n * @author   ShaoWei Pu <pushaowei0727@gmail.com>\n * @date     2017/6/17\n * @license  MIT\n * -------------------------------------------------------------\n * 思路分析：选择排序是不稳定的排序方法\n * 大O表示： O(n 2)\n * -------------------------------------------------------------\n * 它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。\n * 选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。\n */\n\n\n// +--------------------------------------------------------------------------\n// | 解题方式\n// +--------------------------------------------------------------------------\n/**\n * SelectSort\n *\n * @param array $container\n * @return array\n */\nfunction SelectSort(array $container)\n{\n    $count = count($container);\n    for ($i = 0; $i < $count; $i++){\n        $k = $i;\n        for ($j = $i + 1; $j < $count; $j++){\n            if($container[$j] < $container[$k]){\n                $k = $j;\n            }\n        }\n        if($k != $i){\n            $temp          = $container[$i];\n            $container[$i] = $container[$k];\n            $container[$k] = $temp;\n        }\n    }\n    return $container;\n}\n\n// +--------------------------------------------------------------------------\n// | 方案测试\n// +--------------------------------------------------------------------------\n\n\nvar_dump(SelectSort([3, 12, 42, 1, 24, 5, 346, 7]));\n\n/*\n array(8) {\n  [0] =>\n  int(1)\n  [1] =>\n  int(3)\n  [2] =>\n  int(5)\n  [3] =>\n  int(7)\n  [4] =>\n  int(12)\n  [5] =>\n  int(24)\n  [6] =>\n  int(42)\n  [7] =>\n  int(346)\n}\n */"]],[358,358],[1866,1866]]],[1568888452671,["sirui-php@DESKTOP-PSVFMK8",[[-1,358,"<?php\n\n/**\n *  选择排序\n *\n * @author   ShaoWei Pu <pushaowei0727@gmail.com>\n * @date     2017/6/17\n * @license  MIT\n * -------------------------------------------------------------\n * 思路分析：选择排序是不稳定的排序方法\n * 大O表示： O(n 2)\n * -------------------------------------------------------------\n * 它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。\n * 选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。\n */\n\n\n// +--------------------------------------------------------------------------\n// | 解题方式\n// +--------------------------------------------------------------------------\n/**\n * SelectSort\n *\n * @param array $container\n * @return array\n */\nfunction SelectSort(array $container)\n{\n    $count = count($container);\n    for ($i = 0; $i < $count; $i++){\n        $k = $i;\n        for ($j = $i + 1; $j < $count; $j++){\n            if($container[$j] < $container[$k]){\n                $k = $j;\n            }\n        }\n        if($k != $i){\n            $temp          = $container[$i];\n            $container[$i] = $container[$k];\n            $container[$k] = $temp;\n        }\n    }\n    return $container;\n}\n\n// +--------------------------------------------------------------------------\n// | 方案测试\n// +--------------------------------------------------------------------------\n\n\nvar_dump(SelectSort([3, 12, 42, 1, 24, 5, 346, 7]));\n\n/*\n array(8) {\n  [0] =>\n  int(1)\n  [1] =>\n  int(3)\n  [2] =>\n  int(5)\n  [3] =>\n  int(7)\n  [4] =>\n  int(12)\n  [5] =>\n  int(24)\n  [6] =>\n  int(42)\n  [7] =>\n  int(346)\n}\n */"]],[1866,1866],[358,358]]],[1568888462407,["sirui-php@DESKTOP-PSVFMK8",[[1,358,"/**\n * SelectSort\n *\n * @param array $container\n * @return array\n */\nfunction SelectSort(array $container)\n{\n    $count = count($container);\n    for ($i = 0; $i < $count; $i++){\n        $k = $i;\n        for ($j = $i + 1; $j < $count; $j++){\n            if($container[$j] < $container[$k]){\n                $k = $j;\n            }\n        }\n        if($k != $i){\n            $temp          = $container[$i];\n            $container[$i] = $container[$k];\n            $container[$k] = $temp;\n        }\n    }\n    return $container;\n}\n"]],[358,358],[886,886]]],[1568888465153,["sirui-php@DESKTOP-PSVFMK8",[[-1,365,"SelectSort"],[1,375,"选择"]],[365,365],[367,367]]],[1568888465761,["sirui-php@DESKTOP-PSVFMK8",[[1,367,"排序"]],[367,367],[369,369]]],[1568888481992,["sirui-php@DESKTOP-PSVFMK8",[[-1,16,"就是像冒泡一样，每次从数组当中 冒一个最大的数出来。  你可以这样理解：（从小到大排序）存在10个不同大小的气泡，由底至上的把较少的气泡逐步地向上升，这样经过遍历一次后最小的气泡就会被上升到顶（下标为0）然后再从底至上地这样升，循环直至十个气泡大小有序。在冒泡排序中，最重要的思想是两两比较，将两者较少的升上去"],[1,171,"选择排序是不稳定的排序方法"]],[16,171],[29,29]]],[1568888487278,["sirui-php@DESKTOP-PSVFMK8",[[1,29,"它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。"]],[29,29],[90,90]]],[1568888489128,["sirui-php@DESKTOP-PSVFMK8",[[1,29,"，"]],[29,29],[30,30]]],[1568888494583,["sirui-php@DESKTOP-PSVFMK8",[[1,91,"选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。"]],[91,91],[153,153]]],[1568888564543,["sirui-php@DESKTOP-PSVFMK8",[[1,162,"*"],[-1,164,"1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。"],[1,194," 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置"],[1,196,"*"],[-1,198,"2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的\n  \n  3. 针对所有的元素重复以上的步骤，除了最后一个"],[1,277," 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾"],[1,280,"*"],[-1,282,"4."],[-1,285," 持续每次对越来越少的元素"],[-1,300,"上面的步骤，直到没有任何一对数字需要比较"],[1,320,"第二步，直到所有元素均排序完毕"]],[162,321],[262,262]]],[1568888566319,["sirui-php@DESKTOP-PSVFMK8",[[-1,162,"*"]],[163,163],[162,162]]],[1568888566643,["sirui-php@DESKTOP-PSVFMK8",[[1,162,"1、"]],[162,162],[164,164]]],[1568888567327,["sirui-php@DESKTOP-PSVFMK8",[[-1,163,"、"]],[164,164],[163,163]]],[1568888567945,["sirui-php@DESKTOP-PSVFMK8",[[1,163,"."]],[163,163],[164,164]]],[1568888569863,["sirui-php@DESKTOP-PSVFMK8",[[-1,200,"* "]],[202,202],[200,200]]],[1568888570608,["sirui-php@DESKTOP-PSVFMK8",[[1,200,"2."]],[200,200],[202,202]]],[1568888573086,["sirui-php@DESKTOP-PSVFMK8",[[-1,241,"* "]],[243,243],[241,241]]],[1568888573417,["sirui-php@DESKTOP-PSVFMK8",[[1,241,"3."]],[241,241],[243,243]]],[1568888575327,["sirui-php@DESKTOP-PSVFMK8",[[1,162,"  "]],[162,162],[164,164]]],[1568888576544,["sirui-php@DESKTOP-PSVFMK8",[[-1,168," "]],[166,166],[166,166]]],[1568888576903,["sirui-php@DESKTOP-PSVFMK8",[[-1,167," "]],[166,166],[166,166]]],[1568888577327,["sirui-php@DESKTOP-PSVFMK8",[[-1,166," "]],[166,166],[166,166]]],[1568888578369,["sirui-php@DESKTOP-PSVFMK8",[[1,166," "]],[166,166],[167,167]]],[1568888581352,["sirui-php@DESKTOP-PSVFMK8",[[1,200,"  "]],[200,200],[202,202]]],[1568888582615,["sirui-php@DESKTOP-PSVFMK8",[[-1,205," "]],[204,204],[204,204]]],[1568888583047,["sirui-php@DESKTOP-PSVFMK8",[[-1,204," "]],[204,204],[204,204]]],[1568888583688,["sirui-php@DESKTOP-PSVFMK8",[[1,204," "]],[204,204],[205,205]]],[1568888586335,["sirui-php@DESKTOP-PSVFMK8",[[-1,244,"  "]],[246,246],[244,244]]],[1568888587137,["sirui-php@DESKTOP-PSVFMK8",[[1,244," "]],[244,244],[245,245]]],[1568888588120,["sirui-php@DESKTOP-PSVFMK8",[[1,242,"  "]],[242,242],[244,244]]]],null,"sirui-php@DESKTOP-PSVFMK8"],["c1aa7418-c9b7-459e-a11b-4082d1777e16",1568974233619,"# 选择排序\n\n* 思路分析： 选择排序是不稳定的排序方法，它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。\n\n* 算法步骤\n  1. 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置\n\n  2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n\n  3. 重复第二步，直到所有元素均排序完毕。\n  \n* 代码样式\n\n```php\n/**\n * 选择排序\n *\n * @param array $container\n * @return array\n */\nfunction SelectSort(array $container)\n{\n    $count = count($container);\n    for ($i = 0; $i < $count; $i++){\n        $k = $i;\n        for ($j = $i + 1; $j < $count; $j++){\n            if($container[$j] < $container[$k]){\n                $k = $j;\n            }\n        }\n        if($k != $i){\n            $temp          = $container[$i];\n            $container[$i] = $container[$k];\n            $container[$k] = $temp;\n        }\n    }\n    return $container;\n}\n\n```\n",[[1568974220937,["sirui-php@DESKTOP-PSVFMK8",[[1,346,"'"]],[346,346],[347,347]]]],null,"sirui-php@DESKTOP-PSVFMK8"]]}