{"compress":true,"commitItems":[["e12d9de1-6bb5-46ff-981e-34f3e9959d0a",1567064574057,"",[[1567064515116,["sirui-php@DESKTOP-PSVFMK8",[[1,0,"# PHP面向对象设计的五个基准原则\n\n\n\n"]],[0,0],[21,21]]],[1567064530632,["sirui-php@DESKTOP-PSVFMK8",[[1,21,"## S.O.L.I.D 意思是：\n\n扩展出来的首字母缩略词看起来可能很复杂，实际上它们很容易理解。\n\n*   **S** - 单一功能原则\n*   **O** - 开闭原则\n*   **L** - 里氏替换原则\n*   **I** - 接口隔离原则\n*   **D** - 依赖反转原则\n\n接下来让我们看看每个原则，来了解为什么 S.O.L.I.D 可以帮助我们成为更好的开发人员。\n\n## [](https://linyiyuan.github.io/p/004a.html#%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99 \"单一职责原则\")单一职责原则\n\n缩写是 **S.R.P** ，该原则内容是:\n\n> 一个类有且只能有一个因素使其改变，意思是一个类只应该有单一职责．\n\n例如，假设我们有一些图形，并且想要计算这些图形的总面积．是的，这很简单对不对？\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n | \n\nclass Circle {\n public $radius;\n\n public function __construct($radius) {\n $this->radius = $radius;\n }\n}\n\nclass Square {\n public $length;\n\n public function __construct($length) {\n $this->length = $length;\n }\n}\n\n |\n\n复制\n\n首先，我们创建图形类，该类的构造方法初始化必要的参数．接下来，创建**AreaCalculator** 类，然后编写计算指定图形总面积的逻辑代码．\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n | \n\nclass AreaCalculator {\n\n protected $shapes;\n\n public function __construct($shapes = array()) {\n $this->shapes = $shapes;\n }\n\n public function sum() {\n // logic to sum the areas\n }\n\n public function output() {\n return implode('', array(\n \"\",\n \"Sum of the areas of provided shapes: \",\n $this->sum(),\n \"\"\n ));\n }\n}\n\n |\n\n复制\n\n**AreaCalculator** 使用方法，我们只需简单的实例化这个类，并且传递一个图形数组，在页面底部展示输出内容．\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n | \n\n$shapes = array(\n new Circle(2),\n new Square(5),\n new Square(6)\n);\n\n$areas = new AreaCalculator($shapes);\n\necho $areas->output();\n\n |\n\n复制\n\n输出方法的问题在于，**AreaCalculator** 处理了数据输出逻辑．因此，假如用户希望将数据以 json 或者其他格式输出呢？\n\n所有逻辑都由 **AreaCalculator** 类处理，这恰恰违反了单一职责原则(SRP); **AreaCalculator** 类应该只负责计算图形的总面积，它不应该关心用户是想要json还是HTML格式数据。\n\n因此，要解决这个问题，可以创建一个 **SumCalculatorOutputter** 类，并使用它来处理所需的显示逻辑，以处理所有图形的总面积该如何显示。\n\n**SumCalculatorOutputter** 类的工作方式如下：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n | \n\n$shapes = array(\n new Circle(2),\n new Square(5),\n new Square(6)\n);\n\n$areas = new AreaCalculator($shapes);\n$output = new SumCalculatorOutputter($areas);\n\necho $output->JSON();\necho $output->HAML();\necho $output->HTML();\necho $output->JADE();\n\n |\n\n复制\n\n现在，无论你想向用户输出什么格式数据，都由 **SumCalculatorOutputter** 类处理。\n\n## [](https://linyiyuan.github.io/p/004a.html#%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99 \"开闭原则\")开闭原则\n\n> 对象和实体应该对扩展开放，但是对修改关闭．\n\n简单的说就是，一个类应该不用修改其自身就能很容易扩展其功能．让我们看一下 **AreaCalculator** 类，特别是 **sum** 方法．\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n | \n\npublic function sum() {\n foreach($this->shapes as $shape) {\n if(is_a($shape, 'Square')) {\n $area[] = pow($shape->length, 2);\n } else if(is_a($shape, 'Circle')) {\n $area[] = pi() * pow($shape->radius, 2);\n }\n }\n\n return array_sum($area);\n}\n\n |\n\n复制\n\n如果我们想用 **sum** 方法能计算更多图形的面积，我们就不得不添加更多的 **if/else blocks** ，然而这违背了开闭原则．\n\n让这个 **sum** 方法变得更好的方式是将计算每个形状面积的代码逻辑移出 sum 方法，将其放进各个形状类中：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n | \n\nclass Square {\n public $length;\n\n public function __construct($length) {\n $this->length = $length;\n }\n\n public function area() {\n return pow($this->length, 2);\n }\n}\n\n |\n\n复制\n\n相同的操作应该被用来处理 **Circle** 类, 在类中添加一个 **area** 方法。 现在，计算任何形状面积之和应该像下边这样简单：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n\n | \n\npublic function sum() {\n foreach($this->shapes as $shape) {\n $area[] = $shape->area();\n }\n\n return array_sum($area);\n}\n\n |\n\n复制\n\n接下来我们可以创建另一个形状类并在计算总和时传递它而不破坏我们的代码。 然而现在又出现了另一个问题，我们怎么能知道传入 **AreaCalculator**的对象实际上是一个形状，或者形状对象中有一个 **area** 方法？\n\n接口编码是实践 **S.O.L.I.D** 的一部分，例如下面的例子中我们创建一个接口类，每个形状类都会实现这个接口类：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n | \n\ninterface ShapeInterface {\n public function area();\n}\n\nclass Circle implements ShapeInterface {\n public $radius;\n\n public function __construct($radius) {\n $this->radius = $radius;\n }\n\n public function area() {\n return pi() * pow($this->radius, 2);\n }\n}\n\n |\n\n复制\n\n在我们的 **AreaCalculator** 的 sum 方法中，我们可以检查提供的形状类的实例是否是 **ShapeInterface** 的实现，否则我们就抛出一个异常：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n | \n\npublic function sum() {\n foreach($this->shapes as $shape) {\n if(is_a($shape, 'ShapeInterface')) {\n $area[] = $shape->area();\n continue;\n }\n\n throw new AreaCalculatorInvalidShapeException;\n }\n\n return array_sum($area);\n}\n\n |\n\n复制\n\n## [](https://linyiyuan.github.io/p/004a.html#%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99 \"里氏替换原则\")里氏替换原则\n\n> 如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。\n\n这句定义的意思是说：每个子类或者衍生类可以毫无问题地替代基类/父类。\n\n依然使用 **AreaCalculator** 类, 假设我们有一个 **VolumeCalculator** 类，这个类继承了**AreaCalculator** 类：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n | \n\nclass VolumeCalculator extends AreaCalculator {\n public function construct($shapes = array()) {\n parent::construct($shapes);\n }\n\n public function sum() {\n // logic to calculate the volumes and then return and array of output\n return array($summedData);\n }\n}\n\n |\n\n复制\n\n**SumCalculatorOutputter** 类:\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n | \n\nclass SumCalculatorOutputter {\n protected $calculator;\n\n public function __construct(AreaCalculator $calculator) {\n $this->calculator = $calculator;\n }\n\n public function JSON() {\n $data = array(\n 'sum' => $this->calculator->sum();\n );\n\n return json_encode($data);\n }\n\n public function HTML() {\n return implode('', array(\n '',\n 'Sum of the areas of provided shapes: ',\n $this->calculator->sum(),\n ''\n ));\n }\n}\n\n |\n\n复制\n\n如果我们运行像这样一个例子：\n\n| \n\n1\n2\n3\n4\n5\n\n | \n\n$areas = new AreaCalculator($shapes);\n$volumes = new AreaCalculator($solidShapes);\n\n$output = new SumCalculatorOutputter($areas);\n$output2 = new SumCalculatorOutputter($volumes);\n\n |\n\n复制\n\n程序不会出问题， 但当我们使用**$output2** 对象调用 **HTML** 方法时 ，我们接收到一个 **E_NOTICE** 错误，提示我们 数组被当做字符串使用的错误。\n\n为了修复这个问题，只需：\n\n| \n\n1\n2\n3\n4\n\n | \n\npublic function sum() {\n // logic to calculate the volumes and then return and array of output\n return $summedData;\n}\n\n |\n\n复制\n\n而不是让**VolumeCalculator** 类的 sum 方法返回数组。\n\n`$summedData` 是一个浮点数、双精度浮点数或者整型。\n\n## [](https://linyiyuan.github.io/p/004a.html#%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99 \"接口隔离原则\")接口隔离原则\n\n> 使用方（client）不应该依赖强制实现不使用的接口，或不应该依赖不使用的方法。\n\n继续使用上面的 `shapes` 例子，已知拥有一个实心块，如果我们需要计算形状的体积，我们可以在 **ShapeInterface** 中添加一个方法：\n\n| \n\n1\n2\n3\n4\n\n | \n\ninterface ShapeInterface {\n public function area();\n public function volume();\n}\n\n |\n\n复制\n\n任何形状创建的时候必须实现 **volume** 方法，但是【平面】是没有体积的，实现这个接口会强制的让【平面】类去实现一个自己用不到的方法。\n\n**ISP** 原则不允许这么去做，所以我们应该创建另外一个拥有 `volume` 方法的`SolidShapeInterface` 接口去代替这种方式，这样类似立方体的实心体就可以实现这个接口了：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n | \n\ninterface ShapeInterface {\n public function area();\n}\n\ninterface SolidShapeInterface {\n public function volume();\n}\n\nclass Cuboid implements ShapeInterface, SolidShapeInterface {\n public function area() {\n //计算长方体的表面积\n }\n\n public function volume() {\n // 计算长方体的体积\n }\n}\n\n |\n\n复制\n\n这是一个更好的方式，但是要注意提示类型时不要仅仅提示一个 **ShapeInterface** 或 **SolidShapeInterface**。 你能创建其它的接口，比如 **ManageShapeInterface** ,并在平面和立方体的类上实现它，这样你能很容易的看到有一个用于管理形状的api。例：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n | \n\ninterface ManageShapeInterface {\n public function calculate();\n}\n\nclass Square implements ShapeInterface, ManageShapeInterface {\n public function area() { /Do stuff here/ }\n\n public function calculate() {\n return $this->area();\n }\n}\n\nclass Cuboid implements ShapeInterface, SolidShapeInterface, ManageShapeInterface {\n public function area() { /Do stuff here/ }\n public function volume() { /Do stuff here/ }\n\n public function calculate() {\n return $this->area() + $this->volume();\n }\n}\n\n |\n\n复制\n\n现在在 **AreaCalculator** 类中，我们可以很容易地用 **calculate**替换对**area** 方法的调用，并检查对象是否是 **ManageShapeInterface** 的实例，而不是 **ShapeInterface** 。\n\n## [](https://linyiyuan.github.io/p/004a.html#%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99 \"依赖倒置原则\")依赖倒置原则\n\n最后，但绝不是最不重要的：\n\n> 实体必须依赖抽象而不是具体的实现．即高等级模块不应该依赖低等级模块，他们都应该依赖抽象．\n\n这也许听起来让人头大，但是它很容易理解．这个原则能够很好的解耦，举个例子似乎是解释这个原则最好的方法：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n\n | \n\nclass PasswordReminder {\n private $dbConnection;\n\n public function __construct(MySQLConnection $dbConnection) {\n $this->dbConnection = $dbConnection;\n }\n}\n\n |\n\n复制\n\n首先 **MySQLConnection** 是低等级模块，然而　**PasswordReminder** 是高等级模块，但是根据 S.O.L.I.D. 中 **D** 的解释：_依赖于抽象而不依赖与实现_， 上面的代码段违背了这一原则，因为 **PasswordReminder** 类被强制依赖于 **MySQLConnection** 类．\n\n稍后，如果你希望修改数据库驱动，你也不得不修改 **PasswordReminder** 类，因此就违背了 **Open-close principle**．\n\n此 **PasswordReminder** 类不应该关注你的应用使用了什么数据库，为了进一步解决这个问题，我们「面向接口写代码」，由于高等级和低等级模块都应该依赖于抽象，我们可以创建一个接口：\n\n| \n\n1\n2\n3\n\n | \n\ninterface DBConnectionInterface {\n public function connect();\n}\n\n |\n\n复制\n\n这个接口有一个连接数据库的方法，**MySQLConnection** 类实现该接口，在 **PasswordReminder** 的构造方法中不要直接将类型约束设置为 **MySQLConnection** 类，而是设置为接口类，这样无论你的应用使用什么类型的数据库，**PasswordReminder** 类都能毫无问题地连接数据库，且不违背 **开闭原则**．\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n | \n\nclass MySQLConnection implements DBConnectionInterface {\n public function connect() {\n return \"Database connection\";\n }\n}\n\nclass PasswordReminder {\n private $dbConnection;\n\n public function __construct(DBConnectionInterface $dbConnection) {\n $this->dbConnection = $dbConnection;\n }\n}\n\n |\n\n复制\n\n从上面一小段代码，你现在能看出高等级和低等级模块都依赖于抽象了。\n\n## [](https://linyiyuan.github.io/p/004a.html#%E6%80%BB%E7%BB%93 \"总结\")总结\n\n说实话，**S.O.L.I.D** 一开始似乎很难掌握，但只要不断地使用和遵守其原则，它将成为你的一部分，使你的代码易被扩展、修改，测试，即使重构也不容易出现问题。\n\n文章转自：[https://learnku.com/php/t/28922](https://link.zhihu.com/?target=https%3A//learnku.com/php/t/28922)\n更多文章：[https://learnku.com/php/c/translations](https://link.zhihu.com/?target=https%3A//learnku.com/php/c/translations)"]],[21,21],[9133,9133]]],[1567064544398,["sirui-php@DESKTOP-PSVFMK8",[[-1,0,"# PHP面向对象设计的五个基准原则\n\n\n## S.O.L.I.D 意思是：\n\n扩展出来的首字母缩略词看起来可能很复杂，实际上它们很容易理解。\n\n*   **S** - 单一功能原则\n*   **O** - 开闭原则\n*   **L** - 里氏替换原则\n*   **I** - 接口隔离原则\n*   **D** - 依赖反转原则\n\n接下来让我们看看每个原则，来了解为什么 S.O.L.I.D 可以帮助我们成为更好的开发人员。\n\n## [](https://linyiyuan.github.io/p/004a.html#%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99 \"单一职责原则\")单一职责原则\n\n缩写是 **S.R.P** ，该原则内容是:\n\n> 一个类有且只能有一个因素使其改变，意思是一个类只应该有单一职责．\n\n例如，假设我们有一些图形，并且想要计算这些图形的总面积．是的，这很简单对不对？\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n | \n\nclass Circle {\n public $radius;\n\n public function __construct($radius) {\n $this->radius = $radius;\n }\n}\n\nclass Square {\n public $length;\n\n public function __construct($length) {\n $this->length = $length;\n }\n}\n\n |\n\n复制\n\n首先，我们创建图形类，该类的构造方法初始化必要的参数．接下来，创建**AreaCalculator** 类，然后编写计算指定图形总面积的逻辑代码．\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n | \n\nclass AreaCalculator {\n\n protected $shapes;\n\n public function __construct($shapes = array()) {\n $this->shapes = $shapes;\n }\n\n public function sum() {\n // logic to sum the areas\n }\n\n public function output() {\n return implode('', array(\n \"\",\n \"Sum of the areas of provided shapes: \",\n $this->sum(),\n \"\"\n ));\n }\n}\n\n |\n\n复制\n\n**AreaCalculator** 使用方法，我们只需简单的实例化这个类，并且传递一个图形数组，在页面底部展示输出内容．\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n | \n\n$shapes = array(\n new Circle(2),\n new Square(5),\n new Square(6)\n);\n\n$areas = new AreaCalculator($shapes);\n\necho $areas->output();\n\n |\n\n复制\n\n输出方法的问题在于，**AreaCalculator** 处理了数据输出逻辑．因此，假如用户希望将数据以 json 或者其他格式输出呢？\n\n所有逻辑都由 **AreaCalculator** 类处理，这恰恰违反了单一职责原则(SRP); **AreaCalculator** 类应该只负责计算图形的总面积，它不应该关心用户是想要json还是HTML格式数据。\n\n因此，要解决这个问题，可以创建一个 **SumCalculatorOutputter** 类，并使用它来处理所需的显示逻辑，以处理所有图形的总面积该如何显示。\n\n**SumCalculatorOutputter** 类的工作方式如下：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n | \n\n$shapes = array(\n new Circle(2),\n new Square(5),\n new Square(6)\n);\n\n$areas = new AreaCalculator($shapes);\n$output = new SumCalculatorOutputter($areas);\n\necho $output->JSON();\necho $output->HAML();\necho $output->HTML();\necho $output->JADE();\n\n |\n\n复制\n\n现在，无论你想向用户输出什么格式数据，都由 **SumCalculatorOutputter** 类处理。\n\n## [](https://linyiyuan.github.io/p/004a.html#%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99 \"开闭原则\")开闭原则\n\n> 对象和实体应该对扩展开放，但是对修改关闭．\n\n简单的说就是，一个类应该不用修改其自身就能很容易扩展其功能．让我们看一下 **AreaCalculator** 类，特别是 **sum** 方法．\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n | \n\npublic function sum() {\n foreach($this->shapes as $shape) {\n if(is_a($shape, 'Square')) {\n $area[] = pow($shape->length, 2);\n } else if(is_a($shape, 'Circle')) {\n $area[] = pi() * pow($shape->radius, 2);\n }\n }\n\n return array_sum($area);\n}\n\n |\n\n复制\n\n如果我们想用 **sum** 方法能计算更多图形的面积，我们就不得不添加更多的 **if/else blocks** ，然而这违背了开闭原则．\n\n让这个 **sum** 方法变得更好的方式是将计算每个形状面积的代码逻辑移出 sum 方法，将其放进各个形状类中：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n | \n\nclass Square {\n public $length;\n\n public function __construct($length) {\n $this->length = $length;\n }\n\n public function area() {\n return pow($this->length, 2);\n }\n}\n\n |\n\n复制\n\n相同的操作应该被用来处理 **Circle** 类, 在类中添加一个 **area** 方法。 现在，计算任何形状面积之和应该像下边这样简单：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n\n | \n\npublic function sum() {\n foreach($this->shapes as $shape) {\n $area[] = $shape->area();\n }\n\n return array_sum($area);\n}\n\n |\n\n复制\n\n接下来我们可以创建另一个形状类并在计算总和时传递它而不破坏我们的代码。 然而现在又出现了另一个问题，我们怎么能知道传入 **AreaCalculator**的对象实际上是一个形状，或者形状对象中有一个 **area** 方法？\n\n接口编码是实践 **S.O.L.I.D** 的一部分，例如下面的例子中我们创建一个接口类，每个形状类都会实现这个接口类：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n | \n\ninterface ShapeInterface {\n public function area();\n}\n\nclass Circle implements ShapeInterface {\n public $radius;\n\n public function __construct($radius) {\n $this->radius = $radius;\n }\n\n public function area() {\n return pi() * pow($this->radius, 2);\n }\n}\n\n |\n\n复制\n\n在我们的 **AreaCalculator** 的 sum 方法中，我们可以检查提供的形状类的实例是否是 **ShapeInterface** 的实现，否则我们就抛出一个异常：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n | \n\npublic function sum() {\n foreach($this->shapes as $shape) {\n if(is_a($shape, 'ShapeInterface')) {\n $area[] = $shape->area();\n continue;\n }\n\n throw new AreaCalculatorInvalidShapeException;\n }\n\n return array_sum($area);\n}\n\n |\n\n复制\n\n## [](https://linyiyuan.github.io/p/004a.html#%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99 \"里氏替换原则\")里氏替换原则\n\n> 如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。\n\n这句定义的意思是说：每个子类或者衍生类可以毫无问题地替代基类/父类。\n\n依然使用 **AreaCalculator** 类, 假设我们有一个 **VolumeCalculator** 类，这个类继承了**AreaCalculator** 类：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n | \n\nclass VolumeCalculator extends AreaCalculator {\n public function construct($shapes = array()) {\n parent::construct($shapes);\n }\n\n public function sum() {\n // logic to calculate the volumes and then return and array of output\n return array($summedData);\n }\n}\n\n |\n\n复制\n\n**SumCalculatorOutputter** 类:\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n | \n\nclass SumCalculatorOutputter {\n protected $calculator;\n\n public function __construct(AreaCalculator $calculator) {\n $this->calculator = $calculator;\n }\n\n public function JSON() {\n $data = array(\n 'sum' => $this->calculator->sum();\n );\n\n return json_encode($data);\n }\n\n public function HTML() {\n return implode('', array(\n '',\n 'Sum of the areas of provided shapes: ',\n $this->calculator->sum(),\n ''\n ));\n }\n}\n\n |\n\n复制\n\n如果我们运行像这样一个例子：\n\n| \n\n1\n2\n3\n4\n5\n\n | \n\n$areas = new AreaCalculator($shapes);\n$volumes = new AreaCalculator($solidShapes);\n\n$output = new SumCalculatorOutputter($areas);\n$output2 = new SumCalculatorOutputter($volumes);\n\n |\n\n复制\n\n程序不会出问题， 但当我们使用**$output2** 对象调用 **HTML** 方法时 ，我们接收到一个 **E_NOTICE** 错误，提示我们 数组被当做字符串使用的错误。\n\n为了修复这个问题，只需：\n\n| \n\n1\n2\n3\n4\n\n | \n\npublic function sum() {\n // logic to calculate the volumes and then return and array of output\n return $summedData;\n}\n\n |\n\n复制\n\n而不是让**VolumeCalculator** 类的 sum 方法返回数组。\n\n`$summedData` 是一个浮点数、双精度浮点数或者整型。\n\n## [](https://linyiyuan.github.io/p/004a.html#%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99 \"接口隔离原则\")接口隔离原则\n\n> 使用方（client）不应该依赖强制实现不使用的接口，或不应该依赖不使用的方法。\n\n继续使用上面的 `shapes` 例子，已知拥有一个实心块，如果我们需要计算形状的体积，我们可以在 **ShapeInterface** 中添加一个方法：\n\n| \n\n1\n2\n3\n4\n\n | \n\ninterface ShapeInterface {\n public function area();\n public function volume();\n}\n\n |\n\n复制\n\n任何形状创建的时候必须实现 **volume** 方法，但是【平面】是没有体积的，实现这个接口会强制的让【平面】类去实现一个自己用不到的方法。\n\n**ISP** 原则不允许这么去做，所以我们应该创建另外一个拥有 `volume` 方法的`SolidShapeInterface` 接口去代替这种方式，这样类似立方体的实心体就可以实现这个接口了：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n | \n\ninterface ShapeInterface {\n public function area();\n}\n\ninterface SolidShapeInterface {\n public function volume();\n}\n\nclass Cuboid implements ShapeInterface, SolidShapeInterface {\n public function area() {\n //计算长方体的表面积\n }\n\n public function volume() {\n // 计算长方体的体积\n }\n}\n\n |\n\n复制\n\n这是一个更好的方式，但是要注意提示类型时不要仅仅提示一个 **ShapeInterface** 或 **SolidShapeInterface**。 你能创建其它的接口，比如 **ManageShapeInterface** ,并在平面和立方体的类上实现它，这样你能很容易的看到有一个用于管理形状的api。例：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n | \n\ninterface ManageShapeInterface {\n public function calculate();\n}\n\nclass Square implements ShapeInterface, ManageShapeInterface {\n public function area() { /Do stuff here/ }\n\n public function calculate() {\n return $this->area();\n }\n}\n\nclass Cuboid implements ShapeInterface, SolidShapeInterface, ManageShapeInterface {\n public function area() { /Do stuff here/ }\n public function volume() { /Do stuff here/ }\n\n public function calculate() {\n return $this->area() + $this->volume();\n }\n}\n\n |\n\n复制\n\n现在在 **AreaCalculator** 类中，我们可以很容易地用 **calculate**替换对**area** 方法的调用，并检查对象是否是 **ManageShapeInterface** 的实例，而不是 **ShapeInterface** 。\n\n## [](https://linyiyuan.github.io/p/004a.html#%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99 \"依赖倒置原则\")依赖倒置原则\n\n最后，但绝不是最不重要的：\n\n> 实体必须依赖抽象而不是具体的实现．即高等级模块不应该依赖低等级模块，他们都应该依赖抽象．\n\n这也许听起来让人头大，但是它很容易理解．这个原则能够很好的解耦，举个例子似乎是解释这个原则最好的方法：\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n\n | \n\nclass PasswordReminder {\n private $dbConnection;\n\n public function __construct(MySQLConnection $dbConnection) {\n $this->dbConnection = $dbConnection;\n }\n}\n\n |\n\n复制\n\n首先 **MySQLConnection** 是低等级模块，然而　**PasswordReminder** 是高等级模块，但是根据 S.O.L.I.D. 中 **D** 的解释：_依赖于抽象而不依赖与实现_， 上面的代码段违背了这一原则，因为 **PasswordReminder** 类被强制依赖于 **MySQLConnection** 类．\n\n稍后，如果你希望修改数据库驱动，你也不得不修改 **PasswordReminder** 类，因此就违背了 **Open-close principle**．\n\n此 **PasswordReminder** 类不应该关注你的应用使用了什么数据库，为了进一步解决这个问题，我们「面向接口写代码」，由于高等级和低等级模块都应该依赖于抽象，我们可以创建一个接口：\n\n| \n\n1\n2\n3\n\n | \n\ninterface DBConnectionInterface {\n public function connect();\n}\n\n |\n\n复制\n\n这个接口有一个连接数据库的方法，**MySQLConnection** 类实现该接口，在 **PasswordReminder** 的构造方法中不要直接将类型约束设置为 **MySQLConnection** 类，而是设置为接口类，这样无论你的应用使用什么类型的数据库，**PasswordReminder** 类都能毫无问题地连接数据库，且不违背 **开闭原则**．\n\n| \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n | \n\nclass MySQLConnection implements DBConnectionInterface {\n public function connect() {\n return \"Database connection\";\n }\n}\n\nclass PasswordReminder {\n private $dbConnection;\n\n public function __construct(DBConnectionInterface $dbConnection) {\n $this->dbConnection = $dbConnection;\n }\n}\n\n |\n\n复制\n\n从上面一小段代码，你现在能看出高等级和低等级模块都依赖于抽象了。\n\n## [](https://linyiyuan.github.io/p/004a.html#%E6%80%BB%E7%BB%93 \"总结\")总结\n\n说实话，**S.O.L.I.D** 一开始似乎很难掌握，但只要不断地使用和遵守其原则，它将成为你的一部分，使你的代码易被扩展、修改，测试，即使重构也不容易出现问题。\n\n文章转自：[https://learnku.com/php/t/28922](https://link.zhihu.com/?target=https%3A//learnku.com/php/t/28922)\n更多文章：[https://learnku.com/php/c/translations](https://link.zhihu.com/?target=https%3A//learnku.com/php/c/translations)\n"]],[0,9134],[0,0]]],[1567064560747,["sirui-php@DESKTOP-PSVFMK8",[[1,0,"---\nlayout: (转载) S.O.L.I.D  PHP 面向对象设计的五个基准原则\ntitle: (转载) S.O.L.I.D  PHP 面向对象设计的五个基准原则\ndate: 2019-08-13 14:42:45\ncategories: \"PHP\"\nabbrlink: 004a\ntags: \n- PHP\n- 设计模式\n---\n\n<img src=\"http://images.linyiyuan.top/2wUiYDRjk8.png\" style=\"width:900px;height:400px\" />\n\n**S.O.L.I.D** 是 **首个 5 个面向对象设计**(**OOD**)** 准则的首字母缩写** ，这些准则是由 Robert C. Martin 提出的, 他更为人所熟知的名字是 [Uncle Bob](https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Robert_Cecil_Martin)。\n\n这些准则使得开发出易扩展、可维护的软件变得更容易。也使得代码更精简、易于重构。同样也是敏捷开发和自适应软件开发的一部分。\n\n**备注**: _这不是一篇简单的介绍 \"欢迎来到 _**S.O.L.I.D\" 的文章，这篇文章想要阐明 S.O.L.I.D**_ 是什么。\n\n<!--less-->\n\n## S.O.L.I.D 意思是：\n\n扩展出来的首字母缩略词看起来可能很复杂，实际上它们很容易理解。\n\n*   **S** - 单一功能原则\n*   **O** - 开闭原则\n*   **L** - 里氏替换原则\n*   **I** - 接口隔离原则\n*   **D** - 依赖反转原则\n\n接下来让我们看看每个原则，来了解为什么 S.O.L.I.D 可以帮助我们成为更好的开发人员。\n\n## 单一职责原则\n\n缩写是 **S.R.P** ，该原则内容是:\n\n> 一个类有且只能有一个因素使其改变，意思是一个类只应该有单一职责．\n\n例如，假设我们有一些图形，并且想要计算这些图形的总面积．是的，这很简单对不对？\n\n```php\nclass Circle {\n    public $radius;\n\n    public function __construct($radius) {\n        $this->radius = $radius;\n    }\n}\n\nclass Square {\n    public $length;\n\n    public function __construct($length) {\n        $this->length = $length;\n    }\n}\n```\n\n首先，我们创建图形类，该类的构造方法初始化必要的参数．接下来，创建**AreaCalculator** 类，然后编写计算指定图形总面积的逻辑代码．\n\n```php\nclass AreaCalculator {\n\n    protected $shapes;\n\n    public function __construct($shapes = array()) {\n        $this->shapes = $shapes;\n    }\n\n    public function sum() {\n        // logic to sum the areas\n    }\n\n    public function output() {\n        return implode('', array(\n            \"\",\n                \"Sum of the areas of provided shapes: \",\n                $this->sum(),\n            \"\"\n        ));\n    }\n}\n```\n\n**AreaCalculator** 使用方法，我们只需简单的实例化这个类，并且传递一个图形数组，在页面底部展示输出内容．\n\n```php\n$shapes = array(\n    new Circle(2),\n    new Square(5),\n    new Square(6)\n);\n\n$areas = new AreaCalculator($shapes);\n\necho $areas->output();\n```\n\n输出方法的问题在于，**AreaCalculator** 处理了数据输出逻辑．因此，假如用户希望将数据以 json 或者其他格式输出呢？\n\n所有逻辑都由 **AreaCalculator** 类处理，这恰恰违反了单一职责原则(SRP); **AreaCalculator** 类应该只负责计算图形的总面积，它不应该关心用户是想要json还是HTML格式数据。\n\n因此，要解决这个问题，可以创建一个 **SumCalculatorOutputter** 类，并使用它来处理所需的显示逻辑，以处理所有图形的总面积该如何显示。\n\n**SumCalculatorOutputter** 类的工作方式如下：\n\n```php\n$shapes = array(\n    new Circle(2),\n    new Square(5),\n    new Square(6)\n);\n\n$areas = new AreaCalculator($shapes);\n$output = new SumCalculatorOutputter($areas);\n\necho $output->JSON();\necho $output->HAML();\necho $output->HTML();\necho $output->JADE();\n```\n\n现在，无论你想向用户输出什么格式数据，都由 **SumCalculatorOutputter** 类处理。\n\n## 开闭原则\n\n> 对象和实体应该对扩展开放，但是对修改关闭．\n\n简单的说就是，一个类应该不用修改其自身就能很容易扩展其功能．让我们看一下 **AreaCalculator** 类，特别是 **sum** 方法．\n\n```php\npublic function sum() {\n    foreach($this->shapes as $shape) {\n        if(is_a($shape, 'Square')) {\n            $area[] = pow($shape->length, 2);\n        } else if(is_a($shape, 'Circle')) {\n            $area[] = pi() * pow($shape->radius, 2);\n        }\n    }\n\n    return array_sum($area);\n}\n```\n\n如果我们想用 **sum** 方法能计算更多图形的面积，我们就不得不添加更多的 **if/else blocks** ，然而这违背了开闭原则．\n\n让这个 **sum** 方法变得更好的方式是将计算每个形状面积的代码逻辑移出 sum 方法，将其放进各个形状类中：\n\n```php\nclass Square {\n    public $length;\n\n    public function __construct($length) {\n        $this->length = $length;\n    }\n\n    public function area() {\n        return pow($this->length, 2);\n    }\n}\n```\n\n相同的操作应该被用来处理 **Circle** 类, 在类中添加一个 **area** 方法。 现在，计算任何形状面积之和应该像下边这样简单：\n\n```php\npublic function sum() {\n    foreach($this->shapes as $shape) {\n        $area[] = $shape->area();\n    }\n\n    return array_sum($area);\n}\n```\n\n接下来我们可以创建另一个形状类并在计算总和时传递它而不破坏我们的代码。 然而现在又出现了另一个问题，我们怎么能知道传入 **AreaCalculator** 的对象实际上是一个形状，或者形状对象中有一个 **area** 方法？\n\n接口编码是实践 **S.O.L.I.D** 的一部分，例如下面的例子中我们创建一个接口类，每个形状类都会实现这个接口类：\n\n```php\ninterface ShapeInterface {\n    public function area();\n}\n\nclass Circle implements ShapeInterface {\n    public $radius;\n\n    public function __construct($radius) {\n        $this->radius = $radius;\n    }\n\n    public function area() {\n        return pi() * pow($this->radius, 2);\n    }\n}\n```\n\n在我们的 **AreaCalculator** 的 sum 方法中，我们可以检查提供的形状类的实例是否是 **ShapeInterface** 的实现，否则我们就抛出一个异常：\n\n```php\npublic function sum() {\n    foreach($this->shapes as $shape) {\n        if(is_a($shape, 'ShapeInterface')) {\n            $area[] = $shape->area();\n            continue;\n        }\n\n        throw new AreaCalculatorInvalidShapeException;\n    }\n\n    return array_sum($area);\n}\n```\n\n## 里氏替换原则\n\n> 如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。\n\n这句定义的意思是说：每个子类或者衍生类可以毫无问题地替代基类/父类。\n\n依然使用 **AreaCalculator** 类, 假设我们有一个 **VolumeCalculator** 类，这个类继承了**AreaCalculator** 类：\n\n```php\nclass VolumeCalculator extends AreaCalculator {\n    public function construct($shapes = array()) {\n        parent::construct($shapes);\n    }\n\n    public function sum() {\n        // logic to calculate the volumes and then return and array of output\n        return array($summedData);\n    }\n}\n```\n\n**SumCalculatorOutputter** 类:\n\n```php\nclass SumCalculatorOutputter {\n    protected $calculator;\n\n    public function __construct(AreaCalculator $calculator) {\n        $this->calculator = $calculator;\n    }\n\n    public function JSON() {\n        $data = array(\n            'sum' => $this->calculator->sum();\n        );\n\n        return json_encode($data);\n    }\n\n    public function HTML() {\n        return implode('', array(\n            '',\n                'Sum of the areas of provided shapes: ',\n                $this->calculator->sum(),\n            ''\n        ));\n    }\n}\n```\n\n如果我们运行像这样一个例子：\n\n```php\n$areas = new AreaCalculator($shapes);\n$volumes = new AreaCalculator($solidShapes);\n\n$output = new SumCalculatorOutputter($areas);\n$output2 = new SumCalculatorOutputter($volumes);\n```\n\n程序不会出问题， 但当我们使用**$output2** 对象调用 **HTML** 方法时 ，我们接收到一个 **E_NOTICE** 错误，提示我们 数组被当做字符串使用的错误。\n\n为了修复这个问题，只需：\n\n```php\npublic function sum() {\n    // logic to calculate the volumes and then return and array of output\n    return $summedData;\n}\n```\n\n而不是让**VolumeCalculator** 类的 sum 方法返回数组。\n\n`$summedData` 是一个浮点数、双精度浮点数或者整型。\n\n## 接口隔离原则\n\n> 使用方（client）不应该依赖强制实现不使用的接口，或不应该依赖不使用的方法。\n\n继续使用上面的 `shapes` 例子，已知拥有一个实心块，如果我们需要计算形状的体积，我们可以在 **ShapeInterface** 中添加一个方法：\n\n```php\ninterface ShapeInterface {\n    public function area();\n    public function volume();\n}\n```\n\n任何形状创建的时候必须实现 **volume** 方法，但是【平面】是没有体积的，实现这个接口会强制的让【平面】类去实现一个自己用不到的方法。\n\n**ISP** 原则不允许这么去做，所以我们应该创建另外一个拥有 `volume` 方法的`SolidShapeInterface` 接口去代替这种方式，这样类似立方体的实心体就可以实现这个接口了：\n\n```php\ninterface ShapeInterface {\n    public function area();\n}\n\ninterface SolidShapeInterface {\n    public function volume();\n}\n\nclass Cuboid implements ShapeInterface, SolidShapeInterface {\n    public function area() {\n        //计算长方体的表面积\n    }\n\n    public function volume() {\n        // 计算长方体的体积\n    }\n}\n```\n\n这是一个更好的方式，但是要注意提示类型时不要仅仅提示一个 **ShapeInterface** 或 **SolidShapeInterface**。 你能创建其它的接口，比如 **ManageShapeInterface** ,并在平面和立方体的类上实现它，这样你能很容易的看到有一个用于管理形状的api。例：\n\n```php\ninterface ManageShapeInterface {\n    public function calculate();\n}\n\nclass Square implements ShapeInterface, ManageShapeInterface {\n    public function area() { /Do stuff here/ }\n\n    public function calculate() {\n        return $this->area();\n    }\n}\n\nclass Cuboid implements ShapeInterface, SolidShapeInterface, ManageShapeInterface {\n    public function area() { /Do stuff here/ }\n    public function volume() { /Do stuff here/ }\n\n    public function calculate() {\n        return $this->area() + $this->volume();\n    }\n}\n```\n\n现在在 **AreaCalculator** 类中，我们可以很容易地用 **calculate**替换对**area** 方法的调用，并检查对象是否是 **ManageShapeInterface** 的实例，而不是 **ShapeInterface** 。\n\n## 依赖倒置原则\n\n最后，但绝不是最不重要的：\n\n> 实体必须依赖抽象而不是具体的实现．即高等级模块不应该依赖低等级模块，他们都应该依赖抽象．\n\n这也许听起来让人头大，但是它很容易理解．这个原则能够很好的解耦，举个例子似乎是解释这个原则最好的方法：\n\n```php\nclass PasswordReminder {\n    private $dbConnection;\n\n    public function __construct(MySQLConnection $dbConnection) {\n        $this->dbConnection = $dbConnection;\n    }\n}\n```\n\n首先 **MySQLConnection** 是低等级模块，然而　**PasswordReminder** 是高等级模块，但是根据 S.O.L.I.D. 中 **D** 的解释：_依赖于抽象而不依赖与实现_， 上面的代码段违背了这一原则，因为 **PasswordReminder** 类被强制依赖于 **MySQLConnection** 类．\n\n稍后，如果你希望修改数据库驱动，你也不得不修改 **PasswordReminder** 类，因此就违背了 **Open-close principle**．\n\n此 **PasswordReminder** 类不应该关注你的应用使用了什么数据库，为了进一步解决这个问题，我们「面向接口写代码」，由于高等级和低等级模块都应该依赖于抽象，我们可以创建一个接口：\n\n```php\ninterface DBConnectionInterface {\n    public function connect();\n}\n```\n\n这个接口有一个连接数据库的方法，**MySQLConnection** 类实现该接口，在 **PasswordReminder** 的构造方法中不要直接将类型约束设置为 **MySQLConnection** 类，而是设置为接口类，这样无论你的应用使用什么类型的数据库，**PasswordReminder** 类都能毫无问题地连接数据库，且不违背 **开闭原则**．\n\n```php\nclass MySQLConnection implements DBConnectionInterface {\n    public function connect() {\n        return \"Database connection\";\n    }\n}\n\nclass PasswordReminder {\n    private $dbConnection;\n\n    public function __construct(DBConnectionInterface $dbConnection) {\n        $this->dbConnection = $dbConnection;\n    }\n}\n```\n\n从上面一小段代码，你现在能看出高等级和低等级模块都依赖于抽象了。\n\n## 总结\n\n说实话，**S.O.L.I.D** 一开始似乎很难掌握，但只要不断地使用和遵守其原则，它将成为你的一部分，使你的代码易被扩展、修改，测试，即使重构也不容易出现问题。\n\n文章转自：[https://learnku.com/php/t/28922](https://link.zhihu.com/?target=https%3A//learnku.com/php/t/28922) \n更多文章：[https://learnku.com/php/c/translations](https://link.zhihu.com/?target=https%3A//learnku.com/php/c/translations)\n\n\n\n"]],[0,0],[9111,9111]]],[1567064564931,["sirui-php@DESKTOP-PSVFMK8",[[-1,0,"---\nlayout: (转载) S.O.L.I.D  PHP 面向对象设计的五个基准原则\ntitle: (转载) S.O.L.I.D  PHP 面向对象设计的五个基准原则\ndate: 2019-08-13 14:42:45\ncategories: \"PHP\"\nabbrlink: 004a\ntags: \n- PHP\n- 设计模式\n---\n\n<img src=\"http://images.linyiyuan.top/2wUiYDRjk8.png\" style=\"width:900px;height:400px\" />\n"]],[0,170],[0,0]]],[1567064568462,["sirui-php@DESKTOP-PSVFMK8",[[-1,0,"\n"]],[1,1],[0,0]]],[1567064571996,["sirui-php@DESKTOP-PSVFMK8",[[-1,329,"<!--less-->\n\n"]],[328,341],[328,328]]]],null,"sirui-php@DESKTOP-PSVFMK8"]]}