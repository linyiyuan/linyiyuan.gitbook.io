{"compress":true,"commitItems":[["71dd18b3-1212-4a3a-8ca1-e8f557dea1aa",1583460974440,"",[[1583460916572,["Administrator@YLMF-2019OEFIPO",[[1,0,"# 面向对象三种特性\n\n\n\n"]],[0,0],[13,13]]],[1583461430614,["Administrator@YLMF-2019OEFIPO",[[1,13,"三大特性是：封装、继承、多态所谓封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。封装是面向对象的特征之一，是对象和类概念的主要特性。 简单的说，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。所谓继承是指可以让某个类型的对象获得另一个类型的对象的属性的方法,它支持按级分类的概念。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。 通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。继承概念的实现方式有二类：实现继承与接口继承。实现继承是指直接使用基类的属性和方法而无需额外编码的能力；接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力；所谓多态就是指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。"]],[13,13],[638,638]]],[1583461432749,["Administrator@YLMF-2019OEFIPO",[[1,32,"\n"]],[32,32],[33,33]]],[1583461433006,["Administrator@YLMF-2019OEFIPO",[[1,33,"\n"]],[33,33],[34,34]]],[1583461435278,["Administrator@YLMF-2019OEFIPO",[[1,13,"## "]],[13,13],[16,16]]],[1583461446241,["Administrator@YLMF-2019OEFIPO",[[-1,30,"所谓封装"]],[32,32],[30,30]]],[1583461447261,["Administrator@YLMF-2019OEFIPO",[[1,33,"封装"]],[33,33],[35,35]]],[1583461450761,["Administrator@YLMF-2019OEFIPO",[[1,33,"1. "]],[33,33],[36,36]]],[1583461452266,["Administrator@YLMF-2019OEFIPO",[[-1,38,"也"]],[39,39],[38,38]]],[1583461452953,["Administrator@YLMF-2019OEFIPO",[[1,38,"\n"]],[38,38],[39,39]]],[1583461468942,["Administrator@YLMF-2019OEFIPO",[[1,242,"\n"]],[242,242],[243,243]]],[1583461470728,["Administrator@YLMF-2019OEFIPO",[[1,243,"2. "]],[243,243],[246,246]]],[1583461471997,["Administrator@YLMF-2019OEFIPO",[[-1,246,"所谓"]],[248,248],[246,246]]],[1583461473053,["Administrator@YLMF-2019OEFIPO",[[1,248,"\n"]],[248,248],[249,249]]],[1583461482666,["Administrator@YLMF-2019OEFIPO",[[-1,536,"所谓"]],[538,538],[536,536]]],[1583461483013,["Administrator@YLMF-2019OEFIPO",[[1,536,"\n"]],[536,536],[537,537]]],[1583461484462,["Administrator@YLMF-2019OEFIPO",[[1,537,"3. "]],[537,537],[540,540]]],[1583461485884,["Administrator@YLMF-2019OEFIPO",[[1,542,"\n"]],[542,542],[543,543]]],[1583461489802,["Administrator@YLMF-2019OEFIPO",[[1,651,"\n"]],[650,650],[651,651]]],[1583461490061,["Administrator@YLMF-2019OEFIPO",[[1,652,"\n"]],[651,651],[652,652]]],[1583461505677,["Administrator@YLMF-2019OEFIPO",[[1,243,"\n"]],[242,242],[243,243]]],[1583461505875,["Administrator@YLMF-2019OEFIPO",[[1,244,"\n"]],[243,243],[244,244]]],[1583461508653,["Administrator@YLMF-2019OEFIPO",[[1,243,"qi"]],[243,243],[245,245]]],[1583461509172,["Administrator@YLMF-2019OEFIPO",[[-1,243,"qi"]],[245,245],[243,243]]],[1583461511649,["Administrator@YLMF-2019OEFIPO",[[1,243,"目的： 是"]],[243,243],[248,248]]],[1583461512092,["Administrator@YLMF-2019OEFIPO",[[-1,247,"是"]],[248,248],[247,247]]],[1583461513885,["Administrator@YLMF-2019OEFIPO",[[1,247,"为了类"]],[247,247],[250,250]]],[1583461516233,["Administrator@YLMF-2019OEFIPO",[[1,250,"更加安全"]],[250,250],[254,254]]],[1583461527505,["Administrator@YLMF-2019OEFIPO",[[1,256,"\n"]],[254,254],[255,255]]],[1583461528349,["Administrator@YLMF-2019OEFIPO",[[1,255,"1、成员变量变成private（私有的）\n2、设置方法/调用方法\n3、在方法中增加限制"]],[255,255],[298,298]]],[1583461533969,["Administrator@YLMF-2019OEFIPO",[[1,255,"\n"]],[255,255],[256,256]]],[1583461536646,["Administrator@YLMF-2019OEFIPO",[[1,255,"步骤："]],[255,255],[258,258]]],[1583461547732,["Administrator@YLMF-2019OEFIPO",[[1,598,"\n"]],[597,597],[598,598]]],[1583461547873,["Administrator@YLMF-2019OEFIPO",[[1,599,"\n"]],[598,598],[599,599]]],[1583461548150,["Administrator@YLMF-2019OEFIPO",[[1,599,"子类与父类的属性与方法\n子类继承父类的所有内容，但父类中的private部分不能直接访问\n子类中新增加的属性和方法是对父类的扩展\n子类中定义的与父类同名的属性是对父类属性的覆盖，同名的方法也是对父类方法的覆盖"]],[599,599],[703,703]]],[1583461552720,["Administrator@YLMF-2019OEFIPO",[[1,704,"\n"]],[703,703],[704,704]]],[1583461555909,["Administrator@YLMF-2019OEFIPO",[[1,599,"1. "]],[599,599],[602,602]]],[1583461559125,["Administrator@YLMF-2019OEFIPO",[[1,614,"2. "]],[614,614],[617,617]]],[1583461560449,["Administrator@YLMF-2019OEFIPO",[[1,650,"3. "]],[650,650],[653,653]]],[1583461562223,["Administrator@YLMF-2019OEFIPO",[[1,673,"4/"]],[673,673],[675,675]]],[1583461562624,["Administrator@YLMF-2019OEFIPO",[[-1,674,"/"]],[675,675],[674,674]]],[1583461563041,["Administrator@YLMF-2019OEFIPO",[[1,674,"。 "]],[674,674],[676,676]]],[1583461564084,["Administrator@YLMF-2019OEFIPO",[[-1,674,"。 "]],[676,676],[674,674]]],[1583461564768,["Administrator@YLMF-2019OEFIPO",[[1,674,". "]],[674,674],[676,676]]],[1583461585506,["Administrator@YLMF-2019OEFIPO",[[1,723,"4. \n"]],[722,722],[726,726]]],[1583461585701,["Administrator@YLMF-2019OEFIPO",[[-1,723,"4. "]],[726,726],[724,724]]],[1583461585874,["Administrator@YLMF-2019OEFIPO",[[1,724,"当父类引用指向子类实例的时候，由于子类对父类的方法进行了重写，父类引用在调用该方法的时候表现出的不同，称为多态\n\n多态性是指在父类中定义的属性或行为被子类继承之后，\n\n可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为在父类及其各个子类中具有不同的语义。\n就是说同一种方法在子类与父类中执行的结果不同。\n\n**条件：**\n1.要有继承\n2.父类引用指向子类实例\n3.要有重写\n4.调重写的方法"]],[724,724],[927,927]]],[1583461587006,["Administrator@YLMF-2019OEFIPO",[[-1,724,"当父类引用指向子类实例的时候，由于子类对父类的方法进行了重写，父类引用在调用该方法的时候表现出的不同，称为多态\n\n多态性是指在父类中定义的属性或行为被子类继承之后，\n\n可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为在父类及其各个子类中具有不同的语义。\n就是说同一种方法在子类与父类中执行的结果不同。\n\n**条件：**\n1.要有继承\n2.父类引用指向子类实例\n3.要有重写\n4.调重写的方法"]],[927,927],[724,724]]],[1583461587522,["Administrator@YLMF-2019OEFIPO",[[1,723,"4. "]],[724,724],[726,726]]],[1583461588151,["Administrator@YLMF-2019OEFIPO",[[-1,723,"4. \n"]],[726,726],[722,722]]],[1583461589824,["Administrator@YLMF-2019OEFIPO",[[1,833,"\n"]],[830,830],[831,831]]],[1583461590065,["Administrator@YLMF-2019OEFIPO",[[1,834,"\n"]],[831,831],[832,832]]],[1583461590293,["Administrator@YLMF-2019OEFIPO",[[1,832,"当父类引用指向子类实例的时候，由于子类对父类的方法进行了重写，父类引用在调用该方法的时候表现出的不同，称为多态\n\n多态性是指在父类中定义的属性或行为被子类继承之后，\n\n可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为在父类及其各个子类中具有不同的语义。\n就是说同一种方法在子类与父类中执行的结果不同。\n\n**条件：**\n1.要有继承\n2.父类引用指向子类实例\n3.要有重写\n4.调重写的方法"]],[832,832],[1035,1035]]],[1583461625345,["Administrator@YLMF-2019OEFIPO",[[-1,832,"当父类引用指向子类实例的时候，由于子类对父类的方法进行了重写，父类引用在调用该方法的时候表现出的不同，称为多态\n\n多态性是指在父类中定义的属性或行为被子类继承之后，\n\n可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为在父类及其各个子类中具有不同的语义。\n就是说同一种方法在子类与父类中执行的结果不同。\n\n**条件：**\n1.要有继承\n2.父类引用指向子类实例\n3.要有重写\n4.调重写的方法"]],[832,1035],[832,832]]],[1583461625621,["Administrator@YLMF-2019OEFIPO",[[-1,834,"\n"]],[832,832],[831,831]]],[1583461626067,["Administrator@YLMF-2019OEFIPO",[[-1,833,"\n"]],[831,831],[830,830]]],[1583463623235,["Administrator@YLMF-2019OEFIPO",[[-1,738,"同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。"],[1,777," "]],[738,738],[739,739]]],[1583463624152,["Administrator@YLMF-2019OEFIPO",[[1,738,"同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。"],[-1,738," "]],[739,739],[738,738]]]],null,"Administrator@YLMF-2019OEFIPO"]]}