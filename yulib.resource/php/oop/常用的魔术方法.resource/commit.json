{"compress":true,"commitItems":[["05b06ff3-be26-43f9-b7af-46b04da5b277",1565750558810,"",[[1565750504728,["sirui-php@DESKTOP-PSVFMK8",[[1,0,"# 常用的魔术方法\n\n\n\n"]],[0,0],[12,12]]],[1565750509453,["sirui-php@DESKTOP-PSVFMK8",[[-1,12,"\n"],[1,13,"#"]],[12,12],[13,13]]],[1565750531106,["sirui-php@DESKTOP-PSVFMK8",[[1,13,"# __get() 和 __set()"]],[13,13],[32,32]]],[1565750533088,["sirui-php@DESKTOP-PSVFMK8",[[1,32,"\n\n"]],[32,32],[33,33]]],[1565750539962,["sirui-php@DESKTOP-PSVFMK8",[[1,25," "]],[25,25],[26,26]]],[1565750540695,["sirui-php@DESKTOP-PSVFMK8",[[-1,25," "]],[26,26],[25,25]]],[1565750544574,["sirui-php@DESKTOP-PSVFMK8",[[-1,15,"__"]],[17,17],[15,15]]],[1565750546094,["sirui-php@DESKTOP-PSVFMK8",[[1,15,"——"]],[15,15],[17,17]]],[1565750547006,["sirui-php@DESKTOP-PSVFMK8",[[-1,15,"——"]],[17,17],[15,15]]],[1565750548492,["sirui-php@DESKTOP-PSVFMK8",[[1,15,"__"]],[15,15],[17,17]]],[1565750552770,["sirui-php@DESKTOP-PSVFMK8",[[-1,20,"()和 "]],[24,24],[20,20]]],[1565750553844,["sirui-php@DESKTOP-PSVFMK8",[[1,20,"()"]],[20,20],[22,22]]],[1565750557022,["sirui-php@DESKTOP-PSVFMK8",[[1,23,"和 "]],[22,22],[24,24]]],[1565750579100,["sirui-php@DESKTOP-PSVFMK8",[[-1,33,"\n"],[1,34,"s"]],[33,33],[34,34]]],[1565750579146,["sirui-php@DESKTOP-PSVFMK8",[[1,34,"hi"]],[34,34],[36,36]]],[1565750579704,["sirui-php@DESKTOP-PSVFMK8",[[-1,34,"hi"]],[36,36],[34,34]]],[1565750579830,["sirui-php@DESKTOP-PSVFMK8",[[-1,33,"s"],[1,34,"\n"]],[34,34],[33,33]]],[1565750581011,["sirui-php@DESKTOP-PSVFMK8",[[-1,33,"\n"],[1,34,"实力"]],[33,33],[35,35]]],[1565750581355,["sirui-php@DESKTOP-PSVFMK8",[[-1,34,"力"]],[35,35],[34,34]]],[1565750581489,["sirui-php@DESKTOP-PSVFMK8",[[-1,33,"实"],[1,34,"\n"]],[34,34],[33,33]]],[1565750582865,["sirui-php@DESKTOP-PSVFMK8",[[-1,33,"\n"],[1,34,"实例"]],[33,33],[35,35]]],[1565750583213,["sirui-php@DESKTOP-PSVFMK8",[[1,35,"："]],[35,35],[36,36]]],[1565750583784,["sirui-php@DESKTOP-PSVFMK8",[[1,36,"\n\n"]],[36,36],[37,37]]],[1565750587402,["sirui-php@DESKTOP-PSVFMK8",[[1,37,"```\n1\t<?php\n2\t//__get()方法用来获取私有属性\n3\tfunction __get($property_name)\n4\t{\n5\t    if (isset($this->$property_name))\n6\t    {\n7\t        return ($this->$property_name);\n8\t    }\n9\t    else\n10\t    {\n11\t        return (NULL);\n12\t    }\n13\t}\n14\n15\t//__set()方法用来设置私有属性\n16\tfunction __set($property_name, $value)\n17\t{\n18\t    $this->$property_name = $value;\n19\t}\n```"]],[37,37],[386,386]]],[1565750589661,["sirui-php@DESKTOP-PSVFMK8",[[1,40,"["]],[40,40],[41,41]]],[1565750590143,["sirui-php@DESKTOP-PSVFMK8",[[-1,40,"["]],[41,41],[40,40]]],[1565750590802,["sirui-php@DESKTOP-PSVFMK8",[[1,40,"php"]],[40,40],[43,43]]],[1565750594256,["sirui-php@DESKTOP-PSVFMK8",[[-1,44,"1\t<?php"]],[48,48],[44,44]]],[1565750595110,["sirui-php@DESKTOP-PSVFMK8",[[-1,44,"\n"]],[44,44],[43,43]]],[1565751025304,["sirui-php@DESKTOP-PSVFMK8",[[1,33,"\n"]],[32,32],[33,33]]],[1565751025625,["sirui-php@DESKTOP-PSVFMK8",[[1,34,"\n"]],[33,33],[34,34]]],[1565751026057,["sirui-php@DESKTOP-PSVFMK8",[[1,35,"\n"]],[34,34],[35,35]]],[1565751027458,["sirui-php@DESKTOP-PSVFMK8",[[1,33,"chuz"]],[33,33],[37,37]]],[1565751028121,["sirui-php@DESKTOP-PSVFMK8",[[-1,33,"chuz"]],[37,37],[33,33]]],[1565751028777,["sirui-php@DESKTOP-PSVFMK8",[[1,33,"chuz"]],[33,33],[37,37]]],[1565751029528,["sirui-php@DESKTOP-PSVFMK8",[[-1,33,"chuz"]],[37,37],[33,33]]],[1565751031443,["sirui-php@DESKTOP-PSVFMK8",[[1,33,"初衷："]],[33,33],[36,36]]],[1565751033204,["sirui-php@DESKTOP-PSVFMK8",[[1,33,"\n"]],[33,33],[34,34]]],[1565751034585,["sirui-php@DESKTOP-PSVFMK8",[[1,40,"\n"]],[37,37],[38,38]]],[1565751034761,["sirui-php@DESKTOP-PSVFMK8",[[1,41,"\n"]],[38,38],[39,39]]],[1565751036040,["sirui-php@DESKTOP-PSVFMK8",[[-1,41,"\n"]],[39,39],[38,38]]],[1565751036897,["sirui-php@DESKTOP-PSVFMK8",[[-1,40,"\n"]],[38,38],[37,37]]],[1565751094767,["sirui-php@DESKTOP-PSVFMK8",[[1,37,"一般来说，总是把类的属性定义为private，这更符合现实的逻辑，因为把类的属性定义成private 外面就无法秀发"]],[37,37],[95,95]]],[1565751095303,["sirui-php@DESKTOP-PSVFMK8",[[-1,93,"秀发"]],[95,95],[93,93]]],[1565751096880,["sirui-php@DESKTOP-PSVFMK8",[[1,93,"修复"]],[93,93],[95,95]]],[1565751104821,["sirui-php@DESKTOP-PSVFMK8",[[1,95,"其值，保证了数据的"]],[95,95],[104,104]]],[1565751105775,["sirui-php@DESKTOP-PSVFMK8",[[-1,101,"数据的"]],[104,104],[101,101]]],[1565751129832,["sirui-php@DESKTOP-PSVFMK8",[[1,101,"属性的安全性 更安全，这样属性就不会随意的被赋值上任何非法的值了"]],[101,101],[133,133]]],[1565751134785,["sirui-php@DESKTOP-PSVFMK8",[[-1,107," 更安全，"]],[108,112],[107,107]]],[1565751134995,["sirui-php@DESKTOP-PSVFMK8",[[1,107,"，"]],[107,107],[108,108]]],[1565751143854,["sirui-php@DESKTOP-PSVFMK8",[[1,129,"，但是这样就会有人问，那"]],[129,129],[141,141]]],[1565751149497,["sirui-php@DESKTOP-PSVFMK8",[[-1,130,"但是这样就会有人问，那"]],[141,141],[130,130]]],[1565751151243,["sirui-php@DESKTOP-PSVFMK8",[[1,130,"所有u"]],[130,130],[133,133]]],[1565751151793,["sirui-php@DESKTOP-PSVFMK8",[[-1,130,"所有u"]],[133,133],[130,130]]],[1565751152732,["sirui-php@DESKTOP-PSVFMK8",[[1,130,"所以"]],[130,130],[132,132]]],[1565751507738,["sirui-php@DESKTOP-PSVFMK8",[[1,132,"就出现 "]],[132,132],[136,136]]],[1565751508819,["sirui-php@DESKTOP-PSVFMK8",[[-1,130,"所以就出现 "]],[136,136],[130,130]]],[1565751511887,["sirui-php@DESKTOP-PSVFMK8",[[1,130,"担当"]],[130,130],[132,132]]],[1565751512289,["sirui-php@DESKTOP-PSVFMK8",[[-1,130,"担当"]],[132,132],[130,130]]],[1565751514565,["sirui-php@DESKTOP-PSVFMK8",[[1,130,"但是当"]],[130,130],[133,133]]],[1565751515133,["sirui-php@DESKTOP-PSVFMK8",[[-1,130,"但是当"]],[133,133],[130,130]]],[1565751517152,["sirui-php@DESKTOP-PSVFMK8",[[1,130,"但是乳沟"]],[130,130],[134,134]]],[1565751529675,["sirui-php@DESKTOP-PSVFMK8",[[-1,132,"乳沟\n"],[1,135,"， 对属性的读取和赋值操作是非常频繁的，因此在PHP5中，预定义了两个函数”__get()”和”__set()”来获取和赋值其属性"]],[130,135],[197,197]]],[1565751541336,["sirui-php@DESKTOP-PSVFMK8",[[1,197,"，知识后"]],[197,197],[201,201]]],[1565751542110,["sirui-php@DESKTOP-PSVFMK8",[[-1,198,"知识后"]],[201,201],[198,198]]],[1565751547310,["sirui-php@DESKTOP-PSVFMK8",[[1,198,"这时候有人就会问了，那么"]],[198,198],[210,210]]],[1565751550458,["sirui-php@DESKTOP-PSVFMK8",[[-1,208,"那么"]],[210,210],[208,208]]],[1565751551703,["sirui-php@DESKTOP-PSVFMK8",[[1,208,"为还说呢么"]],[208,208],[213,213]]],[1565751552516,["sirui-php@DESKTOP-PSVFMK8",[[-1,209,"还说呢么"]],[213,213],[209,209]]],[1565751565236,["sirui-php@DESKTOP-PSVFMK8",[[1,209,"什么一定要把属性定义成private 又要有_)"]],[209,209],[233,233]]],[1565751565246,["sirui-php@DESKTOP-PSVFMK8",[[-1,232,")"],[1,233,"_"]],[233,233],[232,232]]],[1565751565696,["sirui-php@DESKTOP-PSVFMK8",[[-1,232,"_"]],[232,232],[231,231]]],[1565751566612,["sirui-php@DESKTOP-PSVFMK8",[[-1,231,"_"]],[231,231],[231,231]]],[1565751575202,["sirui-php@DESKTOP-PSVFMK8",[[1,231,"__get() 和 _+"]],[231,231],[243,243]]],[1565751575758,["sirui-php@DESKTOP-PSVFMK8",[[-1,242,"+"]],[243,243],[242,242]]],[1565751576037,["sirui-php@DESKTOP-PSVFMK8",[[1,242,"+"]],[242,242],[243,243]]],[1565751576634,["sirui-php@DESKTOP-PSVFMK8",[[-1,242,"+"]],[243,243],[242,242]]],[1565751579051,["sirui-php@DESKTOP-PSVFMK8",[[1,242,"_set() "]],[242,242],[249,249]]],[1565751590451,["sirui-php@DESKTOP-PSVFMK8",[[1,249,"直接定义成puli"]],[249,249],[258,258]]],[1565751591279,["sirui-php@DESKTOP-PSVFMK8",[[-1,256,"li"]],[258,258],[256,256]]],[1565751595372,["sirui-php@DESKTOP-PSVFMK8",[[1,256,"blic 不行吗，"]],[256,256],[265,265]]],[1565751596217,["sirui-php@DESKTOP-PSVFMK8",[[-1,264,"，"]],[265,265],[264,264]]],[1565751601246,["sirui-php@DESKTOP-PSVFMK8",[[1,264,"，小编治理给"]],[264,264],[270,270]]],[1565751601711,["sirui-php@DESKTOP-PSVFMK8",[[-1,267,"治理给"]],[270,270],[267,267]]],[1565751606471,["sirui-php@DESKTOP-PSVFMK8",[[1,267,"这里给出以下几点解释"]],[267,267],[277,277]]],[1565751606745,["sirui-php@DESKTOP-PSVFMK8",[[1,279,"\n"]],[277,277],[278,278]]],[1565751607925,["sirui-php@DESKTOP-PSVFMK8",[[1,278,"1"]],[278,278],[279,279]]],[1565751608252,["sirui-php@DESKTOP-PSVFMK8",[[-1,278,"1"]],[279,279],[278,278]]],[1565751609090,["sirui-php@DESKTOP-PSVFMK8",[[1,278,"1. "]],[278,278],[281,281]]],[1565751656835,["sirui-php@DESKTOP-PSVFMK8",[[1,281,"了不让其示例对象直接通过 对象.属性名 来使用和修改，而是通过set属性名,[get](https://www.baidu.com/s?wd=get&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)属性名"]],[281,281],[407,407]]],[1565751661056,["sirui-php@DESKTOP-PSVFMK8",[[-1,319,"[get](https://www.baidu.com/s?wd=get&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)属性名"]],[319,407],[319,319]]],[1565751672758,["sirui-php@DESKTOP-PSVFMK8",[[1,319,"更安全，这样属性就不会随意的被赋值上任何非法的值了，可以在set属性名的方法中进行控制"]],[319,319],[362,362]]],[1565751674358,["sirui-php@DESKTOP-PSVFMK8",[[-1,293," "],[1,294," "],[-1,300," "],[1,301," "],[1,312,"————"]],[312,312],[316,316]]],[1565751675546,["sirui-php@DESKTOP-PSVFMK8",[[-1,312,"————"]],[316,316],[312,312]]],[1565751680467,["sirui-php@DESKTOP-PSVFMK8",[[1,363,"2. \n"]],[362,362],[366,366]]],[1565751680651,["sirui-php@DESKTOP-PSVFMK8",[[1,366,"2"]],[366,366],[367,367]]],[1565751681073,["sirui-php@DESKTOP-PSVFMK8",[[-1,366,"2"]],[367,367],[366,366]]],[1565751711539,["sirui-php@DESKTOP-PSVFMK8",[[1,366,"如果是有很多等级的用户呢？只让其中某一种人有权访问，_get 里要做身份验证的"]],[366,366],[405,405]]],[1565751717123,["sirui-php@DESKTOP-PSVFMK8",[[-1,398,"要做身份验证的"]],[398,405],[398,398]]],[1565751721254,["sirui-php@DESKTOP-PSVFMK8",[[1,398,"就可以做身份验证"]],[398,398],[406,406]]],[1565751724237,["sirui-php@DESKTOP-PSVFMK8",[[1,407,"3. \n"]],[406,406],[410,410]]],[1565751773587,["sirui-php@DESKTOP-PSVFMK8",[[1,410,"你也许会天真的以为你自己写的东西我自己难道不知道嘛，那你就错了，很多时候你写的东西是要给很多人用的，或者你要用别人实现的很多东西。"]],[410,410],[475,475]]],[1565751789930,["sirui-php@DESKTOP-PSVFMK8",[[-1,366,"如果"]],[368,368],[366,366]]],[1565751791736,["sirui-php@DESKTOP-PSVFMK8",[[-1,403,"证"]],[403,403],[403,403]]],[1565751792527,["sirui-php@DESKTOP-PSVFMK8",[[1,403,"证"]],[403,403],[403,403]]],[1565751793991,["sirui-php@DESKTOP-PSVFMK8",[[-1,366,"是"]],[367,367],[366,366]]],[1565751794484,["sirui-php@DESKTOP-PSVFMK8",[[1,366,"jia"]],[366,366],[369,369]]],[1565751795159,["sirui-php@DESKTOP-PSVFMK8",[[-1,366,"jia"]],[369,369],[366,366]]],[1565751796574,["sirui-php@DESKTOP-PSVFMK8",[[1,366,"假设"]],[366,366],[368,368]]],[1565751826058,["sirui-php@DESKTOP-PSVFMK8",[[-1,476,"实例：\n```php\n2\t//__get()方法用来获取私有属性\n3\tfunction __get($property_name)\n4\t{\n5\t    if (isset($this->$property_name))\n6\t    {\n7\t        return ($this->$property_name);\n8\t    }\n9\t    else\n10\t    {\n11\t        return (NULL);\n12\t    }\n13\t}\n14\n15\t//__set()方法用来设置私有属性\n16\tfunction __set($property_name, $value)\n17\t{\n18\t    $this->$property_name = $value;\n19\t}\n```"]],[476,824],[476,476]]],[1565751827987,["sirui-php@DESKTOP-PSVFMK8",[[1,476,"## __get()方法\n\n这个方法用来获取私有成员属性值的，有一个参数， 参数传入你要获取的成员属性的名称，返回获取的属性值， 这个方法不用我们手工的去调用， 是在直接获取私有属性的时候自动调用的。因为私有属性已经被封装上了，是不能直接获取值的（比如：”echo $p1->name” 这样直接获取是错误的），但是如果你在类里面加上了这个方法，在使用”echo $p1->name” 这样的语句直接获取值的时候就会自动调用__get($property_name)方法，将属性name传给参数$property_name，通过这 个方法的内部执行，返回我们传入的私有属性的值。\n\n## __set()方法\n\n这个方法用来为私有成员属性设置值的， 有两个参数，第一个参数为你要为设置值的属性名，第二个参数是要给属性设置的值，没有返回值。这个方法同样不用我们手工去调用，是在直接设置私有属性值的 时候自动调用的，同样属性私有的已经被封装上了， 如果没有__set()这个方法，是不允许的， 比如：”$this->name=’zhangsan’，这样会出错，但是如果你在类里面加上了__set($property_name, $value)这个方法，在直接给私有属性赋值的时候，就会自动调用它，把属性比如name传给$property_name， 把要赋的值”zhangsan”传给$value，通过这个方法的执行，达到赋值的目的， 为了不传入非法的值， 还可以在这个方法给做一下判断。代码如下：\n\n```\n1\t<?php\n2\tclass Person\n3\t{\n4\t    // 下面是人的成员属性， 都是封装的私有成员\n5\t    private $name;      //人的名子\n6\t    private $sex;       //人的性别\n7\t    private $age;       //人的年龄\n8\n9\t    //__get()方法用来获取私有属性\n10\t    function __get($property_name)\n11\t    {\n12\t        echo \"在直接获取私有属性值的时候，自动调用了这个__get()方法<br />\";\n13\t        if (isset($this->$property_name))\n14\t        {\n15\t            return ($this->$property_name);\n16\t        }\n17\t        else\n18\t        {\n19\t            return NULL;\n20\t        }\n21\t    }\n22\n23\t    //__set()方法用来设置私有属性\n24\t    function __set($property_name, $value)\n25\t    {\n26\t        echo \"在直接设置私有属性值的时候，自动调用了这个__set()方法为私有属性赋值<br />\";\n27\t        $this->$property_name = $value;\n28\t    }\n29\t}\n30\n31\t$p1 = new Person();\n32\n33\t// 直接为私有属性赋值的操作， 会自动调用__set()方法进行赋值\n34\t$p1->name = \"张三\";\n35\t$p1->sex = \"男\";\n36\t$p1->age = 20;\n37\n38\t// 直接获取私有属性的值， 会自动调用__get()方法，返回成员属性的值\n39\techo \"姓名：\" . $p1->name . \"<br />\";\n40\techo \"性别：\" . $p1->sex . \"<br />\";\n41\techo \"年龄：\" . $p1->age . \"<br />\";\n42\t?>\n\n```\n\n程序执行结果：\n\n```\n在直接设置私有属性值的时候，自动调用了这个__set()方法为私有属性赋值\n在直接设置私有属性值的时候，自动调用了这个__set()方法为私有属性赋值\n在直接设置私有属性值的时候，自动调用了这个__set()方法为私有属性赋值\n在直接获取私有属性值的时候，自动调用了这个__get()方法\n姓名：张三\n在直接获取私有属性值的时候，自动调用了这个__get()方法\n性别：男\n在直接获取私有属性值的时候，自动调用了这个__get()方法\n年龄：20\n\n```\n\n以上代码如果不加上__get()和__set()方法，程序就会出错，因为不能在类的外部操作私有成员，而上面的代码是通过自动调用__get()和__set()方法来帮助我们直接存取封装的私有成员的。"]],[476,476],[2453,2453]]],[1565751832245,["sirui-php@DESKTOP-PSVFMK8",[[1,478,"#"]],[478,478],[479,479]]],[1565751834061,["sirui-php@DESKTOP-PSVFMK8",[[1,770,"#"]],[770,770],[771,771]]],[1565752019266,["sirui-php@DESKTOP-PSVFMK8",[[1,2456,"\n"]],[2455,2455],[2456,2456]]],[1565752019449,["sirui-php@DESKTOP-PSVFMK8",[[1,2457,"\n"]],[2456,2456],[2457,2457]]],[1565752019927,["sirui-php@DESKTOP-PSVFMK8",[[-1,2457,"\n"],[1,2458,"#"]],[2457,2457],[2458,2458]]],[1565752021359,["sirui-php@DESKTOP-PSVFMK8",[[1,2458,"# ## __isset() 方法"]],[2458,2458],[2475,2475]]],[1565752022821,["sirui-php@DESKTOP-PSVFMK8",[[-1,2458,"# ## __isset() 方法"]],[2475,2475],[2458,2458]]],[1565752023242,["sirui-php@DESKTOP-PSVFMK8",[[-1,2457,"#"],[1,2458,"\n"]],[2458,2458],[2457,2457]]],[1565752031574,["sirui-php@DESKTOP-PSVFMK8",[[1,2457,"## __isset() 方法 和 __unset()"]],[2457,2457],[2484,2484]]],[1565752046579,["sirui-php@DESKTOP-PSVFMK8",[[1,34,"**"],[1,36,"**"]],[34,36],[34,40]]],[1565752063690,["sirui-php@DESKTOP-PSVFMK8",[[1,36,"=="],[1,38,"=="]],[36,38],[36,42]]],[1565752074043,["sirui-php@DESKTOP-PSVFMK8",[[1,38,"# "]],[38,38],[40,40]]],[1565752074973,["sirui-php@DESKTOP-PSVFMK8",[[-1,38,"# "]],[40,40],[38,38]]],[1565752077667,["sirui-php@DESKTOP-PSVFMK8",[[1,34,"# "]],[34,34],[36,36]]],[1565752078623,["sirui-php@DESKTOP-PSVFMK8",[[-1,34,"# "]],[36,36],[34,34]]],[1565752082346,["sirui-php@DESKTOP-PSVFMK8",[[1,2493,"\n"]],[2492,2492],[2493,2493]]],[1565752082698,["sirui-php@DESKTOP-PSVFMK8",[[1,2494,"\n"]],[2493,2493],[2494,2494]]],[1565752087830,["sirui-php@DESKTOP-PSVFMK8",[[-1,2494,"\n"],[1,2495,"#"]],[2494,2494],[2495,2495]]],[1565752088485,["sirui-php@DESKTOP-PSVFMK8",[[1,2495,"## "]],[2495,2495],[2498,2498]]],[1565752098901,["sirui-php@DESKTOP-PSVFMK8",[[-1,2496,"#"],[1,2498,"__isset() 方法\n\n在看这个方法之前我们看一下“isset()”函数的应用，isset()是测定变量是否设定用的函数，传入一个变量作为参数，如果传入的变量存在则传回true，否则传回false。那么如果在一个对象外面使用“isset()”这个函数去测定对象里面的成员是否被设定可不可以用它呢？分两种情况，如果对象里面成员是公有的，我们就可以使用这个函数来测定成员属性，如果是私有的成员属性，这个函数就不起作用了，原因就是因为私有的被封装了，在外部不可见。那么我们就不可以在对象的外部使用“isset()”函数来测定私有成员属性是否被设定了呢？可以，你只要在类里面加上一个“__isset()”方法就可以了，当在类外部使用”isset()”函数来测定对象里面的私有成员是否被设定时，就会自动调用类里面的“__isset()”方法了帮我们完成这样的操作，“__isset()”方法也可以做成私有的。你可以在类里面加上下面这样的代码就可以了：\n\n```\n1\tprivate function __isset($nm)\n2\t{\n3\t    echo \"当在类外部使用isset()函数测定私有成员$nm时，自动调用<br />\";\n4\n5\t    return isset($this->$nm);\n6\t}\n```"]],[2494,2498],[3054,3054]]],[1565752101076,["sirui-php@DESKTOP-PSVFMK8",[[1,2496,"#"]],[2496,2496],[2497,2497]]],[1565752130282,["sirui-php@DESKTOP-PSVFMK8",[[1,3055,"\n\n"]],[3055,3055],[3056,3056]]],[1565752130770,["sirui-php@DESKTOP-PSVFMK8",[[1,3057,"\n"]],[3056,3056],[3057,3057]]],[1565752131025,["sirui-php@DESKTOP-PSVFMK8",[[1,3057,"## __unset()方法\n\n看这个方法之前呢，我们也先来看一下“unset()”这个函数，“unset()”这个函数的作用是删除指定的变量且传回true，参数为要删除的变量。那么如果在一个对象外部去删除对象内部的成员属性用“unset()”函数可不可以呢，也是分两种情况，如果一个对象里面的成员属性是公有的，就可以使用这个函数在对象外面删除对象的公有属性，如果对象的成员属性是私有的，我使用这个函数就没有权限去删除，但同样如果你在一个对象里面加上“__unset()”这个方法，就可以在对象的外部去删除对象的私有成员属性了。在对象里面加上了“__unset()”这个方法之后，在对象外部使用“unset()”函数删除对象内部的私有成员属性时，自动调用“__unset()”函数来帮我们删除对象内部的私有成员属性，这个方法也可以在类的内部定义成私有的。在对象里面加上下面的代码就可以了：\n\n```\n1\tprivate function __unset($nm)\n2\t{\n3\t    echo \"当在类外部使用unset()函数来删除私有成员时自动调用的<br />\";\n4\t    unset($this->$nm);\n5\t}\n\n```\n\n我们来看一个完整的实例：\n\n```\n1\t<?php\n2\tclass Person\n3\t{\n4\t    // 下面是人的成员属性\n5\t    private $name;      //人的名子\n6\t    private $sex;       //人的性别\n7\t    private $age;       //人的年龄\n8\n9\t    // __get()方法用来获取私有属性\n10\t    private function __get($property_name)\n11\t    {\n12\t        if (isset($this->$property_name))\n13\t        {\n14\t            return ($this->$property_name);\n15\t        }\n16\t        else\n17\t        {\n18\t            return NULL;\n19\t        }\n20\t    }\n21\n22\t    // __set()方法用来设置私有属性\n23\t    private function __set($property_name, $value)\n24\t    {\n25\t        $this->$property_name = $value;\n26\t    }\n27\n28\t    // __isset()方法\n29\t    private function __isset($nm)\n30\t    {\n31\t        echo \"isset()函数测定私有成员时，自动调用\";\n32\t        return isset($this->$nm);\n33\t    }\n34\n35\t    //__unset()方法\n36\t    private function __unset($nm)\n37\t    {\n38\t        echo \"当在类外部使用unset()函数来删除私有成员时自动调用的<br />\";\n39\t        unset($this->$nm);\n40\t    }\n41\t}\n42\n43\t$p1 = new Person();\n44\t$p1->name = \"this is a person name\";\n45\n46\t// 在使用isset()函数测定私有成员时，自动调用__isset()方法帮我们完成，返回结果为true\n47\techo var_dump(isset($p1->name)) . \"<br >\";\n48\techo $p1->name . \"<br />\";\n49\n50\t// 在使用unset()函数删除私有成员时，自动调用__unset()方法帮我们完成，删除name私有属性\n51\tunset($p1->name);\n52\n53\t// 已经被删除了，所这行不会有输出\n54\techo $p1->name;\n55\t?>\n\n```\n\n输出结果为：\n\n```\nisset()函数测定私有成员时，自动调用\nboolean true\nthis is a person name\n当在类外部使用unset()函数来删除私有成员时自动调用的\nisset()函数测定私有成员时，自动调用\n```"]],[3057,3057],[4959,4959]]],[1565752132740,["sirui-php@DESKTOP-PSVFMK8",[[1,3059,"#"]],[3059,3059],[3060,3060]]],[1565752201146,["sirui-php@DESKTOP-PSVFMK8",[[1,4961,"\n"]],[4960,4960],[4961,4961]]],[1565752201407,["sirui-php@DESKTOP-PSVFMK8",[[1,4962,"\n"]],[4961,4961],[4962,4962]]],[1565752201804,["sirui-php@DESKTOP-PSVFMK8",[[-1,4962,"\n"],[1,4963,"#"]],[4962,4962],[4963,4963]]],[1565752203088,["sirui-php@DESKTOP-PSVFMK8",[[1,4963,"# # __toString()方法"]],[4963,4963],[4981,4981]]],[1565752203568,["sirui-php@DESKTOP-PSVFMK8",[[-1,4963,"# # __toString()方法"]],[4981,4981],[4963,4963]]],[1565752204114,["sirui-php@DESKTOP-PSVFMK8",[[-1,4962,"#"],[1,4963,"\n"]],[4963,4963],[4962,4962]]],[1565752204394,["sirui-php@DESKTOP-PSVFMK8",[[1,4962,"# __toString()方法"]],[4962,4962],[4978,4978]]],[1565752206242,["sirui-php@DESKTOP-PSVFMK8",[[1,4962,"@__toString()方法"]],[4962,4962],[4977,4977]]],[1565752206444,["sirui-php@DESKTOP-PSVFMK8",[[1,4978,"#"]],[4977,4977],[4978,4978]]],[1565752207524,["sirui-php@DESKTOP-PSVFMK8",[[-1,4962,"@__toString()方法#"]],[4978,4978],[4962,4962]]],[1565752208291,["sirui-php@DESKTOP-PSVFMK8",[[1,4963,"#"]],[4962,4962],[4963,4963]]],[1565752218290,["sirui-php@DESKTOP-PSVFMK8",[[1,4980,"\n"]],[4979,4979],[4980,4980]]],[1565752218450,["sirui-php@DESKTOP-PSVFMK8",[[1,4981,"\n"]],[4980,4980],[4981,4981]]],[1565752218621,["sirui-php@DESKTOP-PSVFMK8",[[1,4981,"我们前面说过在类里面声明“__”开始的方法名的方法（PHP给我们提供的），都是在某一时刻不同情况下自动调用执行的方 法。\n“__toString()”方法也是一样自动被调用的，是在直接输出对象引用时自动调用的， 前面我们讲过对象引用是一个指针，比如 说：“`$p=new Person()`“中，$p就是一个引用，我们不能使用echo 直接输出$p，这样会输 出\n`Catchable fatal error: Object of class Person could not be converted to string`这样的错误。\n\n如果你在类里面定义了“__toString()”方法，在直接输出对象引用的时候，就不会产生错误，而是自动调用 了”__toString()”方法， 输出“__toString()”方法中返回的字符，所以“__toString()”方法一定要有个返回值（return 语句）。\n\n```\n1\t<?php\n2\t// Declare a simple class\n3\tclass TestClass\n4\t{\n5\t    public $foo;\n6\n7\t    public function __construct($foo) {\n8\t        $this->foo = $foo;\n9\t    }\n10\n11\t    //定义一个__toString方法，返加一个成员属性$foo\n12\t    public function __toString() {\n13\t        return $this->foo;\n14\t    }\n15\t}\n16\n17\t$class = new TestClass('Hello');\n18\n19\t//直接输出对象\n20\techo $class;\n21\t?>\n\n```\n\n上例输出：\n\n```\nHello\n```"]],[4981,4981],[5778,5778]]],[1565752228773,["sirui-php@DESKTOP-PSVFMK8",[[-1,4981,"我们前面说过在类里面声明“__”开始的方法名的方法（PHP给我们提供的），都是在某一时刻不同情况下自动调用执行的方 法。"]],[4981,5041],[4981,4981]]],[1565752229630,["sirui-php@DESKTOP-PSVFMK8",[[-1,4981,"\n"]],[4981,4981],[4980,4980]]],[1565752237797,["sirui-php@DESKTOP-PSVFMK8",[[1,4981,"\n"]],[4980,4980],[4981,4981]]],[1565752238220,["sirui-php@DESKTOP-PSVFMK8",[[1,4981,"我们前面说过在类里面声明“__”开始的方法名的方法（PHP给我们提供的），都是在某一时刻不同情况下自动调用执行的方 法。"]],[4981,4981],[4981,5041]]],[1565752264547,["sirui-php@DESKTOP-PSVFMK8",[[1,5779,"\n"]],[5778,5778],[5779,5779]]],[1565752264715,["sirui-php@DESKTOP-PSVFMK8",[[1,5780,"\n"]],[5779,5779],[5780,5780]]],[1565752264981,["sirui-php@DESKTOP-PSVFMK8",[[-1,5780,"\n"],[1,5781,"#"]],[5780,5780],[5781,5781]]],[1565752265773,["sirui-php@DESKTOP-PSVFMK8",[[1,5781,"# # __clone()"]],[5781,5781],[5794,5794]]],[1565752267532,["sirui-php@DESKTOP-PSVFMK8",[[-1,5783,"#"]],[5784,5784],[5783,5783]]],[1565752281936,["sirui-php@DESKTOP-PSVFMK8",[[1,5793,"\n\n"]],[5793,5793],[5794,5794]]],[1565752282339,["sirui-php@DESKTOP-PSVFMK8",[[1,5795,"\n"]],[5794,5794],[5795,5795]]],[1565752282606,["sirui-php@DESKTOP-PSVFMK8",[[1,5795,"有的时候我们需要在一个项目里面，使用两个或多个一样的对象，如果你使用“new”关键字重新创建对象的话，再赋值上相同的属性，这样做比较烦琐而且也容易出错，所以要根据一个对象完全克隆出一个一模一样的对象，是非常有必要的，而且克隆以后，两个对象互不干扰。\n\n在PHP中我们使用“clone”这个关键字克隆对象；\n\n```\n1\t<?\n2\tclass Person\n3\t{\n4\t    //下面是人的成员属性\n5\t    var $name;  //人的名子\n6\t    var $sex;   //人的性别\n7\t    var $age;   //人的年龄\n8\n9\t    //定义一个构造方法参数为属性姓名$name、性别$sex和年龄$age进行赋值\n10\t    function __construct($name = \"\", $sex = \"\", $age = \"\") {\n11\t        $this->name=$name;\n12\t        $this->sex=$sex;\n13\t        $this->age=$age;\n14\t    }\n15\n16\t    //这个人可以说话的方法，说出自己的属性\n17\t    function say() {\n18\t        echo \"我的名子叫：\" . $this->name . \" 性别：\" . $this->sex . \" 我的年龄是：\" . $this->age . \"<br>\";\n19\t    }\n20\t}\n21\n22\t$p1 = new Person(\"张三\", \"男\", 20);\n23\n24\t//使用“clone”克隆新对象p2，和p1对象具有相同的属性和方法。\n25\t$p2=clone $p1;\n26\t$p2->say();\n27\t?>\n\n```\n\nPHP定义了一个特殊的方法名“__clone()”方法，是在对象克隆时自动调用的方法，用“__clone()”方法将建立一个与原对象拥有相同属 性和方法的对象，如果想在克隆后改变原对象的内容，需要在__clone()中重写原本的属性和方法， “__clone()”方法可以没有参数，它自 动包含$this和$that两个指针，$this指向复本，而$that指向原本；\n\n```\n1\t<?\n2\tclass Person\n3\t{\n4\t    //下面是人的成员属性\n5\t    var $name;  //人的名子\n6\t    var $sex;   //人的性别\n7\t    var $age;   //人的年龄\n8\n9\t    //定义一个构造方法参数为属性姓名$name、性别$sex和年龄$age进行赋值\n10\t    function __construct($name = \"\", $sex = \"\", $age = \"\") {\n11\t        $this->name=$name;\n12\t        $this->sex=$sex;\n13\t        $this->age=$age;\n14\t    }\n15\n16\t    //这个人可以说话的方法, 说出自己的属性\n17\t    function say() {\n18\t        echo \"我的名子叫：\" . $this->name . \" 性别：\" . $this->sex . \" 我的年龄是：\" . $this->age . \"<br>\";\n19\t    }\n20\n21\t    //对象克隆时自动调用的方法, 如果想在克隆后改变原对象的内容，需要在__clone()中重写原本的属性和方法\n22\t    function __clone() {\n23\n24\t        //$this指的复本p2, 而$that是指向原本p1，这样就在本方法里，改变了复本的属性。\n25\t        $this->name = \"我是假的 $that->name\";\n26\t        $this->age = 30;\n27\t    }\n28\n29\t}\n30\n31\t$p1 = new Person(\"张三\", \"男\", 20);\n32\t$p2 = clone $p1;\n33\t$p1->say();\n34\t$p2->say();\n35\t?>\n\n```\n\n上例输出：\n\n```\n我的名子叫：张三 性别：男 我的年龄是：20\n我的名子叫：我是假的张三 性别：男 我的年龄是：30\n```"]],[5795,5795],[7656,7656]]],[1565752396834,["sirui-php@DESKTOP-PSVFMK8",[[1,7657,"\n"]],[7656,7656],[7657,7657]]],[1565752396994,["sirui-php@DESKTOP-PSVFMK8",[[1,7658,"\n"]],[7657,7657],[7658,7658]]],[1565752397211,["sirui-php@DESKTOP-PSVFMK8",[[1,7658,"# __call()处理调用错误\n\n在程序开发中，如果在使用对象调用对象内部方法时候，调用的这个方法不存在那么程序就会出错，然后程序退出不能继续执行。那么可不可以在程序调用对象内部 不存在的方法时，提示我们调用的方法及使用的参数不存在，但程序还可以继续执行，这个时候我们就要使用在调用不存在的方法时自动调用的方 法“__call()”。\n\n```\n1\t<?php\n2\t//这是一个测试的类，里面没有属性和方法\n3\tclass Test\n4\t{\n5\n6\t}\n7\n8\t//产生一个Test类的对象\n9\t$test = new Test();\n10\n11\t//调用对象里不存在的方法\n12\t$test->demo(\"one\", \"two\", \"three\");\n13\n14\t//程序不会执行到这里\n15\techo \"this is a test<br>\";\n16\t?>\n\n```\n\n上例出现如下错误，程序通出不能继续执行\n\n```\n1\tFatal error: Call to undefined method Test::demo()\n\n```\n\n下面我们加上“__call()”方法，这个方法有2个参数，第一个参数为调用不存在的方法过程中，自动调用__call()方法时，把这个不存在的方法的方法名传给第一个参数，第二个参数则是把这个方法的多个参数以数组的形式传进来。\n\n```\n1\t<?php\n2\t//这是一个测试的类，里面没有属性和方法\n3\tclass Test\n4\t{\n5\t    //调用不存的方法时自动调用的方法，第一个参数为方法名，第二个参数是数组参数\n6\t    function __call($function_name, $args) {\n7\n8\t        print \"你所调用的函数：$function_name(参数：\";\n9\t        print_r($args);\n10\t        echo \")不存在！<br>\n11\t\";\n12\t    }\n13\t}\n14\n15\t//产生一个Test类的对象\n16\t$test=new Test();\n17\n18\t//调用对象里不存在的方法\n19\t$test->demo(\"one\", \"two\", \"three\");\n20\n21\t//程序不会退出可以执行到这里\n22\techo \"this is a test<br>\";\n23\t?>\n\n```\n\n上例输出结果为：\n\n```\n你所调用的函数： demo(参数：Array ( [0] => one [1] => two [2] => three ) )不存在！\nthis is a test\n```"]],[7658,7658],[8773,8773]]],[1565752399151,["sirui-php@DESKTOP-PSVFMK8",[[1,7659,"#"]],[7659,7659],[7660,7660]]],[1565752399519,["sirui-php@DESKTOP-PSVFMK8",[[1,7661," "]],[7660,7660],[7661,7661]]],[1565752400306,["sirui-php@DESKTOP-PSVFMK8",[[-1,7661," "]],[7661,7661],[7660,7660]]],[1565752630567,["sirui-php@DESKTOP-PSVFMK8",[[1,1137,"php"]],[1137,1137],[1140,1140]]],[1565752633852,["sirui-php@DESKTOP-PSVFMK8",[[1,2928,"php"]],[2928,2928],[2931,2931]]],[1565752635571,["sirui-php@DESKTOP-PSVFMK8",[[1,3602,"php"]],[3602,3602],[3605,3605]]],[1565752637238,["sirui-php@DESKTOP-PSVFMK8",[[1,4856,"php"]],[4856,4856],[4859,4859]]],[1565752638941,["sirui-php@DESKTOP-PSVFMK8",[[1,5405,"php"]],[5405,5405],[5408,5408]]],[1565752640319,["sirui-php@DESKTOP-PSVFMK8",[[1,5783,"php"]],[5783,5783],[5786,5786]]],[1565752641102,["sirui-php@DESKTOP-PSVFMK8",[[-1,5783,"php"]],[5786,5786],[5783,5783]]],[1565752641964,["sirui-php@DESKTOP-PSVFMK8",[[1,5967,"php"]],[5967,5967],[5970,5970]]],[1565752643947,["sirui-php@DESKTOP-PSVFMK8",[[1,6776,"php"]],[6776,6776],[6779,6779]]],[1565752645469,["sirui-php@DESKTOP-PSVFMK8",[[1,7623,"php"]],[7623,7623],[7626,7626]]],[1565752646108,["sirui-php@DESKTOP-PSVFMK8",[[-1,7623,"php"]],[7626,7626],[7623,7623]]],[1565752647363,["sirui-php@DESKTOP-PSVFMK8",[[1,7853,"php"]],[7853,7853],[7856,7856]]],[1565752648925,["sirui-php@DESKTOP-PSVFMK8",[[1,8271,"php"]],[8271,8271],[8274,8274]]]],null,"sirui-php@DESKTOP-PSVFMK8"]]}