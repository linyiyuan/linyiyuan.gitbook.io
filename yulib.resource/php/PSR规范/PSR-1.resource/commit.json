{"compress":true,"commitItems":[["60bb1279-de44-4d67-b10a-439ca3684b97",1565434156127,"",[[1565434109937,["sirui-php@DESKTOP-PSVFMK8",[[1,0,"# PSR-1\n\n\n\n"]],[0,0],[10,10]]],[1565434150101,["sirui-php@DESKTOP-PSVFMK8",[[1,10,"# PSR-1\n\n# 基本代码规范\n\n本篇规范制定了代码基本元素的相关标准， 以确保共享的PHP代码间具有较高程度的技术互通性。\n\n关键词 “必须”(“MUST”)、“一定不可/一定不能”(“MUST NOT”)、“需要”(“REQUIRED”)、 “将会”(“SHALL”)、“不会”(“SHALL NOT”)、“应该”(“SHOULD”)、“不该”(“SHOULD NOT”)、 “推荐”(“RECOMMENDED”)、“可以”(“MAY”)和”可选“(“OPTIONAL”)的详细描述可参见 RFC 2119 。\n\n## 1\\. 概览\n\n```\nPHP代码文件必须以 <?php 或 <?= 标签开始；\n\nPHP代码文件必须以 不带BOM的 UTF-8 编码；\n\nPHP代码中应该只定义类、函数、常量等声明，或其他会产生 从属效应 的操作（如：生成文件输出以及修改.ini配置文件等），二者只能选其一；\n\n命名空间以及类必须符合 PSR 的自动加载规范：PSR-0 或 PSR-4 中的一个；\n\n类的命名必须遵循 StudlyCaps 大写开头的驼峰命名规范；\n\n类中的常量所有字母都必须大写，单词间用下划线分隔；\n\n方法名称必须符合 camelCase 式的小写开头驼峰命名规范。\n\n```\n\n## 2\\. 文件\n\n### 2.1\\. PHP标签\n\nPHP代码必须使用 长标签 或 短输出标签； 一定不可使用其它自定义标签。\n\n### 2.2\\. 字符编码\n\nPHP代码必须且只可使用不带BOM的UTF-8编码。\n\n### 2.3\\. 从属效应（副作用）\n\n一份PHP文件中应该要不就只定义新的声明，如类、函数或常量等不产生从属效应的操作，要不就只有会产生从属效应的逻辑操作，但不该同时具有两者。\n\n“从属效应”(side effects)一词的意思是，仅仅通过包含文件，不直接声明类、 函数和常量等，而执行的逻辑操作。\n\n“从属效应”包含却不仅限于：生成输出、直接的 require 或 include、连接外部服务、修改 ini 配置、抛出错误或异常、修改全局或静态变量、读或写文件等。\n\n以下是一个反例，一份包含声明以及产生从属效应的代码：\n\n```\n<?php\n// 从属效应：修改 ini 配置\nini_set('error_reporting', E_ALL);\n\n// 从属效应：引入文件\ninclude \"file.php\";\n\n// 从属效应：生成输出\necho \"<html>\\n\";\n\n// 声明函数\nfunctionfoo(){\n    // 函数主体部分\n}\n\n```\n\n下面是一个范例，一份只包含声明不产生从属效应的代码：\n\n```\n<?php\n// 声明函数\nfunctionfoo(){\n    // 函数主体部分\n}\n\n// 条件声明**不**属于从属效应\nif (! function_exists('bar')) {\n    functionbar(){\n        // 函数主体部分\n    }\n}\n\n```\n\n## 3\\. 命名空间和类\n\n命名空间以及类的命名必须遵循 PSR-0.\n\n根据规范，每个类都独立为一个文件，且命名空间至少有一个层次：顶级的组织名称（vendor name）。\n\n类的命名必须 遵循 StudlyCaps 大写开头的驼峰命名规范。\n\nPHP 5.3及以后版本的代码必须使用正式的命名空间。\n\n例如：\n\n```\n<?php\n// PHP 5.3及以后版本的写法\nnamespace Vendor\\Model;\n\nclass Foo{\n}\n\n```\n\n5.2.x及之前的版本应该使用伪命名空间的写法，约定俗成使用顶级的组织名称（vendor name）如 Vendor_ 为类前缀。\n\n```\n<?php\n// 5.2.x及之前版本的写法\nclass Vendor_Model_Foo{\n}\n\n```\n\n## 4\\. 类的常量、属性和方法\n\n此处的“类”指代所有的类、接口以及可复用代码块（traits）\n\n### 4.1\\. 常量\n\n类的常量中所有字母都必须大写，词间以下划线分隔。 参照以下代码：\n\n```\n<?php\nnamespace Vendor\\Model;\n\nclass Foo{\n    const VERSION = '1.0';\n    const DATE_APPROVED = '2012-06-01';\n}\n\n```\n\n### 4.2\\. 属性\n\n类的属性命名可以遵循 大写开头的驼峰式 ($StudlyCaps)、小写开头的驼峰式 ($camelCase) 又或者是 下划线分隔式 ($under_score)，本规范不做强制要求，但无论遵循哪种命名方式，都应该在一定的范围内保持一致。这个范围可以是整个团队、整个包、整个类或整个方法。\n\n### 4.3\\. 方法\n\n方法名称必须符合 camelCase() 式的小写开头驼峰命名规范。"]],[10,10],[2082,2082]]],[1565434151162,["sirui-php@DESKTOP-PSVFMK8",[[-1,0,"# PSR-1\n\n\n"],[-1,2082,"\n"]],[0,2083],[2072,2072]]]],null,"sirui-php@DESKTOP-PSVFMK8"]]}