{"compress":true,"commitItems":[["223451bf-abee-49de-95e0-bb1efa90fa97",1569858439767,"# PHP7.2版本新特性\n\n\n## PHP7.2\n\n### PHP7.2新特性\n\n#### 1\\. 增加新的类型object\n\n```\nfunction test(object $obj) : object\n{\n    return new SplQueue();\n}\n\ntest(new StdClass());\n\n```\n\n#### 2\\. 通过名称加载扩展\n\n扩展文件不再需要通过文件加载 (Unix下以_.so_为文件扩展名，在Windows下以 _.dll_ 为文件扩展名) 进行指定。可以在php.ini配置文件进行启用\n\n```\n; ini file\nextension=php-ast\nzend_extension=opcache\n\n```\n\n#### 3.允许重写抽象方法\n\n当一个抽象类继承于另外一个抽象类的时候，继承后的抽象类可以重写被继承的抽象类的抽象方法。\n\n```\n<?php\n\nabstract class A\n{\n    abstract function test(string $s);\n}\nabstract class B extends A\n{\n    // overridden - still maintaining contravariance for parameters and covariance for return\n    abstract function test($s) : int;\n}\n\n```\n\n#### 4\\. 使用Argon2算法生成密码散列\n\nArgon2 已经被加入到密码散列（password hashing） API (这些函数以 _password__ 开头), 以下是暴露出来的常量\n\n#### 5\\. 新增 PDO 字符串扩展类型\n\n当你准备支持多语言字符集，PDO的字符串类型已经扩展支持国际化的字符集。以下是扩展的常量：\n\n*   **PDO::PARAM_STR_NATL**\n*   **PDO::PARAM_STR_CHAR**\n*   **PDO::ATTR_DEFAULT_STR_PARAM**\n\n```\n$db->quote('über', PDO::PARAM_STR | PDO::PARAM_STR_NATL);\n\n```\n\n#### 6\\. 命名分组命名空间支持尾部逗号\n\n```\nuse Foo\\Bar\\{\n    Foo,\n    Bar,\n    Baz,\n};\n\n```\n\n### PHP7.2 变更\n\n#### 1\\. number_format 返回值\n\n```\nvar_dump(number_format(-0.01)); // now outputs string(1) \"0\" instead of string(2) \"-0\"\n\n```\n\n#### 2\\. get_class()不再允许null。\n\n```\nvar_dump(get_class(null))// warning\n\n```\n\n#### 4\\. count 作用在不是 Countable Types 将发生warning\n\n```\ncount(1), // integers are not countable\n\n```\n\n#### 5\\. 不带引号的字符串\n\n在之前不带引号的字符串是不存在的全局常量，转化成他们自身的字符串。现在将会产生waring。\n\n```\nvar_dump(HEELLO);\n\n```\n\n#### 6\\. __autoload 被废弃\n\n__autoload方法已被废弃\n\n#### 7\\. each 被废弃\n\n使用此函数遍历时，比普通的 _foreach_ 更慢， 并且给新语法的变化带来实现问题。因此它被废弃了。\n\n#### 8\\. is_object、gettype修正\n\nis_object 作用在**__PHP_Incomplete_Class** 将反正 true\n\ngettype作用在闭包在将正确返回resource\n\n#### 9\\. Convert Numeric Keys in Object/Array Casts\n\n把数组转对象的时候，可以访问到整型键的值。\n\n```\n// array to object\n$arr = [0 => 1];\n$obj = (object)$arr;\nvar_dump(\n    $obj,\n    $obj->{'0'}, // now accessible\n    $obj->{0} // now accessible\n);\n```\n",[[1569858425098,["Administrator@YLMF-2019OEFIPO",[[1,0,"# PHP7.2版本新特性\n\n\n\n"]],[0,0],[16,16]]],[1569858432417,["Administrator@YLMF-2019OEFIPO",[[1,16,"## PHP7.2\n\n### PHP7.2新特性\n\n#### 1\\. 增加新的类型object\n\n```\nfunction test(object $obj) : object\n{\n    return new SplQueue();\n}\n\ntest(new StdClass());\n\n```\n\n#### 2\\. 通过名称加载扩展\n\n扩展文件不再需要通过文件加载 (Unix下以_.so_为文件扩展名，在Windows下以 _.dll_ 为文件扩展名) 进行指定。可以在php.ini配置文件进行启用\n\n```\n; ini file\nextension=php-ast\nzend_extension=opcache\n\n```\n\n#### 3.允许重写抽象方法\n\n当一个抽象类继承于另外一个抽象类的时候，继承后的抽象类可以重写被继承的抽象类的抽象方法。\n\n```\n<?php\n\nabstract class A\n{\n    abstract function test(string $s);\n}\nabstract class B extends A\n{\n    // overridden - still maintaining contravariance for parameters and covariance for return\n    abstract function test($s) : int;\n}\n\n```\n\n#### 4\\. 使用Argon2算法生成密码散列\n\nArgon2 已经被加入到密码散列（password hashing） API (这些函数以 _password__ 开头), 以下是暴露出来的常量\n\n#### 5\\. 新增 PDO 字符串扩展类型\n\n当你准备支持多语言字符集，PDO的字符串类型已经扩展支持国际化的字符集。以下是扩展的常量：\n\n*   **PDO::PARAM_STR_NATL**\n*   **PDO::PARAM_STR_CHAR**\n*   **PDO::ATTR_DEFAULT_STR_PARAM**\n\n```\n$db->quote('über', PDO::PARAM_STR | PDO::PARAM_STR_NATL);\n\n```\n\n#### 6\\. 命名分组命名空间支持尾部逗号\n\n```\nuse Foo\\Bar\\{\n    Foo,\n    Bar,\n    Baz,\n};\n\n```\n\n### PHP7.2 变更\n\n#### 1\\. number_format 返回值\n\n```\nvar_dump(number_format(-0.01)); // now outputs string(1) \"0\" instead of string(2) \"-0\"\n\n```\n\n#### 2\\. get_class()不再允许null。\n\n```\nvar_dump(get_class(null))// warning\n\n```\n\n#### 4\\. count 作用在不是 Countable Types 将发生warning\n\n```\ncount(1), // integers are not countable\n\n```\n\n#### 5\\. 不带引号的字符串\n\n在之前不带引号的字符串是不存在的全局常量，转化成他们自身的字符串。现在将会产生waring。\n\n```\nvar_dump(HEELLO);\n\n```\n\n#### 6\\. __autoload 被废弃\n\n__autoload方法已被废弃\n\n#### 7\\. each 被废弃\n\n使用此函数遍历时，比普通的 _foreach_ 更慢， 并且给新语法的变化带来实现问题。因此它被废弃了。\n\n#### 8\\. is_object、gettype修正\n\nis_object 作用在**__PHP_Incomplete_Class** 将反正 true\n\ngettype作用在闭包在将正确返回resource\n\n#### 9\\. Convert Numeric Keys in Object/Array Casts\n\n把数组转对象的时候，可以访问到整型键的值。\n\n```\n// array to object\n$arr = [0 => 1];\n$obj = (object)$arr;\nvar_dump(\n    $obj,\n    $obj->{'0'}, // now accessible\n    $obj->{0} // now accessible\n);\n```"]],[16,16],[1914,1914]]]],null,"Administrator@YLMF-2019OEFIPO"]]}