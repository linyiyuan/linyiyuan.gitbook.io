{"compress":true,"commitItems":[["59612dd7-5e80-4285-88be-9796c9c25a15",1565425562685,"",[[1565425515655,["sirui-php@DESKTOP-PSVFMK8",[[1,0,"# PHP7.0版本新特性\n\n\n\n"]],[0,0],[16,16]]],[1565425520287,["sirui-php@DESKTOP-PSVFMK8",[[-1,16,"\n"]],[16,16],[15,15]]],[1565425521835,["sirui-php@DESKTOP-PSVFMK8",[[-1,15,"\n"],[1,16,"1"]],[15,15],[16,16]]],[1565425522200,["sirui-php@DESKTOP-PSVFMK8",[[1,16,". "]],[16,16],[18,18]]],[1565425586251,["sirui-php@DESKTOP-PSVFMK8",[[1,18,"#### 1\\. 组合比较符 (<=>)\n\n组合比较符号用于比较两个表达式。当$a小于、等于或大于$b时它分别返回-1、0或1，比较规则延续常规比较规则。对象不能进行比较\n\n```\nvar_dump('PHP' <=> 'Node'); // int(1)\nvar_dump(123 <=> 456); // int(-1)\nvar_dump(['a', 'b'] <=> ['a', 'b']); // int(0)\n```"]],[18,18],[231,231]]],[1565425591409,["sirui-php@DESKTOP-PSVFMK8",[[-1,18,"#### 1\\. "]],[18,26],[17,17]]],[1565425592527,["sirui-php@DESKTOP-PSVFMK8",[[-1,17," "]],[18,18],[17,17]]],[1565425594226,["sirui-php@DESKTOP-PSVFMK8",[[1,17,". "]],[17,17],[19,19]]],[1565425595398,["sirui-php@DESKTOP-PSVFMK8",[[-1,17,". "]],[19,19],[17,17]]],[1565425595792,["sirui-php@DESKTOP-PSVFMK8",[[1,17," "]],[17,17],[18,18]]],[1565425601032,["sirui-php@DESKTOP-PSVFMK8",[[-1,15,"1. "]],[18,18],[15,15]]],[1565425602082,["sirui-php@DESKTOP-PSVFMK8",[[1,15,"### "]],[15,15],[19,19]]],[1565425659003,["sirui-php@DESKTOP-PSVFMK8",[[1,19,"1. "]],[19,19],[22,22]]],[1565425696265,["sirui-php@DESKTOP-PSVFMK8",[[1,226,"\n\n"]],[226,226],[227,227]]],[1565425697103,["sirui-php@DESKTOP-PSVFMK8",[[1,228,"\n"]],[227,227],[228,228]]],[1565425697336,["sirui-php@DESKTOP-PSVFMK8",[[1,228,"#### 2\\. null合并运算符\n\n由于日常使用中存在大量同时使用三元表达式和isset操作。使用null合并运算符可以简化操作\n\n+\n\n```\n# php7以前\nif(isset($_GET['a'])) {\n  $a = $_GET['a'];\n}\n# php7以前\n$a = isset($_GET['a']) ? $_GET['a'] : 'none';\n\n#PHP 7\n$a = $_GET['a'] ?? 'none';\n```"]],[228,228],[450,450]]],[1565425701234,["sirui-php@DESKTOP-PSVFMK8",[[1,18,"#"]],[18,18],[19,19]]],[1565425704023,["sirui-php@DESKTOP-PSVFMK8",[[-1,297,"+"]],[298,298],[297,297]]],[1565425704375,["sirui-php@DESKTOP-PSVFMK8",[[-1,298,"\n"]],[297,297],[296,296]]],[1565425707503,["sirui-php@DESKTOP-PSVFMK8",[[-1,235,"\\"]],[236,236],[235,235]]],[1565425710855,["sirui-php@DESKTOP-PSVFMK8",[[-1,296,"\n"]],[296,296],[295,295]]],[1565425753128,["sirui-php@DESKTOP-PSVFMK8",[[1,448,"\n"]],[447,447],[448,448]]],[1565425753578,["sirui-php@DESKTOP-PSVFMK8",[[1,448,"#### 4\\. 变量类型声明\n\n变量类型声明有两种模式。一种是强制的，和严格的。允许使用下列类型参数**int**、**string**、**float**、**bool**\n\n同时不能再使用int、string、float、bool作为类的名字了\n\n```\nfunction sumOfInts(int ...$ints)\n{\n    return array_sum($ints);\n}\nvar_dump(sumOfInts(2, '3', 4.1)); // int(9)\n# 严格模式\ndeclare(strict_types=1);\n\nfunction add(int $x, int $y)\n{\n    return $x + $y;\n}\nvar_dump(add('2', 3)); // Fatal error: Argument 1 passed to add() must be of the type integer\n\n```\n\n#### 5\\. 返回值类型声明"]],[448,448],[891,891]]],[1565425757690,["sirui-php@DESKTOP-PSVFMK8",[[-1,453,"4\\"]],[455,455],[453,453]]],[1565425757771,["sirui-php@DESKTOP-PSVFMK8",[[1,453,"3"]],[453,453],[454,454]]],[1565425760817,["sirui-php@DESKTOP-PSVFMK8",[[1,448,"\n"]],[448,448],[449,449]]],[1565426151305,["sirui-php@DESKTOP-PSVFMK8",[[1,892,"\n增加了返回类型声明，类似参数类型。这样更方便的控制函数的返回值.在函数定义的后面加上:类型名即可\n\n```\nfunction fun(int $a): array\n{\n  return $a;\n}\nfun(3);//Fatal error\n```\n"]],[875,891],[1016,1016]]],[1565426153743,["sirui-php@DESKTOP-PSVFMK8",[[-1,881,"\\"]],[882,882],[881,881]]],[1565426280939,["sirui-php@DESKTOP-PSVFMK8",[[1,1016,"\n"]],[1015,1015],[1016,1016]]],[1565426281954,["sirui-php@DESKTOP-PSVFMK8",[[1,1017,"\n"]],[1016,1016],[1017,1017]]],[1565426282161,["sirui-php@DESKTOP-PSVFMK8",[[1,1017,"#### 6\\. 匿名类\n\nphp7允许new class {} 创建一个匿名的对象。\n\n```\n//php7以前\nclass Logger\n{\n    public function log($msg)\n    {\n        echo $msg;\n    }\n}\n\n$util->setLogger(new Logger());\n\n// php7+\n$util->setLogger(new class {\n    public function log($msg)\n    {\n        echo $msg;\n    }\n});\n```"]],[1017,1017],[1293,1293]]],[1565426286086,["sirui-php@DESKTOP-PSVFMK8",[[-1,1023,"\\"]],[1024,1024],[1023,1023]]],[1565426475267,["sirui-php@DESKTOP-PSVFMK8",[[1,1293,"\n"]],[1292,1292],[1293,1293]]],[1565426475665,["sirui-php@DESKTOP-PSVFMK8",[[1,1293,"#### \n7\\. Unicode codepoint 转译语法\n\n这接受一个以16进制形式的 Unicode codepoint，并打印出一个双引号或heredoc包围的 UTF-8 编码格式的字符串。 可以接受任何有效的 codepoint，并且开头的 0 是可以省略的\n\n```\necho \"\\u{aa}\";// ª\necho \"\\u{0000aa}\";// ª\necho \"\\u{9999}\";// 香\n```"]],[1293,1293],[1502,1502]]],[1565426484463,["sirui-php@DESKTOP-PSVFMK8",[[-1,1293,"#### "]],[1293,1298],[1293,1293]]],[1565426485177,["sirui-php@DESKTOP-PSVFMK8",[[1,1294,"#### "]],[1294,1294],[1299,1299]]],[1565426487032,["sirui-php@DESKTOP-PSVFMK8",[[-1,1300,"\\"]],[1301,1301],[1300,1300]]],[1565426518223,["sirui-php@DESKTOP-PSVFMK8",[[1,1502,"\n"]],[1501,1501],[1502,1502]]],[1565426518520,["sirui-php@DESKTOP-PSVFMK8",[[1,1502,"#### 8\\. Closure::call\n\n闭包绑定 简短干练的暂时绑定一个方法到对象上闭包并调用它。\n\n```\nclass A {private $x = 1;}\n\n// PHP 7 之前版本的代码\n$getXCB = function() {return $this->x;};\n$getX = $getXCB->bindTo(new A, 'A'); // 中间层闭包\necho $getX();\n\n// PHP 7+ 及更高版本的代码\n$getX = function() {return $this->x;};\necho $getX->call(new A);\n```"]],[1502,1502],[1793,1793]]],[1565426522585,["sirui-php@DESKTOP-PSVFMK8",[[1,1502,"\n"]],[1502,1502],[1503,1503]]],[1565426525424,["sirui-php@DESKTOP-PSVFMK8",[[-1,1509,"\\"]],[1510,1510],[1509,1509]]],[1565427475168,["sirui-php@DESKTOP-PSVFMK8",[[1,1790,"\n"]],[1789,1789],[1790,1790]]],[1565427475927,["sirui-php@DESKTOP-PSVFMK8",[[-1,1790,"\n"]],[1790,1790],[1789,1789]]],[1565427476330,["sirui-php@DESKTOP-PSVFMK8",[[1,1794,"\n"]],[1793,1793],[1794,1794]]],[1565427477736,["sirui-php@DESKTOP-PSVFMK8",[[1,1795,"\n"]],[1794,1794],[1795,1795]]],[1565427477930,["sirui-php@DESKTOP-PSVFMK8",[[1,1795,"#### 9\\. 带过滤的unserialize\n\n提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入\n\n```\n// 将所有的对象都转换为 __PHP_Incomplete_Class 对象\n$data = unserialize($foo, [\"allowed_classes\" => false]);\n\n// 将除 MyClass 和 MyClass2 之外的所有对象都转换为 __PHP_Incomplete_Class 对象\n$data = unserialize($foo, [\"allowed_classes\" => [\"MyClass\", \"MyClass2\"]);\n\n// 默认情况下所有的类都是可接受的，等同于省略第二个参数\n$data = unserialize($foo, [\"allowed_classes\" => true]);\n```"]],[1795,1795],[2188,2188]]],[1565427483448,["sirui-php@DESKTOP-PSVFMK8",[[-1,1801,"\\"]],[1802,1802],[1801,1801]]],[1565427519426,["sirui-php@DESKTOP-PSVFMK8",[[1,2188,"\n"]],[2187,2187],[2188,2188]]],[1565427520266,["sirui-php@DESKTOP-PSVFMK8",[[1,2188,"#### 10\\. IntlChar类\n\n这个类自身定义了许多静态方法用于操作多字符集的 unicode 字符。需要安装intl拓展\n\n```\n\nprintf('%x', IntlChar::CODEPOINT_MAX);\necho IntlChar::charName('@');\nvar_dump(IntlChar::ispunct('!'));\n```"]],[2188,2188],[2367,2367]]],[1565427524760,["sirui-php@DESKTOP-PSVFMK8",[[-1,2195,"\\"]],[2196,2196],[2195,2195]]],[1565427525784,["sirui-php@DESKTOP-PSVFMK8",[[1,2188,"\n"]],[2188,2188],[2189,2189]]],[1565427715299,["sirui-php@DESKTOP-PSVFMK8",[[1,2368,"\n"]],[2367,2367],[2368,2368]]],[1565427716563,["sirui-php@DESKTOP-PSVFMK8",[[1,2369,"\n"]],[2368,2368],[2369,2369]]],[1565427716865,["sirui-php@DESKTOP-PSVFMK8",[[1,2369,"#### 11\\. 预期\n\n它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。以后可以使用这个这个进行断言测试\n\n```\nini_set('assert.exception', 1);\n\nclass CustomError extends AssertionError {}\n\nassert(false, new CustomError('Some error message'));\n```"]],[2369,2369],[2578,2578]]],[1565427720497,["sirui-php@DESKTOP-PSVFMK8",[[-1,2376,"\\"]],[2377,2377],[2376,2376]]],[1565429324122,["sirui-php@DESKTOP-PSVFMK8",[[1,2578,"\n"]],[2577,2577],[2578,2578]]],[1565429324474,["sirui-php@DESKTOP-PSVFMK8",[[1,2578,"#### 12\\. 命名空间按组导入\n\n从同一个命名空间下导入的类、函数、常量支持按组一次导入\n\n```\n#php7以前\nuse app\\model\\A;\nuse app\\model\\B;\n#php7+\nuse app\\model{A,B}\n```"]],[2578,2578],[2702,2702]]],[1565429327707,["sirui-php@DESKTOP-PSVFMK8",[[1,2578,"\n"]],[2578,2578],[2579,2579]]],[1565429329707,["sirui-php@DESKTOP-PSVFMK8",[[-1,2586,"\\"]],[2587,2587],[2586,2586]]],[1565430829394,["sirui-php@DESKTOP-PSVFMK8",[[1,2703,"\n"]],[2702,2702],[2703,2703]]],[1565430829931,["sirui-php@DESKTOP-PSVFMK8",[[1,2704,"\n"]],[2703,2703],[2704,2704]]],[1565430830276,["sirui-php@DESKTOP-PSVFMK8",[[1,2704,"#### 13.生成器支持返回表达式\n\n它允许在生成器函数中通过使用 _return_ 语法来返回一个表达式 （但是不允许返回引用值）， 可以通过调用 _Generator::getReturn()_ 方法来获取生成器的返回值， 但是这个方法只能在生成器完成产生工作以后调用一次。\n\n```\n$gen = (function() {\n    yield 1;\n    yield 2;\n\n    return 3;\n})();\n\nforeach ($gen as $val) {\n    echo $val, PHP_EOL;\n}\n\necho $gen->getReturn(), PHP_EOL;\n# output\n//1\n//2\n//3\n```"]],[2704,2704],[3028,3028]]],[1565430875812,["sirui-php@DESKTOP-PSVFMK8",[[1,3029,"\n"]],[3028,3028],[3029,3029]]],[1565430875989,["sirui-php@DESKTOP-PSVFMK8",[[1,3030,"\n"]],[3029,3029],[3030,3030]]],[1565430876489,["sirui-php@DESKTOP-PSVFMK8",[[1,3030,"#### 14.生成器委派\n\n现在，只需在最外层生成其中使用yield from，就可以把一个生成器自动委派给其他的生成器\n\n```\nfunction gen()\n{\n    yield 1;\n    yield 2;\n\n    yield from gen2();\n}\n\nfunction gen2()\n{\n    yield 3;\n    yield 4;\n}\n\nforeach (gen() as $val)\n{\n    echo $val, PHP_EOL;\n}\n```"]],[3030,3030],[3269,3269]]],[1565430881658,["sirui-php@DESKTOP-PSVFMK8",[[-1,3013,"//1\n//2"]],[3013,3020],[3013,3013]]],[1565430882332,["sirui-php@DESKTOP-PSVFMK8",[[1,2971,"\n"]],[2969,2969],[2970,2970]]],[1565430882706,["sirui-php@DESKTOP-PSVFMK8",[[1,2972,"\n"]],[2970,2970],[2971,2971]]],[1565430882957,["sirui-php@DESKTOP-PSVFMK8",[[1,2971,"//1\n//2"]],[2971,2971],[2978,2978]]],[1565430891146,["sirui-php@DESKTOP-PSVFMK8",[[1,2970,"# output"]],[2970,2970],[2978,2978]]],[1565430908306,["sirui-php@DESKTOP-PSVFMK8",[[1,3280,"\n"]],[3279,3279],[3280,3280]]],[1565430908642,["sirui-php@DESKTOP-PSVFMK8",[[1,3281,"\n"]],[3280,3280],[3281,3281]]],[1565430908892,["sirui-php@DESKTOP-PSVFMK8",[[1,3281,"#### 15.整数除法函数intdiv\n\n```\nvar_dump(intdiv(10,3)) //3\n```"]],[3281,3281],[3337,3337]]],[1565430976141,["sirui-php@DESKTOP-PSVFMK8",[[1,3338,"\n"]],[3337,3337],[3338,3338]]],[1565430976307,["sirui-php@DESKTOP-PSVFMK8",[[1,3339,"\n"]],[3338,3338],[3339,3339]]],[1565430976523,["sirui-php@DESKTOP-PSVFMK8",[[1,3339,"#### 16.会话选项设置\n\nsession_start() 可以加入一个数组覆盖php.ini的配置\n\n```\nsession_start([\n    'cache_limiter' => 'private',\n    'read_and_close' => true,\n]);\n```"]],[3339,3339],[3484,3484]]],[1565431053274,["sirui-php@DESKTOP-PSVFMK8",[[1,3485,"\n"]],[3484,3484],[3485,3485]]],[1565431053459,["sirui-php@DESKTOP-PSVFMK8",[[1,3486,"\n"]],[3485,3485],[3486,3486]]],[1565431053651,["sirui-php@DESKTOP-PSVFMK8",[[1,3486,"#### 18\\. 随机数、随机字符函数\n\n```\nstring random_bytes(int length);\nint random_int(int min, int max);\n```"]],[3486,3486],[3582,3582]]],[1565431056219,["sirui-php@DESKTOP-PSVFMK8",[[-1,3493,"\\"]],[3494,3494],[3493,3493]]],[1565431113812,["sirui-php@DESKTOP-PSVFMK8",[[1,3582,"\n"]],[3581,3581],[3582,3582]]],[1565431113959,["sirui-php@DESKTOP-PSVFMK8",[[1,3583,"\n"]],[3582,3582],[3583,3583]]],[1565431114114,["sirui-php@DESKTOP-PSVFMK8",[[1,3583,"#### 19\\. define 支持定义数组\n\n```\n#php7+\ndefine('ALLOWED_IMAGE_EXTENSIONS', ['jpg', 'jpeg', 'gif', 'png']);\n```"]],[3583,3583],[3689,3689]]],[1565431116580,["sirui-php@DESKTOP-PSVFMK8",[[-1,3590,"\\"]],[3591,3591],[3590,3590]]]],null,"sirui-php@DESKTOP-PSVFMK8"]]}